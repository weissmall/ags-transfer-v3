#!/usr/sbin/bash
file="${XDG_RUNTIME_DIR:-/tmp}/dmFyIF-ags.js"

/bin/cat <<EOF | /bin/base64 --decode > $file
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __knownSymbol = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __decoratorStart = (base) => [, , , __create(base?.[__knownSymbol("metadata")] ?? null)];
var __decoratorStrings = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
var __expectFn = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError("Function expected") : fn;
var __decoratorContext = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError("Already initialized") : fns.push(__expectFn(fn || null)) });
var __decoratorMetadata = (array, target) => __defNormalProp(target, __knownSymbol("metadata"), array[3]);
var __runInitializers = (array, flags, self, value) => {
  for (var i = 0, fns = array[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self) : value = fns[i].call(self, value);
  return value;
};
var __decorateElement = (array, flags, name, decorators, target, extra) => {
  var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
  var j = k > 3 ? array.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings[k + 5];
  var initializers = k > 3 && (array[j - 1] = []), extraInitializers = array[j] || (array[j] = []);
  var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc(k < 4 ? target : { get [name]() {
    return __privateGet(this, extra);
  }, set [name](x) {
    return __privateSet(this, extra, x);
  } }, name));
  k ? p && k < 4 && __name(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name(target, name);
  for (var i = decorators.length - 1; i >= 0; i--) {
    ctx = __decoratorContext(k, name, done = {}, array[3], extraInitializers);
    if (k) {
      ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn(target, x) : (x) => name in x };
      if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet : __privateMethod)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
      if (k > 2) access.set = p ? (x, y) => __privateSet(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
    }
    it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
    if (k ^ 4 || it === void 0) __expectFn(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
    else if (typeof it !== "object" || it === null) __typeError("Object expected");
    else __expectFn(fn = it.get) && (desc.get = fn), __expectFn(fn = it.set) && (desc.set = fn), __expectFn(fn = it.init) && initializers.unshift(fn);
  }
  return k || __decoratorMetadata(array, target), desc && __defProp(target, name, desc), p ? k ^ 4 ? extra : desc : target;
};
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateIn = (member, obj) => Object(obj) !== obj ? __typeError('Cannot use the "in" operator on this value') : member.has(obj);
var __privateGet = (obj, member, getter2) => (__accessCheck(obj, member, "read from private field"), getter2 ? getter2.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet = (obj, member, value, setter2) => (__accessCheck(obj, member, "write to private field"), setter2 ? setter2.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);

// ../ags/js/lib/overrides.ts
function snakeify(str) {
  return str.replace(/([a-z])([A-Z])/g, "$1_$2").replaceAll("-", "_").toLowerCase();
}
async function suppress(mod, patch2) {
  return mod.then((m) => patch2(m.default)).catch(() => void 0);
}
function patch(proto, prop) {
  Object.defineProperty(proto, prop, {
    get() {
      return this[`get_${snakeify(prop)}`]();
    }
  });
}
await suppress(import("gi://AstalApps"), ({ Apps, Application }) => {
  patch(Apps.prototype, "list");
  patch(Application.prototype, "keywords");
  patch(Application.prototype, "categories");
});
await suppress(import("gi://AstalBattery"), ({ UPower }) => {
  patch(UPower.prototype, "devices");
});
await suppress(import("gi://AstalBluetooth"), ({ Adapter, Bluetooth, Device }) => {
  patch(Adapter.prototype, "uuids");
  patch(Bluetooth.prototype, "adapters");
  patch(Bluetooth.prototype, "devices");
  patch(Device.prototype, "uuids");
});
await suppress(import("gi://AstalHyprland"), ({ Hyprland, Monitor, Workspace }) => {
  patch(Hyprland.prototype, "binds");
  patch(Hyprland.prototype, "monitors");
  patch(Hyprland.prototype, "workspaces");
  patch(Hyprland.prototype, "clients");
  patch(Monitor.prototype, "availableModes");
  patch(Monitor.prototype, "available_modes");
  patch(Workspace.prototype, "clients");
});
await suppress(import("gi://AstalMpris"), ({ Mpris, Player }) => {
  patch(Mpris.prototype, "players");
  patch(Player.prototype, "supported_uri_schemes");
  patch(Player.prototype, "supportedUriSchemes");
  patch(Player.prototype, "supported_mime_types");
  patch(Player.prototype, "supportedMimeTypes");
  patch(Player.prototype, "comments");
});
await suppress(import("gi://AstalNetwork"), ({ Wifi }) => {
  patch(Wifi.prototype, "access_points");
  patch(Wifi.prototype, "accessPoints");
});
await suppress(import("gi://AstalNotifd"), ({ Notifd, Notification: Notification2 }) => {
  patch(Notifd.prototype, "notifications");
  patch(Notification2.prototype, "actions");
});
await suppress(import("gi://AstalPowerProfiles"), ({ PowerProfiles }) => {
  patch(PowerProfiles.prototype, "actions");
});
await suppress(import("gi://AstalWp"), ({ Wp: Wp3, Audio, Video }) => {
  patch(Wp3.prototype, "devices");
  patch(Audio.prototype, "streams");
  patch(Audio.prototype, "recorders");
  patch(Audio.prototype, "microphones");
  patch(Audio.prototype, "speakers");
  patch(Audio.prototype, "devices");
  patch(Video.prototype, "streams");
  patch(Video.prototype, "recorders");
  patch(Video.prototype, "sinks");
  patch(Video.prototype, "sources");
  patch(Video.prototype, "devices");
});
await suppress(import("gi://AstalTray"), ({ Tray: Tray2 }) => {
  patch(Tray2.prototype, "items");
});

// ../ags/js/node_modules/gnim/dist/gobject.ts
import GObject from "gi://GObject";
import GLib from "gi://GLib";

// ../ags/js/node_modules/gnim/dist/util.ts
function kebabify(str) {
  return str.replace(/([a-z])([A-Z])/g, "$1-$2").replaceAll("_", "-").toLowerCase();
}
function snakeify2(str) {
  return str.replace(/([a-z])([A-Z])/g, "$1-$2").replaceAll("-", "_").toLowerCase();
}
function xml({ name, attributes, children }) {
  let builder = `<${name}`;
  const attrs = Object.entries(attributes ?? []);
  if (attrs.length > 0) {
    for (const [key, value] of attrs) {
      builder += ` ${key}="${value}"`;
    }
  }
  if (children && children.length > 0) {
    builder += ">";
    for (const node of children) {
      builder += xml(node);
    }
    builder += `</${name}>`;
  } else {
    builder += " />";
  }
  return builder;
}
function set(obj, prop, value) {
  const key = snakeify2(prop);
  const getter2 = `get_${key}`;
  const setter2 = `set_${key}`;
  let current;
  if (getter2 in obj && typeof obj[getter2] === "function") {
    current = obj[getter2]();
  } else {
    current = obj[prop];
  }
  if (current !== value) {
    if (setter2 in obj && typeof obj[setter2] === "function") {
      ;
      obj[setter2](value);
    } else {
      Object.assign(obj, { [prop]: value });
    }
  }
}

// ../ags/js/node_modules/gnim/dist/gobject.ts
var priv = Symbol("gobject private");
var { defineProperty, fromEntries, entries } = Object;
var { Object: GObj, registerClass } = GObject;
var SignalFlags = GObject.SignalFlags;
var AccumulatorType = GObject.AccumulatorType;
var ParamSpec = GObject.ParamSpec;
var ParamFlags = GObject.ParamFlags;
function assertField(ctx) {
  if (ctx.private) throw Error("private fields are not supported");
  if (ctx.static) throw Error("static fields are not supported");
  if (typeof ctx.name !== "string") {
    throw Error("only strings can be gobject property keys");
  }
  return ctx.name;
}
function getter(typeDeclaration) {
  return function(get, ctx) {
    const fieldName = assertField(ctx);
    const meta = ctx.metadata;
    const props = meta.properties ??= {};
    if (fieldName in props) {
      const { flags, type } = props[fieldName];
      props[fieldName] = { flags: flags | ParamFlags.READABLE, type };
    } else {
      props[fieldName] = { flags: ParamFlags.READABLE, type: typeDeclaration };
    }
    return get;
  };
}
function setter(typeDeclaration) {
  return function(set2, ctx) {
    const fieldName = assertField(ctx);
    const meta = ctx.metadata;
    const props = meta.properties ??= {};
    if (fieldName in props) {
      const { flags, type } = props[fieldName];
      props[fieldName] = { flags: flags | ParamFlags.WRITABLE, type };
    } else {
      props[fieldName] = { flags: ParamFlags.WRITABLE, type: typeDeclaration };
    }
    return set2;
  };
}
function signal(...args) {
  return function(method, ctx) {
    if (ctx.private) throw Error("private fields are not supported");
    if (ctx.static) throw Error("static fields are not supported");
    if (typeof ctx.name !== "string") {
      throw Error("only strings can be gobject signals");
    }
    const signalName2 = kebabify(ctx.name);
    const meta = ctx.metadata;
    const signals = meta.signals ??= {};
    if (Array.isArray(args[0])) {
      const [params, returnType, options] = args;
      signals[signalName2] = {
        method,
        default: options?.default ?? true,
        param_types: params.map((i) => "$gtype" in i ? i.$gtype : i),
        ...returnType && {
          return_type: "$gtype" in returnType ? returnType.$gtype : returnType
        },
        ...options?.flags && {
          flags: options.flags
        },
        ...typeof options?.accumulator === "number" && {
          accumulator: options.accumulator
        }
      };
    } else {
      const params = args;
      signals[signalName2] = {
        method,
        default: true,
        param_types: params.map((i) => "$gtype" in i ? i.$gtype : i)
      };
    }
    return function(...params) {
      return this.emit(signalName2, ...params);
    };
  };
}
var MAXINT = 2 ** 31 - 1;
var MININT = -(2 ** 31);
var MAXUINT = 2 ** 32 - 1;
var MAXFLOAT = 34028235e31;
var MINFLOAT = -34028235e31;
var MININT64 = Number.MIN_SAFE_INTEGER;
var MAXINT64 = Number.MAX_SAFE_INTEGER;
function pspecFromGType(type, name, flags) {
  switch (type) {
    case GObject.TYPE_BOOLEAN:
      return ParamSpec.boolean(name, "", "", flags, false);
    case GObject.TYPE_STRING:
      return ParamSpec.string(name, "", "", flags, "");
    case GObject.TYPE_INT:
      return ParamSpec.int(name, "", "", flags, MININT, MAXINT, 0);
    case GObject.TYPE_UINT:
      return ParamSpec.uint(name, "", "", flags, 0, MAXUINT, 0);
    case GObject.TYPE_INT64:
      return ParamSpec.int64(name, "", "", flags, MININT64, MAXINT64, 0);
    case GObject.TYPE_UINT64:
      return ParamSpec.uint64(name, "", "", flags, 0, Number.MAX_SAFE_INTEGER, 0);
    case GObject.TYPE_FLOAT:
      return ParamSpec.float(name, "", "", flags, MINFLOAT, MAXFLOAT, 0);
    case GObject.TYPE_DOUBLE:
      return ParamSpec.double(name, "", "", flags, Number.MIN_VALUE, Number.MIN_VALUE, 0);
    case GObject.TYPE_JSOBJECT:
      return ParamSpec.jsobject(name, "", "", flags);
    case GObject.TYPE_VARIANT:
      return ParamSpec.object(name, "", "", flags, GLib.Variant);
    case GObject.TYPE_ENUM:
    case GObject.TYPE_INTERFACE:
    case GObject.TYPE_BOXED:
    case GObject.TYPE_POINTER:
    case GObject.TYPE_PARAM:
    case GObject.type_from_name("GType"):
      throw Error(`cannot guess ParamSpec from GType "${type}"`);
    case GObject.TYPE_OBJECT:
    default:
      return ParamSpec.object(name, "", "", flags, type);
  }
}
function pspec(name, flags, declaration) {
  if (declaration instanceof ParamSpec) return declaration;
  if (declaration === Object || declaration === Function || declaration === Array) {
    return ParamSpec.jsobject(name, "", "", flags);
  }
  if (declaration === String) {
    return ParamSpec.string(name, "", "", flags, "");
  }
  if (declaration === Number) {
    return ParamSpec.double(name, "", "", flags, -Number.MAX_VALUE, Number.MAX_VALUE, 0);
  }
  if (declaration === Boolean) {
    return ParamSpec.boolean(name, "", "", flags, false);
  }
  if ("$gtype" in declaration) {
    return pspecFromGType(declaration.$gtype, name, flags);
  }
  if (typeof declaration === "function") {
    return declaration(name, flags);
  }
  throw Error("invalid PropertyTypeDeclaration");
}
function register(options = {}) {
  return function(cls, ctx) {
    const t = options.Template;
    if (typeof t === "string" && !t.startsWith("resource://") && !t.startsWith("file://")) {
      options.Template = new TextEncoder().encode(t);
    }
    const meta = ctx.metadata;
    const props = fromEntries(
      entries(meta.properties ?? {}).map(([fieldName, { flags, type }]) => {
        const key = kebabify(fieldName);
        const spec = pspec(key, flags, type);
        return [key, spec];
      })
    );
    const signals = fromEntries(
      entries(meta.signals ?? {}).map(([signalName2, { default: def, method, ...signal2 }]) => {
        if (def) {
          defineProperty(cls.prototype, `on_${signalName2.replaceAll("-", "_")}`, {
            enumerable: false,
            configurable: false,
            value: method
          });
        }
        return [signalName2, signal2];
      })
    );
    delete meta.properties;
    delete meta.signals;
    registerClass({ ...options, Properties: props, Signals: signals }, cls);
  };
}
Function.$gtype = Object.$gtype;
Array.$gtype = Object.$gtype;
Date.$gtype = Object.$gtype;
Map.$gtype = Object.$gtype;
Set.$gtype = Object.$gtype;

// ../ags/js/lib/gtk4/app.ts
import GLib4 from "gi://GLib?version=2.0";
import Gtk from "gi://Gtk?version=4.0";
import Gdk from "gi://Gdk?version=4.0";
import Gio3 from "gi://Gio?version=2.0";

// ../ags/js/node_modules/gnim/dist/dbus.ts
import Gio from "gi://Gio";
import GLib2 from "gi://GLib";
import GObject2 from "gi://GObject";
var DEFAULT_TIMEOUT = 1e4;
var Variant = GLib2.Variant;
var info = Symbol("dbus interface info");
var internals = Symbol("dbus interface internals");
var remoteMethod = Symbol("proxy remoteMethod");
var remoteMethodAsync = Symbol("proxy remoteMethodAsync");
var remotePropertySet = Symbol("proxy remotePropertySet");
var _a;
var Service = class extends GObject2.Object {
  constructor() {
    super();
    this[_a] = {
      priv: {},
      onStop: /* @__PURE__ */ new Set()
    };
    const service = this.constructor;
    if (!service[info]) throw Error("missing interface info");
    this.#info = service[info];
  }
  static {
    GObject2.registerClass(this);
  }
  #info;
  notify(propertyName) {
    const prop = this.#info.lookup_property(propertyName);
    if (prop && this[internals].dbusObject) {
      this[internals].dbusObject.emit_property_changed(
        propertyName,
        new GLib2.Variant(prop.signature, this[propertyName])
      );
    }
    super.notify(prop ? kebabify(propertyName) : propertyName);
  }
  emit(name, ...params) {
    const signal2 = this.#info.lookup_signal(name);
    if (signal2 && this[internals].dbusObject) {
      const signature = `(${signal2.args.map((a) => a.signature).join("")})`;
      this[internals].dbusObject.emit_signal(name, new GLib2.Variant(signature, params));
    }
    return super.emit(signal2 ? kebabify(name) : name, ...params);
  }
  // server
  #handlePropertyGet(_, propertyName) {
    const prop = this.#info.lookup_property(propertyName);
    if (!prop) {
      throw Error(`${this.constructor.name} has no exported property: "${propertyName}"`);
    }
    const value = this[propertyName];
    if (typeof value !== "undefined") {
      return new GLib2.Variant(prop.signature, value);
    } else {
      return null;
    }
  }
  // server
  #handlePropertySet(_, propertyName, value) {
    const newValue = value.deepUnpack();
    const prop = this.#info.lookup_property(propertyName);
    if (!prop) {
      throw Error(`${this.constructor.name} has no property: "${propertyName}"`);
    }
    if (this[propertyName] !== newValue) {
      this[propertyName] = value.deepUnpack();
    }
  }
  // server
  #returnError(error, invocation) {
    console.error(error);
    if (error instanceof GLib2.Error) {
      return invocation.return_gerror(error);
    }
    if (error instanceof Error) {
      return invocation.return_dbus_error(
        error.name.includes(".") ? error.name : `gjs.JSError.${error.name}`,
        error.message
      );
    }
    invocation.return_dbus_error("gjs.DBusService.UnknownError", `${error}`);
  }
  // server
  #returnValue(value, methodName, invocation) {
    if (value === null || value === void 0) {
      return invocation.return_value(new GLib2.Variant("()", []));
    }
    const args = this.#info.lookup_method(methodName)?.out_args ?? [];
    const signature = `(${args.map((arg) => arg.signature).join("")})`;
    if (!Array.isArray(value)) throw Error("value has to be a tuple");
    invocation.return_value(new GLib2.Variant(signature, value));
  }
  // server
  #handleMethodCall(_, methodName, parameters, invocation) {
    try {
      const value = this[methodName](
        ...parameters.deepUnpack()
      );
      if (value instanceof GLib2.Variant) {
        invocation.return_value(value);
      } else if (value instanceof Promise) {
        value.then((value2) => this.#returnValue(value2, methodName, invocation)).catch((error) => this.#returnError(error, invocation));
      } else {
        this.#returnValue(value, methodName, invocation);
      }
    } catch (error) {
      this.#returnError(error, invocation);
    }
  }
  // server
  async serve({
    busType = Gio.BusType.SESSION,
    name = this.#info.name,
    objectPath = "/" + this.#info.name.split(".").join("/"),
    flags = Gio.BusNameOwnerFlags.NONE,
    timeout: timeout2 = DEFAULT_TIMEOUT
  } = {}) {
    const impl = new Gio.DBusExportedObject(
      // @ts-expect-error missing constructor type
      { g_interface_info: this.#info }
    );
    impl.connect("handle-method-call", this.#handleMethodCall.bind(this));
    impl.connect("handle-property-get", this.#handlePropertyGet.bind(this));
    impl.connect("handle-property-set", this.#handlePropertySet.bind(this));
    this.#info.cache_build();
    return new Promise((resolve, reject) => {
      let source = timeout2 > 0 ? setTimeout(() => {
        reject(Error(`serve timed out`));
        source = null;
      }, timeout2) : null;
      const clear = () => {
        if (source) {
          clearTimeout(source);
          source = null;
        }
      };
      const busId = Gio.bus_own_name(
        busType,
        name,
        flags,
        (conn) => {
          try {
            impl.export(conn, objectPath);
            this[internals].dbusObject = impl;
            this[internals].onStop.add(() => {
              Gio.bus_unown_name(busId);
              impl.unexport();
              this.#info.cache_release();
              delete this[internals].dbusObject;
            });
            resolve(this);
          } catch (error) {
            reject(error);
          }
        },
        clear,
        clear
      );
    });
  }
  // proxy
  #handlePropertiesChanged(_, changed, invalidated) {
    const set2 = /* @__PURE__ */ new Set([...Object.keys(changed.deepUnpack()), ...invalidated]);
    for (const prop of set2.values()) {
      this.notify(prop);
    }
  }
  // proxy
  #handleSignal(_, _sender, signal2, parameters) {
    this.emit(kebabify(signal2), ...parameters.deepUnpack());
  }
  // proxy
  #remoteMethodParams(methodName, args) {
    const { proxy } = this[internals];
    if (!proxy) throw Error("invalid remoteMethod invocation: not a proxy");
    const method = this.#info.lookup_method(methodName);
    if (!method) throw Error("method not found");
    const signature = `(${method.in_args.map((a) => a.signature).join("")})`;
    return [
      methodName,
      new GLib2.Variant(signature, args),
      Gio.DBusCallFlags.NONE,
      DEFAULT_TIMEOUT,
      null
    ];
  }
  // proxy
  [(info, _a = internals, remoteMethod)](methodName, args) {
    const params = this.#remoteMethodParams(methodName, args);
    return this[internals].proxy.call_sync(...params);
  }
  // proxy
  [remoteMethodAsync](methodName, args) {
    return new Promise((resolve, reject) => {
      try {
        const params = this.#remoteMethodParams(methodName, args);
        this[internals].proxy.call(...params, (_, res) => {
          try {
            resolve(this[internals].proxy.call_finish(res));
          } catch (error) {
            reject(error);
          }
        });
      } catch (error) {
        reject(error);
      }
    });
  }
  // proxy
  [remotePropertySet](name, value) {
    const proxy = this[internals].proxy;
    const prop = this.#info.lookup_property(name);
    const variant = new GLib2.Variant(prop.signature, value);
    proxy.set_cached_property(name, variant);
    proxy.call(
      "org.freedesktop.DBus.Properties.Set",
      new GLib2.Variant("(ssv)", [proxy.gInterfaceName, name, variant]),
      Gio.DBusCallFlags.NONE,
      -1,
      null,
      (_, res) => {
        try {
          proxy.call_finish(res);
        } catch (e) {
          console.error(e);
        }
      }
    );
  }
  // proxy
  async proxy({
    bus = Gio.DBus.session,
    name = this.#info.name,
    objectPath = "/" + this.#info.name.split(".").join("/"),
    flags = Gio.DBusProxyFlags.NONE,
    timeout: timeout2 = DEFAULT_TIMEOUT
  } = {}) {
    const proxy = new Gio.DBusProxy({
      gConnection: bus,
      gInterfaceName: this.#info.name,
      gInterfaceInfo: this.#info,
      gName: name,
      gFlags: flags,
      gObjectPath: objectPath
    });
    return new Promise((resolve, reject) => {
      const cancallable = new Gio.Cancellable();
      let source = timeout2 > 0 ? setTimeout(() => {
        reject(Error(`proxy timed out`));
        source = null;
        cancallable.cancel();
      }, timeout2) : null;
      proxy.init_async(GLib2.PRIORITY_DEFAULT, cancallable, (_, res) => {
        try {
          if (source) {
            clearTimeout(source);
            source = null;
          }
          proxy.init_finish(res);
          this[internals].proxy = proxy;
          const ids = [
            proxy.connect("g-signal", this.#handleSignal.bind(this)),
            proxy.connect(
              "g-properties-changed",
              this.#handlePropertiesChanged.bind(this)
            )
          ];
          this[internals].onStop.add(() => {
            ids.forEach((id) => proxy.disconnect(id));
            delete this[internals].proxy;
          });
          resolve(this);
        } catch (error) {
          reject(error);
        }
      });
    });
  }
  stop() {
    const { onStop } = this[internals];
    for (const cb of onStop.values()) {
      onStop.delete(cb);
      cb();
    }
  }
};
function iface(name, options) {
  return function(cls, ctx) {
    const meta = ctx.metadata;
    if (!meta) throw Error(`${cls.name} is not an interface`);
    const { dbusMethods = {}, dbusSignals = {}, dbusProperties = {} } = meta;
    const infoXml = xml({
      name: "node",
      children: [
        {
          name: "interface",
          attributes: { name },
          children: [
            ...Object.entries(dbusMethods).map(([name2, args]) => ({
              name: "method",
              attributes: { name: name2 },
              children: args.map((arg) => ({ name: "arg", attributes: arg }))
            })),
            ...Object.entries(dbusSignals).map(([name2, args]) => ({
              name: "signal",
              attributes: { name: name2 },
              children: args.map((arg) => ({ name: "arg", attributes: arg }))
            })),
            ...Object.values(dbusProperties).map(({ name: name2, type, read, write }) => ({
              name: "property",
              attributes: {
                ...name2 && { name: name2 },
                type,
                access: (read ? "read" : "") + (write ? "write" : "")
              }
            }))
          ]
        }
      ]
    });
    Object.assign(cls, { [info]: Gio.DBusInterfaceInfo.new_for_xml(infoXml) });
    register(options)(cls, ctx);
  };
}
function installMethod(args, method, ctx) {
  const name = ctx.name;
  const meta = ctx.metadata;
  const methods = meta.dbusMethods ??= {};
  if (typeof name !== "string") {
    throw Error("only string named methods are allowed");
  }
  const [inArgs, outArgs = []] = Array.isArray(args[0]) ? args : [args];
  methods[name] = [
    ...inArgs.map((arg) => ({
      direction: "in",
      ...typeof arg === "string" ? { type: arg } : arg
    })),
    ...outArgs.map((arg) => ({
      direction: "out",
      ...typeof arg === "string" ? { type: arg } : arg
    }))
  ];
  return name;
}
function methodAsync(...args) {
  return function(method, ctx) {
    const name = installMethod(args, method, ctx);
    return async function(...args2) {
      if (this[internals].proxy) {
        const value = await this[remoteMethodAsync](name, args2);
        return value.deepUnpack();
      } else {
        return method.apply(this, args2);
      }
    };
  };
}

// ../ags/js/lib/app/dbus.ts
var _Request_dec, _Quit_dec, _ToggleWindow_dec, _Inspector_dec, _a2, _AppDBus_decorators, _init;
_AppDBus_decorators = [iface("io.Astal.Application")];
var _AppDBus = class _AppDBus extends (_a2 = Service, _Inspector_dec = [methodAsync()], _ToggleWindow_dec = [methodAsync("s")], _Quit_dec = [methodAsync()], _Request_dec = [methodAsync(["as"], ["s"])], _a2) {
  constructor(impl) {
    super();
    __runInitializers(_init, 5, this);
    this.impl = void 0;
    this.impl = impl;
  }
  async Inspector() {
    return Promise.resolve(this.impl.insector());
  }
  async ToggleWindow(name) {
    return Promise.resolve(this.impl.toggleWindow(name));
  }
  async Quit() {
    return Promise.resolve(this.impl.quit());
  }
  async Request(argv) {
    return this.impl.request(argv).then((res) => [res]);
  }
  static proxy(instanceName) {
    const app2 = new _AppDBus({
      insector() {
      },
      toggleWindow() {
      },
      quit() {
      },
      request: () => Promise.reject()
    });
    return app2.proxy({
      name: "io.Astal." + instanceName
    });
  }
};
_init = __decoratorStart(_a2);
__decorateElement(_init, 1, "Inspector", _Inspector_dec, _AppDBus);
__decorateElement(_init, 1, "ToggleWindow", _ToggleWindow_dec, _AppDBus);
__decorateElement(_init, 1, "Quit", _Quit_dec, _AppDBus);
__decorateElement(_init, 1, "Request", _Request_dec, _AppDBus);
_AppDBus = __decorateElement(_init, 0, "AppDBus", _AppDBus_decorators, _AppDBus);
__runInitializers(_init, 1, _AppDBus);
var AppDBus = _AppDBus;

// ../ags/js/lib/gtk4/app.ts
import { setConsoleLogDomain } from "console";
import { exit, programArgs } from "system";

// ../ags/js/node_modules/gnim/dist/jsx/jsx.ts
import GObject5 from "gi://GObject";

// ../ags/js/node_modules/gnim/dist/jsx/Fragment.ts
import GObject3 from "gi://GObject";
var _a3, _b;
var Fragment = class _Fragment extends GObject3.Object {
  static {
    this[_b] = {
      append: { param_types: [GObject3.TYPE_OBJECT] },
      remove: { param_types: [GObject3.TYPE_OBJECT] }
    };
  }
  static {
    this[_a3] = {
      children: GObject3.ParamSpec.jsobject("children", "", "", GObject3.ParamFlags.READABLE)
    };
  }
  static {
    GObject3.registerClass(this);
  }
  *[(_b = GObject3.signals, _a3 = GObject3.properties, Symbol.iterator)]() {
    yield* this._children;
  }
  append(child) {
    if (child instanceof _Fragment) {
      throw Error(`nesting Fragments are not yet supported`);
    }
    this._children.push(child);
    this.emit("append", child);
    this.notify("children");
  }
  remove(child) {
    const index = this._children.findIndex((i) => i === child);
    this._children.splice(index, 1);
    this.emit("remove", child);
    this.notify("children");
  }
  constructor({ children = [] } = {}) {
    super();
    this._children = Array.isArray(children) ? children : [children];
  }
  connect(signal2, callback) {
    return super.connect(signal2, callback);
  }
};

// ../ags/js/node_modules/gnim/dist/jsx/state.ts
import GObject4 from "gi://GObject";
import Gio2 from "gi://Gio";
import GLib3 from "gi://GLib";
var empty = Symbol("empty computed value");
var Accessor = class _Accessor extends Function {
  static {
    this.$gtype = GObject4.TYPE_JSOBJECT;
  }
  #get;
  #subscribe;
  constructor(get, subscribe) {
    super("return arguments.callee._call.apply(arguments.callee, arguments)");
    this.#subscribe = subscribe ?? (() => () => void 0);
    this.#get = get;
  }
  /**
   * Subscribe for value changes.
   * @param callback The function to run when the current value changes.
   * @returns Unsubscribe function.
   */
  subscribe(callback) {
    return this.#subscribe(callback);
  }
  /**
   * @returns The current value.
   */
  get() {
    return this.#get();
  }
  /**
   * Create a new `Accessor` that applies a transformation on its value.
   * @param transform The transformation to apply. Should be a pure function.
   */
  as(transform) {
    return new _Accessor(() => transform(this.#get()), this.#subscribe);
  }
  _call(transform) {
    let value = empty;
    let unsub;
    const subscribers = /* @__PURE__ */ new Set();
    const subscribe = (callback) => {
      if (subscribers.size === 0) {
        unsub = this.subscribe(() => {
          const newValue = transform(this.get());
          if (value !== newValue) {
            value = newValue;
            Array.from(subscribers).forEach((cb) => cb());
          }
        });
      }
      subscribers.add(callback);
      return () => {
        subscribers.delete(callback);
        if (subscribers.size === 0) {
          value = empty;
          unsub();
        }
      };
    };
    const get = () => {
      return value !== empty ? value : transform(this.get());
    };
    return new _Accessor(get, subscribe);
  }
  toString() {
    return `Accessor<${this.get()}>`;
  }
  [Symbol.toPrimitive]() {
    console.warn("Accessor implicitly converted to a primitive value.");
    return this.toString();
  }
};
function createState(init) {
  let currentValue = init;
  const subscribers = /* @__PURE__ */ new Set();
  const subscribe = (callback) => {
    subscribers.add(callback);
    return () => subscribers.delete(callback);
  };
  const set2 = (newValue) => {
    const value = typeof newValue === "function" ? newValue(currentValue) : newValue;
    if (currentValue !== value) {
      currentValue = value;
      Array.from(subscribers).forEach((cb) => cb());
    }
  };
  return [new Accessor(() => currentValue, subscribe), set2];
}
function createBinding(object, key) {
  const prop = kebabify(key);
  const subscribe = (callback) => {
    const sig = object instanceof Gio2.Settings ? "changed" : "notify";
    const id = object.connect(`${sig}::${prop}`, () => callback());
    return () => object.disconnect(id);
  };
  const get = () => {
    if (object instanceof Gio2.Settings) {
      return object.get_value(key).recursiveUnpack();
    }
    if (object instanceof GObject4.Object) {
      const getter2 = `get_${prop.replaceAll("-", "_")}`;
      if (getter2 in object && typeof object[getter2] === "function") {
        return object[getter2]();
      }
      if (prop in object) return object[prop];
      if (key in object) return object[key];
    }
    throw Error(`cannot get property "${key}" on "${object}"`);
  };
  return new Accessor(get, subscribe);
}

// ../ags/js/node_modules/gnim/dist/jsx/env.ts
function configue(conf) {
  return Object.assign(env, conf);
}
function missingImpl() {
  throw Error("missing impl");
}
var env = {
  intrinsicElements: {},
  textNode: missingImpl,
  appendChild: missingImpl,
  removeChild: missingImpl,
  setCss: missingImpl,
  setClass: missingImpl,
  initProps: () => void 0,
  defaultCleanup: () => void 0
};

// ../ags/js/node_modules/gnim/dist/jsx/scope.ts
var Scope = class _Scope {
  constructor(parent) {
    this.contexts = /* @__PURE__ */ new Map();
    this.cleanups = /* @__PURE__ */ new Set();
    this.mounts = /* @__PURE__ */ new Set();
    this.mounted = false;
    this.parent = parent;
  }
  onCleanup(callback) {
    this.cleanups?.add(callback);
  }
  onMount(callback) {
    if (this.parent && !this.parent.mounted) {
      this.parent.onMount(callback);
    } else {
      this.mounts.add(callback);
    }
  }
  run(fn) {
    const prev = _Scope.current;
    _Scope.current = this;
    try {
      return fn();
    } finally {
      this.mounts.forEach((cb) => cb());
      this.mounts.clear();
      this.mounted = true;
      _Scope.current = prev;
    }
  }
  dispose() {
    this.cleanups.forEach((cb) => cb());
    this.cleanups.clear();
    this.contexts.clear();
    delete this.parent;
  }
};
function getScope() {
  const scope = Scope.current;
  if (!scope) {
    throw Error("cannot get scope: out of tracking context");
  }
  return scope;
}
function onCleanup(cleanup) {
  if (!Scope.current) {
    console.error(Error("out of tracking context: will not be able to cleanup"));
  }
  Scope.current?.onCleanup(cleanup);
}
function createRoot(fn) {
  const scope = new Scope(null);
  return scope.run(() => fn(() => scope.dispose()));
}

// ../ags/js/node_modules/gnim/dist/jsx/jsx.ts
var gtkType = Symbol("gtk builder type");
var appendChild = Symbol("JSX add child method");
var removeChild = Symbol("JSX add remove method");
function getType(object) {
  return gtkType in object ? object[gtkType] : null;
}
function isGObjectCtor(ctor) {
  return ctor.prototype instanceof GObject5.Object;
}
function isFunctionCtor(ctor) {
  return typeof ctor === "function" && !isGObjectCtor(ctor);
}
function signalName(key) {
  const [sig, detail] = kebabify(key.slice(2)).split(":");
  if (sig.startsWith("notify-")) {
    return `notify::${sig.slice(7)}`;
  }
  return detail ? `${sig}::${detail}` : sig;
}
function remove(parent, child) {
  if (parent instanceof Fragment) {
    parent.remove(child);
    return;
  }
  if (removeChild in parent && typeof parent[removeChild] === "function") {
    parent[removeChild](child);
    return;
  }
  env.removeChild(parent, child);
}
function append(parent, child) {
  if (parent instanceof Fragment) {
    parent.append(child);
    return;
  }
  if (child instanceof Fragment) {
    for (const ch of child) {
      append(parent, ch);
    }
    const appendHandler = child.connect("append", (_, ch) => {
      if (!(ch instanceof GObject5.Object)) {
        return console.error(TypeError(`cannot add ${ch} to ${parent}`));
      }
      append(parent, ch);
    });
    const removeHandler = child.connect("remove", (_, ch) => {
      if (!(ch instanceof GObject5.Object)) {
        return console.error(TypeError(`cannot remove ${ch} from ${parent}`));
      }
      remove(parent, ch);
    });
    onCleanup(() => {
      child.disconnect(appendHandler);
      child.disconnect(removeHandler);
    });
    return;
  }
  if (appendChild in parent && typeof parent[appendChild] === "function") {
    parent[appendChild](child, getType(child));
    return;
  }
  env.appendChild(parent, child);
}
function setType(object, type) {
  if (gtkType in object && object[gtkType] !== "") {
    console.warn(`type overriden from ${object[gtkType]} to ${type} on ${object}`);
  }
  Object.assign(object, { [gtkType]: type });
}
function jsx(ctor, inprops, key) {
  const { $, $type, $constructor, children, ...rest } = inprops;
  const props = rest;
  if (key) Object.assign(props, { key });
  const deferProps = env.initProps(ctor, props) ?? [];
  const deferredProps = {};
  for (const [key2, value] of Object.entries(props)) {
    if (value === void 0) {
      delete props[key2];
    }
    if (deferProps.includes(key2)) {
      deferredProps[key2] = props[key2];
      delete props[key2];
    }
  }
  if (typeof ctor === "string") {
    if (ctor in env.intrinsicElements) {
      ctor = env.intrinsicElements[ctor];
    } else {
      throw Error(`unknown intrinsic element "${ctor}"`);
    }
  }
  if (isFunctionCtor(ctor)) {
    const object2 = ctor({ children, ...props });
    if ($type) setType(object2, $type);
    $?.(object2);
    return object2;
  }
  const { css, class: className } = props;
  delete props.css;
  delete props.class;
  const signals = [];
  const bindings = [];
  for (const [key2, value] of Object.entries(props)) {
    if (key2.startsWith("on")) {
      signals.push([key2, value]);
      delete props[key2];
    }
    if (value instanceof Accessor) {
      bindings.push([key2, value]);
      props[key2] = value.get();
    }
  }
  const object = $constructor ? $constructor(props) : new ctor(props);
  if ($constructor) Object.assign(object, props);
  if ($type) setType(object, $type);
  if (css) env.setCss(object, css);
  if (className) env.setClass(object, className);
  for (let child of Array.isArray(children) ? children : [children]) {
    if (child === true) {
      console.warn(Error("Trying to add boolean value of `true` as a child."));
      continue;
    }
    if (Array.isArray(child)) {
      for (const ch of child) {
        append(object, ch);
      }
    } else if (child) {
      if (!(child instanceof GObject5.Object)) {
        child = env.textNode(child);
      }
      append(object, child);
    }
  }
  const disposeHandlers = signals.map(([sig, handler]) => {
    const id = object.connect(signalName(sig), handler);
    return () => object.disconnect(id);
  });
  for (const [key2, value] of Object.entries(deferredProps)) {
    if (value instanceof Accessor) {
      bindings.push([key2, value]);
    } else {
      Object.assign(object, { [key2]: value });
    }
  }
  const disposeBindings = bindings.map(([prop, binding]) => {
    const dispose = binding.subscribe(() => {
      set(object, prop, binding.get());
    });
    set(object, prop, binding.get());
    return dispose;
  });
  if (disposeBindings.length > 0 || disposeHandlers.length > 0) {
    onCleanup(() => {
      disposeHandlers.forEach((cb) => cb());
      disposeBindings.forEach((cb) => cb());
    });
  }
  $?.(object);
  return object;
}
var jsxs = jsx;

// ../ags/js/node_modules/gnim/dist/jsx/For.ts
function For({
  each,
  children: mkChild,
  cleanup,
  id = (item) => item
}) {
  const currentScope = getScope();
  const map = /* @__PURE__ */ new Map();
  const fragment = new Fragment();
  function remove2({ item, child, index: [index], scope }) {
    scope.dispose();
    if (typeof cleanup === "function") {
      cleanup(child, item, index.get());
    } else if (cleanup !== null) {
      env.defaultCleanup(child);
    }
  }
  function callback(itareable) {
    const items = [...itareable];
    const ids = items.map(id);
    const idSet = new Set(ids);
    for (const [key, value] of map.entries()) {
      fragment.remove(value.child);
      if (!idSet.has(key)) {
        remove2(value);
        map.delete(key);
      }
    }
    items.map((item, i) => {
      const key = ids[i];
      if (map.has(key)) {
        const {
          index: [, setIndex],
          child
        } = map.get(key);
        setIndex(i);
        if ([...fragment].some((ch) => ch === child)) {
          console.warn(`duplicate keys found: ${key}`);
        } else {
          fragment.append(child);
        }
      } else {
        const [index, setIndex] = createState(i);
        const scope = new Scope(currentScope);
        const child = scope.run(() => mkChild(item, index));
        map.set(key, { item, child, index: [index, setIndex], scope });
        fragment.append(child);
      }
    });
  }
  const dispose = each.subscribe(() => {
    callback(each.get());
  });
  callback(each.get());
  onCleanup(() => {
    dispose();
    for (const value of map.values()) {
      remove2(value);
    }
    map.clear();
  });
  return fragment;
}

// ../ags/js/node_modules/gnim/dist/jsx/With.ts
function With({
  value,
  children: mkChild,
  cleanup
}) {
  const currentScope = getScope();
  const fragment = new Fragment();
  let currentValue;
  let scope;
  function remove2(child) {
    fragment.remove(child);
    if (scope) scope.dispose();
    if (typeof cleanup === "function") {
      cleanup(child);
    } else if (cleanup !== null) {
      env.defaultCleanup(child);
    }
  }
  function callback(v) {
    for (const child of fragment) {
      remove2(child);
    }
    scope = new Scope(currentScope);
    const ch = scope.run(() => mkChild(v));
    if (ch !== "" && ch !== false && ch !== null && ch !== void 0) {
      fragment.append(ch);
    }
  }
  const dispose = value.subscribe(() => {
    const newValue = value.get();
    if (currentValue !== newValue) {
      callback(currentValue = newValue);
    }
  });
  currentValue = value.get();
  callback(currentValue);
  onCleanup(() => {
    dispose();
    for (const child of fragment) {
      remove2(child);
    }
  });
  return fragment;
}

// ../ags/js/node_modules/gnim/dist/jsx/This.ts
import GObject6 from "gi://GObject";

// ../ags/js/lib/gtk4/app.ts
Gtk.init();
GLib4.unsetenv("LD_PRELOAD");
await import("gi://Adw?version=1").then(({ default: Adw }) => Adw.init()).catch(() => void 0);
var _request_dec, _cursorTheme_dec, _cursorTheme_dec2, _iconTheme_dec, _iconTheme_dec2, _gtkTheme_dec, _gtkTheme_dec2, _windows_dec, _monitors_dec, _windowToggled_dec, _a4, _App_decorators, _instanceName, _main, _requestHandlers, _dbusService, _cssProviders, _App_instances, settings_get, display_get, _init2;
_App_decorators = [register()];
var App = class extends (_a4 = Gtk.Application, _windowToggled_dec = [signal(Gtk.Window)], _monitors_dec = [getter(Array)], _windows_dec = [getter(Array)], _gtkTheme_dec2 = [setter(String)], _gtkTheme_dec = [getter(String)], _iconTheme_dec2 = [setter(String)], _iconTheme_dec = [getter(String)], _cursorTheme_dec2 = [setter(String)], _cursorTheme_dec = [getter(String)], _request_dec = [signal(Array, Function)], _a4) {
  constructor() {
    super({ flags: Gio3.ApplicationFlags.HANDLES_COMMAND_LINE });
    __runInitializers(_init2, 5, this);
    __privateAdd(this, _App_instances);
    __privateAdd(this, _instanceName, "ags");
    __privateAdd(this, _main);
    __privateAdd(this, _requestHandlers, 0);
    __privateAdd(this, _dbusService);
    __privateAdd(this, _cssProviders, new Array());
    __privateSet(this, _dbusService, new AppDBus({
      toggleWindow: this.toggle_window.bind(this),
      quit: this.quit.bind(this),
      request: (argv) => new Promise((resolve) => this.request(argv, resolve)),
      insector: () => {
        Gtk.Window.set_interactive_debugging(true);
      }
    }));
    __privateGet(this, _App_instances, display_get).get_monitors().connect("items-changed", () => {
      this.notify("monitors");
    });
    this.connect("window-added", (_, window) => {
      const id1 = window.connect("notify::visible", () => this.windowToggled(window));
      const id2 = this.connect("window-removed", (_2, removed) => {
        if (removed == window) {
          window.disconnect(id1);
          this.disconnect(id2);
        }
      });
    });
    __privateGet(this, _App_instances, settings_get).connect("notify", (_, { name }) => {
      switch (name) {
        case "gtk-theme-name":
          this.notify("gtk-theme");
          break;
        case "gtk-icon-theme-name":
          this.notify("icon-theme");
          break;
        case "gtk-cursor-theme-name":
          this.notify("cursor-theme");
          break;
        default:
          break;
      }
    });
  }
  get instanceName() {
    return __privateGet(this, _instanceName);
  }
  /**
   * Get all monitors from {@link Gdk.Display}.
   */
  get_monitors() {
    const mons = __privateGet(this, _App_instances, display_get).get_monitors();
    const list = new Array();
    let monitor = null;
    let i = 0;
    while ((monitor = mons.get_item(i++)) !== null) {
      list.push(monitor);
    }
    return list;
  }
  windowToggled(window) {
    void window;
  }
  get monitors() {
    return this.get_monitors();
  }
  get windows() {
    return this.get_windows();
  }
  set gtkTheme(name) {
    __privateGet(this, _App_instances, settings_get).gtkThemeName = name;
  }
  get gtkTheme() {
    return __privateGet(this, _App_instances, settings_get).gtkThemeName;
  }
  set iconTheme(name) {
    __privateGet(this, _App_instances, settings_get).gtkIconThemeName = name;
  }
  get iconTheme() {
    return __privateGet(this, _App_instances, settings_get).gtkIconThemeName;
  }
  set cursorTheme(name) {
    __privateGet(this, _App_instances, settings_get).gtkCursorThemeName = name;
  }
  get cursorTheme() {
    return __privateGet(this, _App_instances, settings_get).gtkCursorThemeName;
  }
  /**
   * Get a window by its {@link Gtk.Widget.prototype.name} that has been added to this app
   * using {@link Gtk.Application.prototype.add_window}.
   */
  get_window(name) {
    return this.windows.find((w) => w.name === name);
  }
  /**
   * Toggle the visibility of a window by its {@link Gtk.Widget.prototype.name}
   * that has been added to this app using {@link Gtk.Application.prototype.add_window}.
   */
  toggle_window(name) {
    const win = this.get_window(name);
    if (!win) throw Error(`no window registered with name "${name}"`);
    win.visible = !win.visible;
  }
  /**
   * Reset previously set css providers with {@link App.prototype.apply_css}.
   */
  reset_css() {
    for (const provider of __privateGet(this, _cssProviders)) {
      Gtk.StyleContext.remove_provider_for_display(__privateGet(this, _App_instances, display_get), provider);
    }
  }
  /**
   * Add a new {@link Gtk.CssProvider}.
   * @param style Css string or a path to a css file.
   */
  apply_css(style, reset = false) {
    const provider = new Gtk.CssProvider();
    provider.connect("parsing-error", (_, section, error) => {
      const name = section.get_file()?.get_basename() ?? "";
      const line = section.get_start_location().lines + 1;
      const chars = section.get_start_location().line_chars + 1;
      console.error(`CSS Error ${name}:${line}:${chars} ${error.message}`);
    });
    if (reset) this.reset_css();
    if (GLib4.file_test(style, GLib4.FileTest.EXISTS)) {
      provider.load_from_path(style);
    } else if (style.startsWith("resource://")) {
      provider.load_from_resource(style.replace("resource://", ""));
    } else {
      provider.load_from_string(style);
    }
    Gtk.StyleContext.add_provider_for_display(
      __privateGet(this, _App_instances, display_get),
      provider,
      Gtk.STYLE_PROVIDER_PRIORITY_USER
    );
    __privateGet(this, _cssProviders).push(provider);
  }
  /**
   * Shortcut for {@link Gtk.IconTheme.prototype.add_search_path}.
   */
  add_icons(path) {
    Gtk.IconTheme.get_for_display(__privateGet(this, _App_instances, display_get)).add_search_path(path);
  }
  /**
   * Quit and exit the application.
   */
  quit(code = 0) {
    __privateGet(this, _dbusService).stop();
    super.quit();
    exit(code);
  }
  request(args, response) {
    if (__privateGet(this, _requestHandlers) === 0) {
      response(`instance "${this.instanceName}" has no request handler implemented`);
    }
    void args;
  }
  vfunc_command_line(cmd) {
    if (cmd.isRemote) {
      this.request(cmd.get_arguments(), (str) => {
        cmd.print_literal(str + "\n");
        cmd.done();
      });
    } else {
      this.hold();
      __privateGet(this, _dbusService).serve({
        name: this.applicationId
      });
      createRoot((dispose) => {
        var _a7;
        this.connect("shutdown", dispose);
        (_a7 = __privateGet(this, _main)) == null ? void 0 : _a7.call(this, ...programArgs);
      });
    }
    return 0;
  }
  start(config2) {
    const { main, requestHandler, instanceName, css, icons, ...cfg } = config2;
    __privateSet(this, _main, main);
    Object.assign(this, cfg);
    if (requestHandler) {
      this.connect("request", (_, args, response) => requestHandler(args, response));
    }
    if (instanceName) __privateSet(this, _instanceName, instanceName);
    if (css) this.apply_css(css, false);
    if (icons) app.add_icons(icons);
    this.applicationId = "io.Astal." + this.instanceName;
    setConsoleLogDomain(this.instanceName);
    this.runAsync(programArgs);
  }
  connect(signal2, callback) {
    if (signal2 === "request") __privateSet(this, _requestHandlers, __privateGet(this, _requestHandlers) + 1);
    return super.connect(signal2, callback);
  }
};
_init2 = __decoratorStart(_a4);
_instanceName = new WeakMap();
_main = new WeakMap();
_requestHandlers = new WeakMap();
_dbusService = new WeakMap();
_cssProviders = new WeakMap();
_App_instances = new WeakSet();
settings_get = function() {
  const settings = Gtk.Settings.get_default();
  if (!settings) throw Error("could not get settings");
  return settings;
};
display_get = function() {
  const display = Gdk.Display.get_default();
  if (!display) throw Error("could not get display");
  return display;
};
__decorateElement(_init2, 1, "windowToggled", _windowToggled_dec, App);
__decorateElement(_init2, 2, "monitors", _monitors_dec, App);
__decorateElement(_init2, 2, "windows", _windows_dec, App);
__decorateElement(_init2, 3, "gtkTheme", _gtkTheme_dec2, App);
__decorateElement(_init2, 2, "gtkTheme", _gtkTheme_dec, App);
__decorateElement(_init2, 3, "iconTheme", _iconTheme_dec2, App);
__decorateElement(_init2, 2, "iconTheme", _iconTheme_dec, App);
__decorateElement(_init2, 3, "cursorTheme", _cursorTheme_dec2, App);
__decorateElement(_init2, 2, "cursorTheme", _cursorTheme_dec, App);
__decorateElement(_init2, 1, "request", _request_dec, App);
App = __decorateElement(_init2, 0, "App", _App_decorators, App);
__runInitializers(_init2, 1, App);
var app = new App();
var app_default = app;

// sass:/home/weissmall/Projects/ags-transfer/style.scss
var style_default = `/* text color for entries, views and content in general */
/* widget base background color */
/* text widgets and the like base background color */
/* base background color of selections */
/* text/foreground color of selections */
/* base background color of insensitive widgets */
/* text foreground color of insensitive widgets */
/* insensitive text widgets and the like base background color */
/* widget text/foreground color on backdrop windows */
/* text color for entries, views and content in general on backdrop windows */
/* widget base background color on backdrop windows */
/* text widgets and the like base background color on backdrop windows */
/* base background color of selections on backdrop windows */
/* text/foreground color of selections on backdrop windows */
/* insensitive color on backdrop windows */
/* widgets main borders color */
/* widgets main borders color on backdrop windows */
/* these colors are exported for the window manager and shouldn't be used in applications,
read if you used those and something break with a version upgrade you're on your own... */
/* FIXME this is really an API */
/* Very contrasty background for text views (@theme_text_color foreground) */
/* ---------------------------------- Bar ----------------------------------- */
/* --------------------------- Vertical separator --------------------------- */
/* -------------------------------------------------------------------------- */
.Bar {
  min-height: 36px;
  box-shadow: none;
  padding: 0px 0px;
  margin: 0px;
}
.Bar .AudioIconButton {
  margin: 0px;
}
.Bar .BrightnessIconButton {
  margin: 0px;
}

.bar-music-icon {
  color: white;
  padding: 2px;
}

.Bar .box-container {
  transition: 0.3s background-color;
}
.Bar .right {
  padding: 0px 12px;
  border-radius: 0px 0px 0px 18px;
}
.Bar .vertical-separator-box {
  min-width: 2px;
  padding: 8px 8px;
}
.Bar .vertical-separator {
  border: none;
  border-left: 2px solid @unfocused_borders;
}

window.Bar {
  border: none;
  box-shadow: none;
  color: #f1f1f1;
  font-size: 1.1em;
  font-weight: bold;
  background-color: @theme_bg_color;
}
window.Bar label {
  margin: 0px 4px;
}
window.Bar centerbox {
  background-color: transparent;
  border: none;
  border-color: transparent;
  padding: 0px 10px;
}
window.Bar button {
  background-color: transparent;
  border: none;
  border-color: transparent;
  padding: 0px 8px;
  margin: 4px 0px;
}
window.Bar button:hover {
  background-color: rgba(241, 241, 241, 0.16);
  border-color: rgba(55, 141, 247, 0.2);
}
window.Bar .SysTray {
  background-color: transparent;
  border: none;
  border-color: transparent;
  padding: 0px;
  margin: 0px;
}
window.Bar .SysTray button {
  background-color: transparent;
  border: none;
  border-color: transparent;
  padding: 4px;
  margin: 0px;
}
window.Bar .SysTray button:hover {
  background-color: rgba(241, 241, 241, 0.16);
  border-color: rgba(55, 141, 247, 0.2);
}
window.Bar .SysTray separator {
  background: transparent;
  margin: 0px;
  padding: 0px;
}
window.Bar .Workspaces button {
  all: unset;
  background-color: transparent;
}
window.Bar .Workspaces button:hover label {
  background-color: rgba(241, 241, 241, 0.16);
  border-color: rgba(55, 141, 247, 0.2);
}
window.Bar .Workspaces button:active label {
  background-color: rgba(241, 241, 241, 0.2);
}
window.Bar .Workspaces label {
  transition: 200ms;
  padding: 0px 8px;
  margin: 2px;
  border-radius: 18px;
  border: 1pt solid transparent;
}
window.Bar .Workspaces .focused label {
  color: #378DF7;
  border-color: #378DF7;
}
window.Bar .FocusedClient {
  color: #378DF7;
}
window.Bar .Media .Cover {
  min-height: 50px;
  min-width: 50px;
  border-radius: 18px;
  background-position: center;
  background-size: contain;
}
window.Bar .Media .Info * {
  padding: 2px 4px;
}
window.Bar .Media .Info label {
  font-size: 16px;
}
window.Bar .Media .Info .Title {
  font-weight: bold;
}
window.Bar .Media .Info .Description {
  font-weight: normal;
}
window.Bar .Battery label {
  padding-left: 0px;
  margin-left: 0px;
}
window.Bar .PlayPauseBtn {
  padding: 0px;
  margin: 0px;
  padding-right: 3px;
}

.NotificationsWindow {
  background-color: transparent;
  padding: 12px;
  min-height: 0px;
  margin-top: 24px;
}

.notification-box * {
  background-color: transparent;
  color: transparent;
  min-height: 0px;
}

.Notification {
  margin: 2px;
  padding: 12px;
  border-radius: 8px;
  border: 1px solid transparent;
  min-width: 300px;
}
.Notification .header {
  margin-bottom: 4px;
}
.Notification .header * {
  color: white;
  font-size: 12px;
  font-weight: lighter;
}
.Notification .header .app-name {
  opacity: 0.4;
  padding-top: 4px;
}
.Notification .header .time {
  opacity: 0.4;
  padding-top: 4px;
}
.Notification .header .close {
  font-family: Material;
  border: none;
  padding: 4px 2px;
  margin-top: 0px;
  margin-bottom: 0px;
  margin-right: 0px;
  margin-left: 6px;
}
.Notification .separator {
  min-height: 8px;
}
.Notification .image {
  min-height: 50px;
  min-width: 50px;
  margin-right: 8px;
}
.Notification .summary {
  font-size: 16px;
  font-weight: normal;
  margin-top: 8px;
}
.Notification .body {
  font-size: 12px;
  line-height: 18px;
  font-weight: lighter;
}

.dark-theme .Notification {
  background-color: @dark_4;
  border-color: @dark_3;
}
.dark-theme .Notification .header * {
  color: @light_4;
}
.dark-theme .Notification .header .close:hover {
  background-color: @dark_4;
}
.dark-theme .Notification .summary {
  color: @light_4;
}
.dark-theme .Notification .body {
  color: @light_4;
}

.light-theme .Notification {
  background-color: @light_4;
  border-color: @light_5;
}
.light-theme .Notification .header * {
  color: @dark_4;
}
.light-theme .Notification .header .close:hover {
  background-color: @light_4;
}
.light-theme .Notification .summary {
  color: @dark_4;
}
.light-theme .Notification .body {
  color: @dark_4;
}

.PlayerWindow {
  margin: 0;
  padding: 0;
  background-color: transparent;
}

.PlayerPopoverWrapper {
  margin: 0;
  padding: 0;
  background-color: transparent;
}

.PlayerContainer {
  background-color: #232136;
  margin: 24px;
  padding: 48px;
  border-radius: 8px;
  border: 1px solid #56526e;
}
.PlayerContainer * {
  margin: 0px;
  padding: 0px;
}
.PlayerContainer .player-cover-container {
  border-radius: 8px;
}
.PlayerContainer .player-cover {
  min-height: 200px;
  min-width: 200px;
}
.PlayerContainer .player-artist {
  margin-top: 24px;
  font-size: 20px;
  font-weight: bold;
}
.PlayerContainer .player-title {
  margin-top: 4px;
  font-size: 16px;
  font-weight: normal;
}
.PlayerContainer .player-buttons-container {
  margin-top: 28px;
}
.PlayerContainer .player-button {
  background-color: #2a273f;
  border-color: #44415a;
  border-radius: 100%;
  margin-left: 8px;
  margin-right: 8px;
}
.PlayerContainer .player-button:hover {
  background-color: #44415a;
}
.PlayerContainer .player-other-button {
  min-height: 48px;
  min-width: 48px;
}
.PlayerContainer .play-button {
  min-height: 48px;
  min-width: 48px;
}

.osd {
  margin: 20px;
  padding: 0px;
}
.osd .osd-popup-view {
  border-radius: 8px;
  background-color: #2C2C33;
  padding: 20px;
}
.osd image {
  padding-right: 8px;
}
.osd label {
  font-size: 24px;
}
.osd levelbar trough {
  margin: 4px;
}
.osd levelbar block {
  min-height: 3px;
}

.conky-widget .conky {
  margin-bottom: 90px;
  margin-left: 70px;
}
.conky-widget .conky * {
  margin: 0;
  padding: 0;
}

.weather * {
  font-size: 14px;
  color: #ffffff;
  font-family: Finlandica, sans-serif;
  margin: 0;
  padding: 0;
}

.time-conky * {
  color: #ffffff;
  font-family: Finlandica, sans-serif;
  margin: 0;
  padding: 0;
}
.time-conky .time {
  font-size: 80px;
}
.time-conky .date {
  font-size: 28px;
}
.time-conky .week-day {
  margin-top: 12px;
  margin-bottom: 12px;
  font-family: Material, sans-serif;
  font-size: 12px;
}

* {
  font-family: "Fira Code", "SF Pro Display", sans-serif;
  font-size: 14px;
  font-weight: normal;
  color: white;
}

popover arrow {
  background: none;
  border: none;
  padding: 0;
  margin: 0;
}
popover contents {
  background-color: #2C2C33;
}

.Time {
  font-weight: 600;
  font-size: 12px;
  padding: 8px 10px;
}
.Time Calendar {
  background-color: #2C2C33;
}

.SysTray {
  margin: 0px 8px;
  margin-right: 0px;
  margin-top: -2px;
}

.Wifi {
  color: white;
  border-radius: 15px;
  margin: 0px 8px;
  margin-top: -2px;
  padding: 2px;
  font-size: 16px;
}

.IconButton {
  color: white;
  border-radius: 15px;
  margin: 0px 8px;
  margin-top: -3px;
  font-size: 20px;
}
.IconButton trough {
  background-color: rgba(255, 255, 255, 0.2);
  border-radius: 4px;
  min-height: 8px;
}
.IconButton highlight {
  background-color: white;
  border-radius: 4px;
}

.Slider {
  min-width: 140px;
}
.Slider slider {
  background-color: white;
  border-radius: 50%;
  min-height: 12px;
  min-width: 12px;
  margin: -2px;
}

.Battery {
  color: white;
  border-radius: 15px;
  margin: 0px 8px;
  margin-top: -2px;
  padding: 2px;
  font-size: 16px;
}

.Brightness {
  color: white;
  border-radius: 15px;
  margin: 0px 8px;
  margin-top: -2px;
  padding: 2px;
  font-size: 16px;
}

.Bluetooth {
  color: white;
  border-radius: 15px;
  margin: 0px 8px;
  margin-top: -2px;
  padding: 2px;
  font-size: 16px;
}

tooltip {
  background-color: rgba(0, 0, 0, 0.8);
  border-radius: 8px;
}

menuitem:hover {
  background-color: rgba(255, 255, 255, 0.2);
}

menubar {
  background-color: rgba(0, 0, 0, 0.9);
  color: white;
}

menu {
  background-color: rgba(0, 0, 0, 0.9);
  color: white;
  border-radius: 8px;
  padding: 4px;
}

menuitem {
  padding: 4px 8px;
  border-radius: 4px;
  margin: 0px;
}

menuitem:hover {
  background-color: rgba(255, 255, 255, 0.2);
}

.bar {
  background-color: blue;
  min-width: 20px;
}`;

// ../ags/js/lib/process.ts
import Gio4 from "gi://Gio?version=2.0";
import GLib5 from "gi://GLib?version=2.0";
var encoder = new TextEncoder();
var _exit_dec, _stderr_dec, _stdout_dec, _a5, _Process_decorators, _init3, _encoder, _outStream, _errStream, _inStream, _process, _Process_instances, readStream_fn;
_Process_decorators = [register()];
var _Process = class _Process extends (_a5 = GObject.Object, _stdout_dec = [signal(String)], _stderr_dec = [signal(String)], _exit_dec = [signal(Number, Boolean)], _a5) {
  constructor({ argv }) {
    super();
    __runInitializers(_init3, 5, this);
    __privateAdd(this, _Process_instances);
    __privateAdd(this, _encoder, new TextEncoder());
    __privateAdd(this, _outStream);
    __privateAdd(this, _errStream);
    __privateAdd(this, _inStream);
    __privateAdd(this, _process);
    const process = __privateSet(this, _process, Gio4.Subprocess.new(
      argv,
      Gio4.SubprocessFlags.STDIN_PIPE | Gio4.SubprocessFlags.STDOUT_PIPE | Gio4.SubprocessFlags.STDERR_PIPE
    ));
    __privateSet(this, _inStream, Gio4.DataOutputStream.new(process.get_stdin_pipe()));
    __privateSet(this, _outStream, Gio4.DataInputStream.new(process.get_stdout_pipe()));
    __privateSet(this, _errStream, Gio4.DataInputStream.new(process.get_stderr_pipe()));
    __privateMethod(this, _Process_instances, readStream_fn).call(this, __privateGet(this, _outStream));
    __privateMethod(this, _Process_instances, readStream_fn).call(this, __privateGet(this, _errStream));
    process.wait_async(null, (_, res) => {
      try {
        process.wait_finish(res);
      } catch {
      }
      if (process.get_if_exited()) {
        this.exit(process.get_exit_status(), false);
      }
      if (process.get_if_signaled()) {
        this.exit(process.get_term_sig(), true);
      }
    });
  }
  stdout(out) {
    void out;
  }
  stderr(err) {
    void err;
  }
  exit(code, signaled) {
    void [code, signaled];
  }
  connect(signal2, callback) {
    return super.connect(signal2, callback);
  }
  /**
   * Force quit the subprocess.
   */
  kill() {
    __privateGet(this, _process).force_exit();
  }
  /**
   * Send a signal to the subprocess.
   *
   * @param signal Signal number to be sent
   */
  signal(signal2) {
    __privateGet(this, _process).send_signal(signal2);
  }
  /**
   * Write a line to the subprocess' stdin synchronously.
   * See {@link Gio.DataOutputStream.prototype.write_bytes_async}
   *
   * @param str String to be written to stdin
   */
  write(str) {
    return new Promise((resolve, reject) => {
      __privateGet(this, _inStream).write_bytes_async(
        encoder.encode(str),
        GLib5.PRIORITY_DEFAULT,
        null,
        (_, res) => {
          try {
            resolve(__privateGet(this, _inStream).write_all_finish(res));
          } catch (error) {
            reject(error);
          }
        }
      );
    });
  }
  /**
   * Write a line to the subprocess' stdin asynchronously.
   *
   * @param str String to be written to stdin
   */
  async writeAsync(str) {
    return new Promise((resolve, reject) => {
      __privateGet(this, _inStream).write_all_async(
        __privateGet(this, _encoder).encode(str),
        GLib5.PRIORITY_DEFAULT,
        null,
        (_, res) => {
          try {
            resolve(void __privateGet(this, _inStream).write_all_finish(res));
          } catch (error) {
            reject(error);
          }
        }
      );
    });
  }
  /**
   * Start a new subprocess with the given command.
   * The first element of the vector is executed with the remaining
   * elements as the argument list.
   */
  static subprocessv(cmd) {
    return new _Process({ argv: cmd });
  }
  /**
   * Start a new subprocess with the given command
   * which is parsed using {@link GLib.shell_parse_argv}.
   */
  static subprocess(cmd) {
    const [, argv] = GLib5.shell_parse_argv(cmd);
    return _Process.subprocessv(argv);
  }
  /**
   * Execute a command synchronously.
   * The first element of the vector is executed with the remaining
   * elements as the argument list.
   *
   * @throws stderr
   * @return stdout of the subprocess
   */
  static execv(cmd) {
    const process = Gio4.Subprocess.new(
      cmd,
      Gio4.SubprocessFlags.STDERR_PIPE | Gio4.SubprocessFlags.STDOUT_PIPE
    );
    const [, out, err] = process.communicate_utf8(null, null);
    if (process.get_successful()) {
      return out.trim();
    } else {
      throw new Error(err);
    }
  }
  /**
   * Execute a command synchronously.
   * The command is parsed using {@link GLib.shell_parse_argv}.
   *
   * @throws stderr
   * @return stdout of the subprocess
   */
  static exec(cmd) {
    const [, argv] = GLib5.shell_parse_argv(cmd);
    return _Process.execv(argv);
  }
  /**
   * Execute a command asynchronously.
   * The first element of the vector is executed with the remaining
   * elements as the argument list.
   *
   * @throws stderr
   * @return stdout of the subprocess
   */
  static execAsyncv(cmd) {
    const process = Gio4.Subprocess.new(
      cmd,
      Gio4.SubprocessFlags.STDERR_PIPE | Gio4.SubprocessFlags.STDOUT_PIPE
    );
    return new Promise((resolve, reject) => {
      process.communicate_utf8_async(null, null, (_, res) => {
        try {
          const [, out, err] = process.communicate_utf8_finish(res);
          if (process.get_successful()) {
            return resolve(out.trim());
          } else {
            reject(new Error(err.trim()));
          }
        } catch (error) {
          reject(error);
        }
      });
    });
  }
  /**
   * Execute a command asynchronously.
   * The command is parsed using {@link GLib.shell_parse_argv}.
   *
   * @throws stderr
   * @return stdout of the subprocess
   */
  static execAsync(cmd) {
    const [, argv] = GLib5.shell_parse_argv(cmd);
    return _Process.execAsyncv(argv);
  }
};
_init3 = __decoratorStart(_a5);
_encoder = new WeakMap();
_outStream = new WeakMap();
_errStream = new WeakMap();
_inStream = new WeakMap();
_process = new WeakMap();
_Process_instances = new WeakSet();
readStream_fn = function(stream) {
  stream.read_line_async(GLib5.PRIORITY_DEFAULT, null, (_, res) => {
    try {
      const [output] = stream.read_line_finish_utf8(res);
      if (output !== null) {
        if (stream === __privateGet(this, _errStream)) {
          this.stderr(output.trim());
        } else {
          this.stdout(output.trim());
        }
        __privateMethod(this, _Process_instances, readStream_fn).call(this, stream);
      }
    } catch (error) {
      console.error(error);
    }
  });
};
__decorateElement(_init3, 1, "stdout", _stdout_dec, _Process);
__decorateElement(_init3, 1, "stderr", _stderr_dec, _Process);
__decorateElement(_init3, 1, "exit", _exit_dec, _Process);
_Process = __decorateElement(_init3, 0, "Process", _Process_decorators, _Process);
__runInitializers(_init3, 1, _Process);
var Process = _Process;
function exec(cmd) {
  return Array.isArray(cmd) ? Process.execv(cmd) : Process.exec(cmd);
}
function execAsync(cmd) {
  if (Array.isArray(cmd)) {
    return Process.execAsyncv(cmd);
  } else {
    return Process.execAsync(cmd);
  }
}

// config.ts
import GLib6 from "gi://GLib";
function getEnv(env2, fallback) {
  return GLib6.getenv(env2) ?? fallback;
}
function getEnvBool(env2, fallback) {
  const temp = getEnv(env2, "");
  if (temp == "") {
    return fallback;
  }
  return new Boolean(temp);
}
function getConfig() {
  return config;
}
var config = {
  appTitle: "ags-transfer-dev",
  notifications: {
    enabled: true,
    dev: false,
    text: {
      maxSummaryLength: 30,
      maxBodyLength: 40
    },
    defaultTimeoutMs: 3e3
  },
  bar: {
    enabled: true
  },
  player: {
    enabled: false
  },
  status: {
    enabled: true
  },
  brightnessController: {
    pollInterval: 1e3,
    // pollCommand: "brightnessctl get",
    pollCommand: "echo 100",
    postPoll: (cmdResult) => {
      return parseInt(cmdResult) / parseInt(exec("echo 100")) || 1;
    }
  },
  weather: {
    apiSettings: {
      baseUrl: "https://api.openweathermap.org/data/2.5/weather",
      cityId: getEnv("WEATHER_CITY_ID", ""),
      apiKey: getEnv("WEATHER_API_KEY", ""),
      units: getEnv("WEATHER_UNITS", ""),
      language: getEnv("WEATHER_LANG", ""),
      cnt: "5"
    },
    refresh: {
      enabled: true,
      refreshInterval: 1e3 * 60 * 60
    }
  },
  conky: {
    enabled: getEnvBool("CONKY_ENABLED", false)
  }
  // const city_id = "498817"
  // const api_key = "2346fa4d5f6c0ab93c816ece6193746a"
  // const unit = "metric"
  // const lang = "en"
};
var config_default = config;

// ../ags/js/lib/gtk4/index.ts
import Astal from "gi://Astal?version=4.0";
import Gtk2 from "gi://Gtk?version=4.0";
import Gdk2 from "gi://Gdk?version=4.0";

// ../ags/js/lib/time.ts
var _cancelled_dec, _now_dec, _a6, _Timer_decorators, _init4;
_Timer_decorators = [register()];
var _Timer = class _Timer extends (_a6 = GObject.Object, _now_dec = [signal()], _cancelled_dec = [signal()], _a6) {
  constructor() {
    super(...arguments);
    __runInitializers(_init4, 5, this);
  }
  now() {
  }
  cancelled() {
  }
  static interval(interval2, callback) {
    const { timer, now } = _Timer.new(callback, () => {
      if (immediate.is_destroyed()) immediate.destroy();
      if (source.is_destroyed()) source.destroy();
    });
    const immediate = setTimeout(now);
    const source = setInterval(now, interval2);
    return timer;
  }
  static timeout(interval2, callback) {
    const { timer, now } = _Timer.new(callback, () => {
      if (source.is_destroyed()) source.destroy();
    });
    const source = setTimeout(now, interval2);
    return timer;
  }
  static idle(callback) {
    const { timer, now } = _Timer.new(callback, () => {
      if (source.is_destroyed()) source.destroy();
    });
    const source = setTimeout(now);
    return timer;
  }
  static new(onNow, onCancelled) {
    const timer = new _Timer();
    const now = timer.connect("now", () => void onNow?.());
    const cancelled = timer.connect("cancelled", () => {
      timer.disconnect(now);
      timer.disconnect(cancelled);
      onCancelled?.();
    });
    return { timer, now: () => timer.now() };
  }
  connect(signal2, callback) {
    return super.connect(signal2, callback);
  }
  cancel() {
    this.cancelled();
  }
};
_init4 = __decoratorStart(_a6);
__decorateElement(_init4, 1, "now", _now_dec, _Timer);
__decorateElement(_init4, 1, "cancelled", _cancelled_dec, _Timer);
_Timer = __decorateElement(_init4, 0, "Timer", _Timer_decorators, _Timer);
__runInitializers(_init4, 1, _Timer);
var Timer = _Timer;
var { interval, timeout, idle } = Timer;
function createPoll(init, ival, execOrFn, transform) {
  let currentValue = init;
  let timer = null;
  const subscribers = /* @__PURE__ */ new Set();
  function set2(value) {
    if (value !== currentValue) {
      currentValue = value;
      Array.from(subscribers).forEach((cb) => cb());
    }
  }
  function compute() {
    if (typeof execOrFn === "function") {
      const value = execOrFn(currentValue);
      if (value instanceof Promise) {
        value.then(set2);
      } else {
        set2(value);
      }
    } else {
      execAsync(execOrFn).then((stdout) => {
        set2(transform ? transform(stdout, currentValue) : stdout);
      });
    }
  }
  function subscribe(callback) {
    if (subscribers.size === 0) {
      setTimeout(compute);
      timer = setInterval(compute, ival);
    }
    subscribers.add(callback);
    return () => {
      subscribers.delete(callback);
      if (subscribers.size === 0 && timer) {
        clearInterval(timer);
        timer = null;
      }
    };
  }
  return new Accessor(() => currentValue, subscribe);
}

// src/core/store/store.ts
var Store = class {
  constructor(initialValue) {
    this.state = createState(initialValue);
  }
  get() {
    return this.state[0].get();
  }
  getAgsState() {
    return this.state[0];
  }
  set(value) {
    console.log("Value to set:", value);
    const [_, setState] = this.state;
    setState(value);
  }
  setPartial(value, preserveNull = false) {
    if (typeof value != "object") {
      this.set(value);
      return;
    }
    if (preserveNull) {
      this.set(Object.assign({}, this.get(), value));
      return;
    }
    const entries2 = [];
    for (let [key, keyVal] of Object.entries(value)) {
      if (keyVal) {
        entries2.push([key, keyVal]);
      }
    }
    this.set(Object.assign({}, this.get(), Object.fromEntries(entries2)));
  }
};

// src/core/mvvm/base-vm.ts
var BaseVM = class {
  get agsState() {
    return this.state.getAgsState();
  }
  getAgsPartState(transform) {
    return this.agsState(transform);
  }
  constructor(defaultStoreValue) {
    this.state = new Store(defaultStoreValue);
  }
};

// src/features/osd/model/osd-volume-model.ts
import Wp from "gi://AstalWp";
var OsdVolumeModel = class {
  constructor() {
    this.speaker = Wp.get_default().get_default_speaker();
  }
  onSpeakerVolume(callback) {
    this.speaker.connect("notify::volume", (src, pspec2) => {
      if (pspec2.get_name() == "volume") {
        callback(src.get_volume(), src.get_volume_icon());
      }
    });
  }
};

// src/features/osd/model/osd-brightness-model.ts
var OsdBrightnessModel = class {
  // private speaker: Wp.Endpoint;
  constructor() {
  }
  onBrightness(_callback) {
  }
};

// src/features/osd/vm/osd-popup-vm.ts
var OsdPopupVM = class extends BaseVM {
  constructor(volumeModel, brightnessModel) {
    super({ visible: false });
    this.volumeModel = volumeModel ?? new OsdVolumeModel();
    this.brightnessModel = brightnessModel ?? new OsdBrightnessModel();
  }
  initListen() {
    this.volumeModel.onSpeakerVolume((value, icon) => {
      this.setIcon(icon);
      this.setValue(value);
      this.activateFor(1e3);
    });
    this.brightnessModel.onBrightness((value, icon) => {
      this.setIcon(icon);
      this.setValue(value);
      this.activateFor(1e3);
    });
  }
  setIcon(icon) {
    this.state.setPartial({
      icon
    });
  }
  setValue(value) {
    this.state.setPartial({
      value
    });
  }
  activateFor(timeoutMs) {
    if (this.timer) {
      this.timer.cancel();
      this.timer = void 0;
    }
    this.state.setPartial({
      visible: true
    });
    this.timer = timeout(timeoutMs, () => {
      this.state.setPartial({
        visible: false
      });
      this.timer = void 0;
    });
  }
};

// ../ags/js/lib/gtk4/jsx-runtime.ts
import Gtk4 from "gi://Gtk?version=4.0";
import Astal2 from "gi://Astal?version=4.0";

// ../ags/js/node_modules/gnim/dist/gtk4/jsx-runtime.ts
import Gtk3 from "gi://Gtk?version=4.0";
import Gio5 from "gi://Gio?version=2.0";
var adw = await import("gi://Adw").then((m) => m.default).catch(() => null);
var dummyBuilder = new Gtk3.Builder();
var { intrinsicElements } = configue({
  initProps(ctor) {
    if (ctor === Gtk3.Stack) {
      const keys = [
        "visibleChildName",
        "visible_child_name"
      ];
      return keys;
    }
    if (adw && ctor === adw.ToggleGroup) {
      const keys = [
        "active",
        "activeName",
        "active_name"
      ];
      return keys;
    }
  },
  setCss(object, css) {
    if (!(object instanceof Gtk3.Widget)) {
      return console.warn(Error(`cannot set css on ${object}`));
    }
    const ctx = object.get_style_context();
    let provider;
    const setter2 = (css2) => {
      if (!css2.includes("{") || !css2.includes("}")) {
        css2 = `* { ${css2} }`;
      }
      if (provider) ctx.remove_provider(provider);
      provider = new Gtk3.CssProvider();
      provider.load_from_string(css2);
      ctx.add_provider(provider, Gtk3.STYLE_PROVIDER_PRIORITY_USER);
    };
    if (css instanceof Accessor) {
      setter2(css.get());
      const dispose = css.subscribe(() => setter2(css.get()));
      onCleanup(dispose);
    } else {
      setter2(css);
    }
  },
  setClass(object, className) {
    if (!(object instanceof Gtk3.Widget)) {
      return console.warn(Error(`cannot set className on ${object}`));
    }
    if (className instanceof Accessor) {
      object.cssClasses = className.get().split(/\s+/);
      const dispose = className.subscribe(
        () => object.cssClasses = className.get().split(/\s+/)
      );
      onCleanup(dispose);
    } else {
      object.set_css_classes(className.split(/\s+/));
    }
  },
  textNode(text) {
    return Gtk3.Label.new(text.toString());
  },
  // `set_child` and especially `remove` might be way too generic and there might
  // be cases where it does not actually do what we want it to do
  //
  // if there is a usecase for either of these two that does something else than
  // we expect it to do here in a JSX context we have to check for known instances
  removeChild(parent, child) {
    if (parent instanceof Gtk3.Widget && child instanceof Gtk3.EventController) {
      return parent.remove_controller(child);
    }
    if ("set_child" in parent && typeof parent.set_child == "function") {
      return parent.set_child(null);
    }
    if ("remove" in parent && typeof parent.remove == "function") {
      return parent.remove(child);
    }
    throw Error(`cannot remove ${child} from ${parent}`);
  },
  appendChild(parent, child) {
    if (child instanceof Gtk3.Adjustment && "set_adjustment" in parent && typeof parent.set_adjustment === "function") {
      return parent.set_adjustment(child);
    }
    if (child instanceof Gtk3.Widget && parent instanceof Gtk3.Stack && child.name !== "" && child.name !== null && getType(child) === "named") {
      return parent.add_named(child, child.name);
    }
    if (child instanceof Gtk3.Popover && parent instanceof Gtk3.MenuButton) {
      return parent.set_popover(child);
    }
    if (child instanceof Gio5.MenuModel && (parent instanceof Gtk3.MenuButton || parent instanceof Gtk3.PopoverMenu)) {
      return parent.set_menu_model(child);
    }
    if (child instanceof Gio5.MenuItem && parent instanceof Gio5.Menu) {
    }
    if (child instanceof Gtk3.Window && parent instanceof Gtk3.Application) {
      return parent.add_window(child);
    }
    if (child instanceof Gtk3.TextBuffer && parent instanceof Gtk3.TextView) {
      return parent.set_buffer(child);
    }
    if (parent instanceof Gtk3.Buildable) {
      return parent.vfunc_add_child(dummyBuilder, child, getType(child));
    }
    throw Error(`cannot add ${child} to ${parent}`);
  }
});

// ../ags/js/lib/gtk4/jsx-runtime.ts
Object.assign(intrinsicElements, {
  box: Gtk4.Box,
  button: Gtk4.Button,
  centerbox: Gtk4.CenterBox,
  // circularprogress: Astal.CircularProgress,
  drawingarea: Gtk4.DrawingArea,
  entry: Gtk4.Entry,
  image: Gtk4.Image,
  label: Gtk4.Label,
  levelbar: Gtk4.LevelBar,
  menubutton: Gtk4.MenuButton,
  overlay: Gtk4.Overlay,
  popover: Gtk4.Popover,
  revealer: Gtk4.Revealer,
  scrolledwindow: Gtk4.ScrolledWindow,
  slider: Astal2.Slider,
  stack: Gtk4.Stack,
  switch: Gtk4.Switch,
  togglebutton: Gtk4.ToggleButton,
  window: Astal2.Window
});

// src/features/osd/view/osd-popup-view.tsx
function OsdPopupView() {
  const vm = new OsdPopupVM();
  return /* @__PURE__ */ jsxs(
    "box",
    {
      $: () => vm.initListen(),
      cssClasses: ["osd-popup-view"],
      visible: vm.getAgsPartState((s) => s.visible),
      children: [
        /* @__PURE__ */ jsx(
          "image",
          {
            visible: vm.getAgsPartState((s) => !!s.icon),
            iconName: vm.getAgsPartState((s) => s.icon ?? "")
          }
        ),
        /* @__PURE__ */ jsx(
          "levelbar",
          {
            valign: Gtk2.Align.CENTER,
            widthRequest: 100,
            visible: vm.getAgsPartState((s) => !!s.value),
            value: vm.getAgsPartState((s) => s.value ?? 0)
          }
        )
      ]
    }
  );
}

// src/features/osd/view/osd-window-view.tsx
function OsdWindowView(monitor) {
  const vm = new OsdPopupVM();
  return /* @__PURE__ */ jsx(
    "window",
    {
      gdkmonitor: monitor,
      cssClasses: ["osd"],
      application: app_default,
      layer: Astal.Layer.OVERLAY,
      keymode: Astal.Keymode.NONE,
      anchor: Astal.WindowAnchor.BOTTOM,
      visible: vm.getAgsPartState((s) => s.visible),
      children: /* @__PURE__ */ jsx(OsdPopupView, {})
    }
  );
}

// src/core/commands/command-args-constructor.ts
var CommandArgsConstructor = class {
  tryParse(args) {
    return this.pairParse(args);
  }
  pairParse(args) {
    const obj = {};
    for (let i = 0; i < args.length; i += 2) {
      obj[args[i]] = args[i + 1];
    }
    return obj;
  }
};

// src/core/commands/commands-handler.ts
var CommandsHandler = class {
  constructor() {
    this.commands = /* @__PURE__ */ new Map();
    this.argConstructor = new CommandArgsConstructor();
  }
  handleCommandSafe(request, response) {
    try {
      this.handleCommand(request, response);
      return true;
    } catch (error) {
      response(`Failed to handle command request "${request}": ${error}`);
      return false;
    }
  }
  handleCommand(request, response) {
    const [command, args] = this.parseCommandRequest(request);
    const cArgs = this.argConstructor.tryParse(args);
    this.executeCommand(command, response, cArgs);
  }
  registerCommand(commandName, handler) {
    const command = this.commands.get(commandName);
    if (command) {
      throw new Error(`Handler for command "${command}" already exists`);
    }
    this.commands.set(commandName, handler);
  }
  parseCommandRequest(request) {
    const [command, ...args] = request;
    return [command, args];
  }
  executeCommand(command, response, args) {
    const handler = this.commands.get(command);
    if (handler) {
      const result = handler(args);
      if (typeof result == "string") {
        return response(result);
      }
      return response("Done");
    }
    throw new Error(`Handler for command "${command} not found"`);
  }
};

// src/features/time/vm/time-vm.ts
var TimeVM = class extends BaseVM {
  constructor() {
    super({ date: /* @__PURE__ */ new Date() });
    this.timeRefresh();
  }
  timeRefresh() {
    this.setTime();
    this.setDayDate();
    interval(1e3, () => {
      this.setTimeVars();
    });
  }
  setTimeVars() {
    const date = /* @__PURE__ */ new Date();
    if (date.getSeconds() == 0) {
      this.setTime();
    }
    if (date.getHours() != this.state.get().date.getHours()) {
      this.setDayDate();
    }
  }
  setTime() {
    const date = /* @__PURE__ */ new Date();
    const time = date.toLocaleTimeString("en-US", {
      hour: "2-digit",
      minute: "2-digit",
      hour12: false
    });
    const time12 = date.toLocaleTimeString("en-US", {
      hour: "2-digit",
      minute: "2-digit",
      hour12: true
    });
    this.state.setPartial({
      time,
      time12
    });
  }
  setDayDate() {
    const date = /* @__PURE__ */ new Date();
    const [dayDate, _] = date.toLocaleTimeString("en-US", {
      weekday: "long",
      month: "long",
      day: "numeric"
    }).split(" at");
    this.state.setPartial({
      dayDate,
      weekDay: date.getDay(),
      weekDots: [...new Array(date.getDay() + 1).fill("\u25CF"), ...new Array(6 - date.getDay()).fill("\u25CB")].join(" ")
    });
  }
};

// src/features/time/view/time-bar-view.tsx
function TimeBarView() {
  const vm = new TimeVM();
  return /* @__PURE__ */ jsxs(
    "menubutton",
    {
      hexpand: true,
      halign: Gtk2.Align.CENTER,
      children: [
        /* @__PURE__ */ jsx(
          "label",
          {
            label: vm.getAgsPartState((s) => s.time12 ?? ""),
            cssClasses: ["Time"]
          }
        ),
        /* @__PURE__ */ jsx("popover", { children: /* @__PURE__ */ jsx(Gtk2.Calendar, {}) })
      ]
    }
  );
}

// src/features/tray/view/tray-view.tsx
import Tray from "gi://AstalTray";
function TrayView() {
  const tray = Tray.get_default();
  const items = createBinding(tray, "items");
  return /* @__PURE__ */ jsx("box", { cssClasses: ["SysTray"], children: /* @__PURE__ */ jsx(For, { each: items, children: (item) => /* @__PURE__ */ jsx(
    "menubutton",
    {
      $: (self) => {
        self.insert_action_group("dbusmenu", item.actionGroup);
      },
      tooltipMarkup: item.tooltipMarkup,
      menuModel: item.menuModel,
      cssClasses: ["tray-item"],
      children: /* @__PURE__ */ jsx("image", { gicon: item.gicon })
    }
  ) }) });
}

// src/features/battery/model/battery-model.ts
import Battery from "gi://AstalBattery";

// src/core/mvvm/base-model.ts
var BaseModel = class {
  constructor() {
    this.subscriptions = [];
  }
  dispose() {
    this.subscriptions.forEach((fn) => fn());
  }
  getBindingSubscription(object, key, callback) {
    const binding = createBinding(object, key);
    const subscription = binding.subscribe(() => callback(binding.get()));
    this.subscriptions.push(subscription);
  }
  getAccessorSubscription(accessor, callback) {
    const subscription = accessor.subscribe(() => callback(accessor.get()));
    this.subscriptions.push(subscription);
  }
};

// src/features/battery/model/battery-model.ts
var BatteryModel = class extends BaseModel {
  constructor() {
    super();
    this.battery = Battery.get_default();
  }
  getIsPresent() {
    return this.battery.isPresent;
  }
  getPercentage() {
    return this.battery.percentage;
  }
  getIconName() {
    return this.battery.iconName;
  }
  onIsPresent(callback) {
    this.getBindingSubscription(this.battery, "isPresent", callback);
  }
  onPercentage(callback) {
    this.getBindingSubscription(this.battery, "percentage", callback);
  }
  onIconName(callback) {
    this.getBindingSubscription(this.battery, "iconName", callback);
  }
};

// src/features/battery/vm/battery-vm.ts
var BatteryVM = class extends BaseVM {
  constructor() {
    super({});
    this.model = new BatteryModel();
    this.initState();
    this.initListeners();
  }
  initListeners() {
    this.model.onIsPresent((isPresent) => {
      this.state.setPartial({
        isPresent
      });
    });
    this.model.onPercentage((percentage) => {
      this.state.setPartial({
        percentage: this.percentageToString(percentage)
      });
    });
    this.model.onIconName((iconName) => {
      this.state.setPartial({
        iconName
      });
    });
  }
  initState() {
    this.state.set({
      iconName: this.model.getIconName(),
      isPresent: this.model.getIsPresent(),
      percentage: this.percentageToString(this.model.getPercentage())
    });
  }
  percentageToString(percentage) {
    return `${Math.floor(percentage * 100)} %`;
  }
};

// src/features/battery/view/battery-bar-view.tsx
function BatteryBarView() {
  const vm = new BatteryVM();
  return /* @__PURE__ */ jsx("box", { children: /* @__PURE__ */ jsx(With, { value: vm.agsState, children: (state) => state.isPresent && /* @__PURE__ */ jsxs("box", { cssClasses: ["Battery"], children: [
    /* @__PURE__ */ jsx("image", { iconName: state.iconName, tooltipText: state.percentage }),
    /* @__PURE__ */ jsx("label", { label: state.percentage })
  ] }) }) });
}

// src/core/system/bin.ts
function commandExists(command) {
  try {
    exec(`which ${command}`);
    return true;
  } catch (error) {
    console.error(`Command [${command}] doesn't exist`);
    return false;
  }
}

// src/features/brightness/model/brightnessctl-model.ts
var commands = {
  command: "brightnessctl",
  maxBrightness: "brightnessctl max",
  getBrightness: ["bash", "-c", "brightnessctl get"]
};
var BrightnessCtlModel = class extends BaseModel {
  constructor() {
    super();
    if (this.isPresent()) {
      this.brightness = createPoll(0, 1e3, commands.getBrightness, (current) => {
        return parseInt(current) / this.getMaxBrightness();
      });
    }
  }
  getMaxBrightness() {
    return parseInt(exec(commands.maxBrightness));
  }
  isPresent() {
    return commandExists(commands.command);
  }
  onBrightness(callback) {
    if (this.brightness) {
      this.getAccessorSubscription(this.brightness, callback);
    }
  }
};

// src/core/utils/text.ts
function ellipsis(text, maxLength) {
  if (text.length <= maxLength) return text;
  return text.slice(0, maxLength) + "...";
}
function toPercentStr(value) {
  let valueStr;
  if (value >= 0 && value <= 1) {
    valueStr = value.toFixed(2);
  } else {
    valueStr = (value / 100).toFixed(2);
  }
  try {
    const [hundred, tens, ..._] = valueStr.split(".");
    if (hundred == "1") {
      return `${hundred}${tens}`;
    } else {
      if (tens == "00") {
        return "0";
      }
      return tens;
    }
  } catch {
    return "";
  }
}

// src/features/brightness/vm/brightness-vm.ts
var BrightnessVM = class extends BaseVM {
  constructor() {
    super({
      isPresent: commandExists("brightnessctl"),
      iconName: "display-brightness-symbolic"
    });
    this.model = new BrightnessCtlModel();
    this.initListeners();
  }
  initListeners() {
    this.model.onBrightness((value) => this.setBrightness(value));
  }
  setBrightness(value) {
    this.state.setPartial({
      tooltipText: `${toPercentStr(value)}%`
    });
  }
};

// src/features/brightness/view/brightness-bar-view.tsx
function BrightnessBarView() {
  const vm = new BrightnessVM();
  return /* @__PURE__ */ jsx("box", { children: /* @__PURE__ */ jsx(With, { value: vm.agsState, children: (state) => state.isPresent && /* @__PURE__ */ jsx("box", { cssClasses: ["BrightnessIconButton"], children: /* @__PURE__ */ jsx(
    "button",
    {
      children: /* @__PURE__ */ jsx(
        "image",
        {
          iconName: state.iconName,
          tooltipText: state.tooltipText
        }
      )
    }
  ) }) }) });
}

// src/features/volume/model/volume-model.ts
import AstalWp from "gi://AstalWp?version=0.1";
var VolumeModel = class extends BaseModel {
  constructor() {
    super();
    this.speaker = AstalWp.get_default().audio.get_default_speaker();
  }
  onIconName(callback) {
    this.getBindingSubscription(this.speaker, "volumeIcon", callback);
  }
  onVolume(callback) {
    this.getBindingSubscription(this.speaker, "volume", callback);
  }
  changeState() {
    this.speaker.set_mute(!this.speaker.get_mute());
  }
};

// src/features/volume/vm/volume-vm.ts
var VolumeVM = class extends BaseVM {
  constructor() {
    super({});
    this.model = new VolumeModel();
    this.initListeners();
  }
  initListeners() {
    this.model.onIconName((iconName) => {
      this.state.setPartial({
        iconName
      });
    });
    this.model.onVolume((volume) => {
      this.state.setPartial({
        tooltipText: `${toPercentStr(volume)}%`
      });
    });
  }
  changeState() {
    this.model.changeState();
  }
};

// src/features/volume/view/volume-bar-view.tsx
function VolumeBarView() {
  const vm = new VolumeVM();
  return /* @__PURE__ */ jsx("box", { children: /* @__PURE__ */ jsx(With, { value: vm.agsState, children: (state) => /* @__PURE__ */ jsx(
    "button",
    {
      onClicked: () => vm.changeState(),
      cssClasses: ["AudioIconButton"],
      children: /* @__PURE__ */ jsx(
        "image",
        {
          iconName: state.iconName,
          tooltipText: state.tooltipText
        }
      )
    }
  ) }) });
}

// src/features/bar/view/bar-view.tsx
function Bar(gdkmonitor) {
  const { TOP, LEFT, RIGHT } = Astal.WindowAnchor;
  return /* @__PURE__ */ jsx(
    "window",
    {
      visible: true,
      cssClasses: ["Bar"],
      gdkmonitor,
      exclusivity: Astal.Exclusivity.EXCLUSIVE,
      anchor: TOP | LEFT | RIGHT,
      application: app_default,
      children: /* @__PURE__ */ jsxs("centerbox", { orientation: Gtk2.Orientation.HORIZONTAL, children: [
        /* @__PURE__ */ jsx("box", { $type: "center", children: /* @__PURE__ */ jsx(TimeBarView, {}) }),
        /* @__PURE__ */ jsxs("box", { $type: "end", children: [
          /* @__PURE__ */ jsx(VolumeBarView, {}),
          /* @__PURE__ */ jsx(BrightnessBarView, {}),
          /* @__PURE__ */ jsx(BatteryBarView, {}),
          /* @__PURE__ */ jsx(TrayView, {})
        ] })
      ] })
    }
  );
}

// src/features/commands/volume-command-handler.ts
import Wp2 from "gi://AstalWp";
function volumeCommandHandler({ inc, dec, mute }) {
  const controller = Wp2.get_default()?.get_default_speaker();
  if (!controller) {
    throw new Error("Failed to get volume controller");
  }
  if (mute) {
    controller?.set_mute(!controller.get_mute());
    return;
  }
  const cVolume = controller.get_volume();
  if (inc) {
    const value = parseInt(inc);
    const newValue = Math.floor(cVolume * 100 + value) / 100;
    if (newValue > 1) {
      controller?.set_volume(1);
      return;
    }
    controller?.set_volume(newValue);
    return;
  }
  if (dec) {
    const value = parseInt(dec);
    const newValue = Math.floor(cVolume * 100 - value) / 100;
    if (newValue < 0) {
      controller.set_volume(0);
    }
    controller?.set_volume(newValue);
    return;
  }
}

// src/features/notifications/model/notifications-model.ts
import AstalNotifd from "gi://AstalNotifd";
var NotificationsModel = class extends BaseModel {
  constructor() {
    super();
    this.notifMap = /* @__PURE__ */ new Map();
    this.notifd = AstalNotifd.get_default();
    this.listen();
  }
  getNotifications() {
    return Array.from(this.notifMap.values());
  }
  onUpdate(callback) {
    this.onUpdateCallback = callback;
  }
  listen() {
    this.notifd.connect("notified", this.onNotified.bind(this));
    this.notifd.connect("resolved", this.onResolved.bind(this));
  }
  onNotified(_source, id, _replaced) {
    const notification = this.notifd.get_notification(id);
    if (notification == null) {
      return;
    }
    this.notifMap.set(id, {
      id,
      summary: notification.get_summary(),
      body: notification.get_body(),
      image: notification.get_image(),
      appName: notification.get_app_name(),
      appIcon: notification.get_app_icon(),
      time: new Date(notification.get_time())
    });
    const expireIn = 3e3;
    setTimeout(() => {
      this.delete(id);
    }, expireIn);
    this.notify();
  }
  onResolved(_source, id, _) {
    this.delete(id);
  }
  delete(key) {
    this.notifMap.delete(key);
    this.notify();
    console.log(`Notification [${key}] was deleted`);
  }
  notify() {
    if (this.onUpdateCallback) {
      this.onUpdateCallback(this.getNotifications());
    }
  }
};

// src/core/utils/chain.ts
var Chain = class _Chain {
  constructor(value) {
    this.value = value;
  }
  then(fn) {
    return new _Chain(fn(this.value));
  }
  get() {
    return this.value;
  }
};

// src/features/notifications/vm/notifications-vm.ts
var NotificationsVM = class extends BaseVM {
  constructor() {
    super([]);
    this.model = new NotificationsModel();
    this.initListeners();
  }
  initListeners() {
    this.model.onUpdate((notifications) => this.onUpdate(notifications));
  }
  onUpdate(notifications) {
    this.state.set(notifications.map((n) => this.mapToState(n)));
  }
  mapToState(n) {
    console.log("qweqweqwe");
    console.log(n);
    console.log("qweqweqwe");
    const summary = new Chain(n.summary).then((s) => ellipsis(s, config_default.notifications.text.maxSummaryLength)).get();
    const body = new Chain(n.body).then((s) => !!s ? ellipsis(s, config_default.notifications.text.maxBodyLength) : s).get();
    const time = n.time.toLocaleTimeString("en-US", {
      hour: "2-digit",
      minute: "2-digit",
      hour12: true
    });
    const part = {
      summary,
      body,
      time
    };
    return Object.assign({}, n, part);
  }
  delete(id) {
    this.model.delete(id);
  }
};

// src/features/notifications/view/notification-tile-view.tsx
function NotificationTileView(props) {
  if (!props) {
    return /* @__PURE__ */ jsx("box", {});
  }
  return /* @__PURE__ */ jsx(
    "revealer",
    {
      $: (self) => timeout(100, () => self.revealChild = true),
      transitionType: Gtk2.RevealerTransitionType.SLIDE_UP,
      onDestroy: (self) => self.revealChild = false,
      children: /* @__PURE__ */ jsx(
        "box",
        {
          cssClasses: ["Notification"],
          hexpand: true,
          children: /* @__PURE__ */ jsxs(
            "box",
            {
              orientation: Gtk2.Orientation.VERTICAL,
              hexpand: true,
              children: [
                /* @__PURE__ */ jsxs("box", { cssClasses: ["header"], hexpand: true, children: [
                  props.appIcon && /* @__PURE__ */ jsx(
                    "image",
                    {
                      cssClasses: ["app-icon"],
                      file: props.image
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    "box",
                    {
                      halign: Gtk2.Align.FILL,
                      hexpand: true,
                      children: /* @__PURE__ */ jsx(
                        "label",
                        {
                          cssClasses: ["app-name"],
                          label: props.appName
                        }
                      )
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    "label",
                    {
                      cssClasses: ["time"],
                      label: props.time
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    "button",
                    {
                      cssClasses: ["close"],
                      iconName: "cancel",
                      onClicked: props.delete
                    }
                  )
                ] }),
                /* @__PURE__ */ jsxs("box", { children: [
                  props.image && /* @__PURE__ */ jsx(
                    "box",
                    {
                      cssClasses: ["image-container"],
                      overflow: Gtk2.Overflow.HIDDEN,
                      vexpand: false,
                      hexpand: false,
                      widthRequest: 50,
                      heightRequest: 50,
                      children: /* @__PURE__ */ jsx(
                        "image",
                        {
                          cssClasses: ["image"],
                          file: props.image,
                          pixelSize: -1
                        }
                      )
                    }
                  ),
                  /* @__PURE__ */ jsxs("box", { orientation: Gtk2.Orientation.VERTICAL, children: [
                    /* @__PURE__ */ jsx("box", { children: /* @__PURE__ */ jsx(
                      "label",
                      {
                        cssClasses: ["summary"],
                        label: props.summary
                      }
                    ) }),
                    props.body && /* @__PURE__ */ jsx("box", { cssClasses: ["separator"] }),
                    props.body && /* @__PURE__ */ jsx("box", { children: /* @__PURE__ */ jsx(
                      "label",
                      {
                        cssClasses: ["body"],
                        label: props.body,
                        maxWidthChars: 20
                      }
                    ) })
                  ] })
                ] })
              ]
            }
          )
        }
      )
    }
  );
}

// src/features/notifications/view/notifications-window-view.tsx
function NotificationsWindowView(gdkmonitor) {
  const vm = new NotificationsVM();
  return /* @__PURE__ */ jsx(
    "window",
    {
      cssClasses: ["NotificationsWindow", "dark-theme"],
      anchor: Astal.WindowAnchor.TOP | Astal.WindowAnchor.RIGHT,
      gdkmonitor,
      exclusivity: Astal.Exclusivity.NORMAL,
      $type: "notification",
      layer: Astal.Layer.TOP,
      valign: Gtk2.Align.START,
      visible: vm.agsState((l) => l.length != 0),
      children: /* @__PURE__ */ jsx(
        "box",
        {
          orientation: Gtk2.Orientation.VERTICAL,
          valign: Gtk2.Align.START,
          cssClasses: ["notification-box"],
          children: /* @__PURE__ */ jsx(For, { each: vm.agsState, children: (item, _id) => /* @__PURE__ */ jsx(
            NotificationTileView,
            {
              delete: () => vm.delete(item.id),
              summary: item.summary,
              body: item.body,
              appIcon: item.appIcon,
              image: item.image,
              appName: item.appName,
              time: item.time,
              id: item.id
            }
          ) })
        }
      )
    }
  );
}

// src/features/weather/view/weather-conky-view.tsx
function WeatherConkyView({ vm }) {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      orientation: Gtk2.Orientation.VERTICAL,
      cssClasses: ["weather"],
      children: [
        /* @__PURE__ */ jsx(
          "label",
          {
            visible: vm.agsState((s) => !!s.temperature),
            label: vm.agsState((s) => s.temperature ?? ""),
            halign: Gtk2.Align.START
          }
        ),
        /* @__PURE__ */ jsx(
          "label",
          {
            visible: vm.agsState((s) => !!s.wind),
            label: vm.agsState((s) => s.wind ?? ""),
            halign: Gtk2.Align.START
          }
        ),
        /* @__PURE__ */ jsx(
          "label",
          {
            visible: vm.agsState((s) => !!s.humidity),
            label: vm.agsState((s) => s.humidity ?? ""),
            halign: Gtk2.Align.START
          }
        )
      ]
    }
  );
}

// src/features/time/view/time-conky-view.tsx
function TimeConkyView() {
  const vm = new TimeVM();
  return /* @__PURE__ */ jsxs(
    "box",
    {
      orientation: Gtk2.Orientation.VERTICAL,
      cssClasses: ["time-conky"],
      children: [
        /* @__PURE__ */ jsx(
          "label",
          {
            visible: vm.agsState((s) => !!s.time),
            label: vm.agsState((s) => s.time),
            cssClasses: ["time"],
            halign: Gtk2.Align.START
          }
        ),
        /* @__PURE__ */ jsx(
          "label",
          {
            visible: vm.agsState((s) => !!s.dayDate),
            label: vm.agsState((s) => s.dayDate),
            cssClasses: ["date"],
            halign: Gtk2.Align.START
          }
        ),
        /* @__PURE__ */ jsx(
          "label",
          {
            visible: vm.agsState((s) => !!s.weekDots),
            label: vm.agsState((s) => s.weekDots),
            cssClasses: ["week-day"],
            halign: Gtk2.Align.START
          }
        )
      ]
    }
  );
}

// ../ags/js/node_modules/gnim/dist/fetch.ts
import GLib7 from "gi://GLib";
import Gio6 from "gi://Gio";
import Soup from "gi://Soup?version=3.0";
var Headers = class _Headers {
  constructor(init = {}) {
    this.headers = /* @__PURE__ */ new Map();
    if (Array.isArray(init)) {
      for (const [name, value] of init) {
        this.append(name, value);
      }
    } else if (init instanceof _Headers) {
      init.forEach((value, name) => this.set(name, value));
    } else if (typeof init === "object") {
      for (const name in init) {
        this.set(name, init[name]);
      }
    }
  }
  append(name, value) {
    name = name.toLowerCase();
    if (!this.headers.has(name)) {
      this.headers.set(name, []);
    }
    this.headers.get(name).push(value);
  }
  delete(name) {
    this.headers.delete(name.toLowerCase());
  }
  get(name) {
    const values = this.headers.get(name.toLowerCase());
    return values ? values.join(", ") : null;
  }
  getAll(name) {
    return this.headers.get(name.toLowerCase()) || [];
  }
  has(name) {
    return this.headers.has(name.toLowerCase());
  }
  set(name, value) {
    this.headers.set(name.toLowerCase(), [value]);
  }
  forEach(callbackfn, thisArg) {
    for (const [name, values] of this.headers.entries()) {
      callbackfn.call(thisArg, values.join(", "), name, this);
    }
  }
  *entries() {
    for (const [name, values] of this.headers.entries()) {
      yield [name, values.join(", ")];
    }
  }
  *keys() {
    for (const name of this.headers.keys()) {
      yield name;
    }
  }
  *values() {
    for (const values of this.headers.values()) {
      yield values.join(", ");
    }
  }
  [Symbol.iterator]() {
    return this.entries();
  }
};
var URLSearchParams = class _URLSearchParams {
  constructor(init = "") {
    this.params = /* @__PURE__ */ new Map();
    if (typeof init === "string") {
      this.parseString(init);
    } else if (Array.isArray(init)) {
      for (const [key, value] of init) {
        this.append(key, value);
      }
    } else if (init instanceof _URLSearchParams) {
      init.forEach((value, key) => this.append(key, value));
    } else if (typeof init === "object") {
      for (const key in init) {
        this.set(key, init[key]);
      }
    }
  }
  parseString(query) {
    query.replace(/^\?/, "").split("&").forEach((pair) => {
      if (!pair) return;
      const [key, value] = pair.split("=").map(decodeURIComponent);
      this.append(key, value ?? "");
    });
  }
  get size() {
    return this.params.size;
  }
  append(name, value) {
    if (!this.params.has(name)) {
      this.params.set(name, []);
    }
    this.params.get(name).push(value);
  }
  delete(name, value) {
    if (value === void 0) {
      this.params.delete(name);
    } else {
      const values = this.params.get(name) || [];
      this.params.set(
        name,
        values.filter((v) => v !== value)
      );
      if (this.params.get(name).length === 0) {
        this.params.delete(name);
      }
    }
  }
  get(name) {
    const values = this.params.get(name);
    return values ? values[0] : null;
  }
  getAll(name) {
    return this.params.get(name) || [];
  }
  has(name, value) {
    if (!this.params.has(name)) return false;
    if (value === void 0) return true;
    return this.params.get(name)?.includes(value) || false;
  }
  set(name, value) {
    this.params.set(name, [value]);
  }
  sort() {
    this.params = new Map([...this.params.entries()].sort());
  }
  toString() {
    return [...this.params.entries()].flatMap(
      ([key, values]) => values.map((value) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)
    ).join("&");
  }
  forEach(callbackfn, thisArg) {
    for (const [key, values] of this.params.entries()) {
      for (const value of values) {
        callbackfn.call(thisArg, value, key, this);
      }
    }
  }
  [Symbol.iterator]() {
    return this.params.entries();
  }
};
var URL = class _URL {
  constructor(url, base) {
    if (base) {
      url = GLib7.Uri.resolve_relative(
        base instanceof _URL ? base.toString() : base,
        url instanceof _URL ? url.toString() : url,
        GLib7.UriFlags.HAS_PASSWORD
      );
    }
    this.uri = GLib7.Uri.parse(
      url instanceof _URL ? url.toString() : url,
      GLib7.UriFlags.HAS_PASSWORD
    );
    this.searchParams = new URLSearchParams(this.uri.get_query() ?? "");
  }
  get href() {
    const uri = GLib7.Uri.build_with_user(
      GLib7.UriFlags.HAS_PASSWORD,
      this.uri.get_scheme(),
      this.uri.get_user(),
      this.uri.get_password(),
      null,
      this.uri.get_host(),
      this.uri.get_port(),
      this.uri.get_path(),
      this.searchParams.toString(),
      this.uri.get_fragment()
    );
    return uri.to_string();
  }
  get origin() {
    return "null";
  }
  get protocol() {
    return this.uri.get_scheme() + ":";
  }
  get username() {
    return this.uri.get_user() ?? "";
  }
  get password() {
    return this.uri.get_password() ?? "";
  }
  get host() {
    const host = this.hostname;
    const port = this.port;
    return host ? host + (port ? ":" + port : "") : "";
  }
  get hostname() {
    return this.uri.get_host() ?? "";
  }
  get port() {
    const p = this.uri.get_port();
    return p >= 0 ? p.toString() : "";
  }
  get pathname() {
    return this.uri.get_path();
  }
  get hash() {
    const frag = this.uri.get_fragment();
    return frag ? "#" + frag : "";
  }
  get search() {
    const q = this.searchParams.toString();
    return q ? "?" + q : "";
  }
  toString() {
    return this.href;
  }
  toJSON() {
    return this.href;
  }
};
var Response = class {
  constructor(body = null, options = {}) {
    this.body = null;
    this.bodyUsed = false;
    this.redirected = false;
    this.type = "default";
    this.url = "";
    this.body = body;
    this.headers = new Headers(options.headers ?? {});
    this.status = options.status ?? 200;
    this.statusText = options.statusText ?? "";
    this.ok = this.status >= 200 && this.status < 300;
  }
  static error() {
    throw Error("Not yet implemented");
  }
  static json(_data, _init5) {
    throw Error("Not yet implemented");
  }
  static redirect(_url, _status) {
    throw Error("Not yet implemented");
  }
  async blob() {
    throw Error("Not implemented");
  }
  async bytes() {
    const { CLOSE_SOURCE, CLOSE_TARGET } = Gio6.OutputStreamSpliceFlags;
    const outputStream = Gio6.MemoryOutputStream.new_resizable();
    if (!this.body) return null;
    await new Promise((resolve, reject) => {
      outputStream.splice_async(
        this.body,
        CLOSE_TARGET | CLOSE_SOURCE,
        GLib7.PRIORITY_DEFAULT,
        null,
        (_, res) => {
          try {
            resolve(outputStream.splice_finish(res));
          } catch (error) {
            reject(error);
          }
        }
      );
    });
    Object.assign(this, { bodyUsed: true });
    return outputStream.steal_as_bytes();
  }
  async formData() {
    throw Error("Not yet implemented");
  }
  async arrayBuffer() {
    const blob = await this.bytes();
    if (!blob) return null;
    return blob.toArray().buffer;
  }
  async text() {
    const blob = await this.bytes();
    return blob ? new TextDecoder().decode(blob.toArray()) : "";
  }
  async json() {
    const text = await this.text();
    return JSON.parse(text);
  }
  clone() {
    throw Error("Not yet implemented");
  }
};
async function fetch(url, { method, headers, body } = {}) {
  const session = new Soup.Session();
  const message = new Soup.Message({
    method: method || "GET",
    uri: url instanceof URL ? url.uri : GLib7.Uri.parse(url, GLib7.UriFlags.NONE)
  });
  if (headers) {
    for (const [key, value] of Object.entries(headers))
      message.get_request_headers().append(key, String(value));
  }
  if (typeof body === "string") {
    message.set_request_body_from_bytes(null, new GLib7.Bytes(new TextEncoder().encode(body)));
  }
  const inputStream = await new Promise((resolve, reject) => {
    session.send_async(message, 0, null, (_, res) => {
      try {
        resolve(session.send_finish(res));
      } catch (error) {
        reject(error);
      }
    });
  });
  return new Response(inputStream, {
    statusText: message.reason_phrase,
    status: message.status_code
  });
}

// src/core/endpoints/endpoints.ts
var Endpoints = class {
  build(base, query) {
    const queryStr = this.buildQueryObj(query);
    return new URL(`${base}?${queryStr}`);
  }
  buildQueryArg(key, value) {
    return `${key}=${value}`;
  }
  buildQueryObj(queryObj) {
    const args = [];
    for (let key of Object.keys(queryObj)) {
      const value = queryObj[key];
      args.push(this.buildQueryArg(key, value));
    }
    return args.join("&");
  }
};

// src/features/weather/model/weather-endpoints.ts
var WeatherEndpoints = class extends Endpoints {
  constructor() {
    super();
    this.config = getConfig();
  }
  getWeather() {
    return this.build(
      this.config.weather.apiSettings.baseUrl,
      {
        id: this.config.weather.apiSettings.cityId,
        appid: this.config.weather.apiSettings.apiKey,
        units: this.config.weather.apiSettings.units,
        cnt: this.config.weather.apiSettings.cnt,
        lang: this.config.weather.apiSettings.language
      }
    );
  }
};

// src/features/weather/model/weather-model.ts
var WeatherModel = class {
  constructor(endpoints, config2) {
    this.endpoints = endpoints ?? new WeatherEndpoints();
    this.config = config2 ?? getConfig();
  }
  startRefresh(callback) {
    this.timer = interval(
      this.config.weather.refresh.refreshInterval,
      async () => {
        const weather = await this.fetch();
        callback(weather);
      }
    );
  }
  stopRefresh() {
    this.timer?.cancel();
  }
  async fetch() {
    const url = this.endpoints.getWeather();
    const res = await fetch(url);
    const json = await res.json();
    return json;
  }
};

// src/features/weather/vm/weather-vm.ts
var WeatherVM = class extends BaseVM {
  constructor(model) {
    super({});
    this.model = model ?? new WeatherModel();
    this.initWeather().then(() => {
      console.log("Initialized weather");
    }).catch((err) => {
      console.error(`Failed to initialize error: ${JSON.stringify(err)}`);
    });
    this.initRefresh();
  }
  async initWeather() {
    const weather = await this.model.fetch();
    this.setWeather(weather);
  }
  initRefresh() {
    this.model.startRefresh((weather) => this.setWeather(weather));
  }
  setWeather(w) {
    this.state.set({
      temperature: `Today's in ${w.name} is ${w.weather[0].main} with temperature ${w.main.temp}\xB0C`,
      wind: `Wind speed in your location is ${w.wind.speed}kmh`,
      humidity: `And Humidity is ${w.main.humidity}%`
    });
  }
};

// src/features/conky/view/conky-view.tsx
function ConkyView(gdkmonitor) {
  return /* @__PURE__ */ jsx(
    "window",
    {
      visible: true,
      anchor: Astal.WindowAnchor.BOTTOM | Astal.WindowAnchor.LEFT,
      layer: Astal.Layer.BACKGROUND,
      gdkmonitor,
      exclusivity: Astal.Exclusivity.IGNORE,
      keymode: Astal.Keymode.NONE,
      valign: Gtk2.Align.START,
      halign: Gtk2.Align.START,
      hexpand: true,
      heightRequest: 50,
      widthRequest: 50,
      cssClasses: ["conky-widget"],
      children: /* @__PURE__ */ jsxs(
        "box",
        {
          orientation: Gtk2.Orientation.VERTICAL,
          halign: Gtk2.Align.START,
          cssClasses: ["conky"],
          children: [
            /* @__PURE__ */ jsx(TimeConkyView, {}),
            /* @__PURE__ */ jsx(WeatherConkyView, { vm: new WeatherVM() })
          ]
        }
      )
    }
  );
}

// app.ts
var cHandler = new CommandsHandler();
cHandler.registerCommand("volume", volumeCommandHandler);
app_default.start({
  css: style_default,
  instanceName: config_default.appTitle,
  requestHandler(request, res) {
    const result = cHandler.handleCommandSafe(request, res);
    if (result) {
      res(result);
      return;
    }
    res("unknown command");
  },
  main() {
    app_default.get_monitors().map((mon) => OsdWindowView(mon));
    if (config_default.conky.enabled) {
      app_default.get_monitors().map((mon) => ConkyView(mon));
    }
    app_default.get_monitors().map((mon) => Bar(mon));
    if (config_default.notifications.enabled) {
      app_default.get_monitors().map((mon) => NotificationsWindowView(mon));
    }
  }
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vYWdzL2pzL2xpYi9vdmVycmlkZXMudHMiLCAiLi4vYWdzL2pzL25vZGVfbW9kdWxlcy9nbmltL2Rpc3QvZ29iamVjdC50cyIsICIuLi9hZ3MvanMvbm9kZV9tb2R1bGVzL2duaW0vZGlzdC91dGlsLnRzIiwgIi4uL2Fncy9qcy9saWIvZ3RrNC9hcHAudHMiLCAiLi4vYWdzL2pzL25vZGVfbW9kdWxlcy9nbmltL2Rpc3QvZGJ1cy50cyIsICIuLi9hZ3MvanMvbGliL2FwcC9kYnVzLnRzIiwgIi4uL2Fncy9qcy9ub2RlX21vZHVsZXMvZ25pbS9kaXN0L2pzeC9qc3gudHMiLCAiLi4vYWdzL2pzL25vZGVfbW9kdWxlcy9nbmltL2Rpc3QvanN4L0ZyYWdtZW50LnRzIiwgIi4uL2Fncy9qcy9ub2RlX21vZHVsZXMvZ25pbS9kaXN0L2pzeC9zdGF0ZS50cyIsICIuLi9hZ3MvanMvbm9kZV9tb2R1bGVzL2duaW0vZGlzdC9qc3gvZW52LnRzIiwgIi4uL2Fncy9qcy9ub2RlX21vZHVsZXMvZ25pbS9kaXN0L2pzeC9zY29wZS50cyIsICIuLi9hZ3MvanMvbm9kZV9tb2R1bGVzL2duaW0vZGlzdC9qc3gvRm9yLnRzIiwgIi4uL2Fncy9qcy9ub2RlX21vZHVsZXMvZ25pbS9kaXN0L2pzeC9XaXRoLnRzIiwgIi4uL2Fncy9qcy9ub2RlX21vZHVsZXMvZ25pbS9kaXN0L2pzeC9UaGlzLnRzIiwgInNhc3M6L2hvbWUvd2Vpc3NtYWxsL1Byb2plY3RzL2Fncy10cmFuc2Zlci9zdHlsZS5zY3NzIiwgIi4uL2Fncy9qcy9saWIvcHJvY2Vzcy50cyIsICJjb25maWcudHMiLCAiLi4vYWdzL2pzL2xpYi9ndGs0L2luZGV4LnRzIiwgIi4uL2Fncy9qcy9saWIvdGltZS50cyIsICJzcmMvY29yZS9zdG9yZS9zdG9yZS50cyIsICJzcmMvY29yZS9tdnZtL2Jhc2Utdm0udHMiLCAic3JjL2ZlYXR1cmVzL29zZC9tb2RlbC9vc2Qtdm9sdW1lLW1vZGVsLnRzIiwgInNyYy9mZWF0dXJlcy9vc2QvbW9kZWwvb3NkLWJyaWdodG5lc3MtbW9kZWwudHMiLCAic3JjL2ZlYXR1cmVzL29zZC92bS9vc2QtcG9wdXAtdm0udHMiLCAiLi4vYWdzL2pzL2xpYi9ndGs0L2pzeC1ydW50aW1lLnRzIiwgIi4uL2Fncy9qcy9ub2RlX21vZHVsZXMvZ25pbS9kaXN0L2d0azQvanN4LXJ1bnRpbWUudHMiLCAic3JjL2ZlYXR1cmVzL29zZC92aWV3L29zZC1wb3B1cC12aWV3LnRzeCIsICJzcmMvZmVhdHVyZXMvb3NkL3ZpZXcvb3NkLXdpbmRvdy12aWV3LnRzeCIsICJzcmMvY29yZS9jb21tYW5kcy9jb21tYW5kLWFyZ3MtY29uc3RydWN0b3IudHMiLCAic3JjL2NvcmUvY29tbWFuZHMvY29tbWFuZHMtaGFuZGxlci50cyIsICJzcmMvZmVhdHVyZXMvdGltZS92bS90aW1lLXZtLnRzIiwgInNyYy9mZWF0dXJlcy90aW1lL3ZpZXcvdGltZS1iYXItdmlldy50c3giLCAic3JjL2ZlYXR1cmVzL3RyYXkvdmlldy90cmF5LXZpZXcudHN4IiwgInNyYy9mZWF0dXJlcy9iYXR0ZXJ5L21vZGVsL2JhdHRlcnktbW9kZWwudHMiLCAic3JjL2NvcmUvbXZ2bS9iYXNlLW1vZGVsLnRzIiwgInNyYy9mZWF0dXJlcy9iYXR0ZXJ5L3ZtL2JhdHRlcnktdm0udHMiLCAic3JjL2ZlYXR1cmVzL2JhdHRlcnkvdmlldy9iYXR0ZXJ5LWJhci12aWV3LnRzeCIsICJzcmMvY29yZS9zeXN0ZW0vYmluLnRzIiwgInNyYy9mZWF0dXJlcy9icmlnaHRuZXNzL21vZGVsL2JyaWdodG5lc3NjdGwtbW9kZWwudHMiLCAic3JjL2NvcmUvdXRpbHMvdGV4dC50cyIsICJzcmMvZmVhdHVyZXMvYnJpZ2h0bmVzcy92bS9icmlnaHRuZXNzLXZtLnRzIiwgInNyYy9mZWF0dXJlcy9icmlnaHRuZXNzL3ZpZXcvYnJpZ2h0bmVzcy1iYXItdmlldy50c3giLCAic3JjL2ZlYXR1cmVzL3ZvbHVtZS9tb2RlbC92b2x1bWUtbW9kZWwudHMiLCAic3JjL2ZlYXR1cmVzL3ZvbHVtZS92bS92b2x1bWUtdm0udHMiLCAic3JjL2ZlYXR1cmVzL3ZvbHVtZS92aWV3L3ZvbHVtZS1iYXItdmlldy50c3giLCAic3JjL2ZlYXR1cmVzL2Jhci92aWV3L2Jhci12aWV3LnRzeCIsICJzcmMvZmVhdHVyZXMvY29tbWFuZHMvdm9sdW1lLWNvbW1hbmQtaGFuZGxlci50cyIsICJzcmMvZmVhdHVyZXMvbm90aWZpY2F0aW9ucy9tb2RlbC9ub3RpZmljYXRpb25zLW1vZGVsLnRzIiwgInNyYy9jb3JlL3V0aWxzL2NoYWluLnRzIiwgInNyYy9mZWF0dXJlcy9ub3RpZmljYXRpb25zL3ZtL25vdGlmaWNhdGlvbnMtdm0udHMiLCAic3JjL2ZlYXR1cmVzL25vdGlmaWNhdGlvbnMvdmlldy9ub3RpZmljYXRpb24tdGlsZS12aWV3LnRzeCIsICJzcmMvZmVhdHVyZXMvbm90aWZpY2F0aW9ucy92aWV3L25vdGlmaWNhdGlvbnMtd2luZG93LXZpZXcudHN4IiwgInNyYy9mZWF0dXJlcy93ZWF0aGVyL3ZpZXcvd2VhdGhlci1jb25reS12aWV3LnRzeCIsICJzcmMvZmVhdHVyZXMvdGltZS92aWV3L3RpbWUtY29ua3ktdmlldy50c3giLCAiLi4vYWdzL2pzL25vZGVfbW9kdWxlcy9nbmltL2Rpc3QvZmV0Y2gudHMiLCAic3JjL2NvcmUvZW5kcG9pbnRzL2VuZHBvaW50cy50cyIsICJzcmMvZmVhdHVyZXMvd2VhdGhlci9tb2RlbC93ZWF0aGVyLWVuZHBvaW50cy50cyIsICJzcmMvZmVhdHVyZXMvd2VhdGhlci9tb2RlbC93ZWF0aGVyLW1vZGVsLnRzIiwgInNyYy9mZWF0dXJlcy93ZWF0aGVyL3ZtL3dlYXRoZXItdm0udHMiLCAic3JjL2ZlYXR1cmVzL2Nvbmt5L3ZpZXcvY29ua3ktdmlldy50c3giLCAiYXBwLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvKipcbiAqIFdvcmthcm91bmQgZm9yIFwiQ2FuJ3QgY29udmVydCBub24tbnVsbCBwb2ludGVyIHRvIEpTIHZhbHVlIFwiXG4gKi9cblxuZXhwb3J0IHt9XG5cbmZ1bmN0aW9uIHNuYWtlaWZ5KHN0cjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0clxuICAgICAgICAucmVwbGFjZSgvKFthLXpdKShbQS1aXSkvZywgXCIkMV8kMlwiKVxuICAgICAgICAucmVwbGFjZUFsbChcIi1cIiwgXCJfXCIpXG4gICAgICAgIC50b0xvd2VyQ2FzZSgpXG59XG5cbmFzeW5jIGZ1bmN0aW9uIHN1cHByZXNzPFQ+KG1vZDogUHJvbWlzZTx7IGRlZmF1bHQ6IFQgfT4sIHBhdGNoOiAobTogVCkgPT4gdm9pZCkge1xuICAgIHJldHVybiBtb2QudGhlbigobSkgPT4gcGF0Y2gobS5kZWZhdWx0KSkuY2F0Y2goKCkgPT4gdm9pZCAwKVxufVxuXG5mdW5jdGlvbiBwYXRjaDxQIGV4dGVuZHMgb2JqZWN0Pihwcm90bzogUCwgcHJvcDogRXh0cmFjdDxrZXlvZiBQLCBzdHJpbmc+KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvLCBwcm9wLCB7XG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzW2BnZXRfJHtzbmFrZWlmeShwcm9wKX1gXSgpXG4gICAgICAgIH0sXG4gICAgfSlcbn1cblxuYXdhaXQgc3VwcHJlc3MoaW1wb3J0KFwiZ2k6Ly9Bc3RhbEFwcHNcIiksICh7IEFwcHMsIEFwcGxpY2F0aW9uIH0pID0+IHtcbiAgICBwYXRjaChBcHBzLnByb3RvdHlwZSwgXCJsaXN0XCIpXG4gICAgcGF0Y2goQXBwbGljYXRpb24ucHJvdG90eXBlLCBcImtleXdvcmRzXCIpXG4gICAgcGF0Y2goQXBwbGljYXRpb24ucHJvdG90eXBlLCBcImNhdGVnb3JpZXNcIilcbn0pXG5cbmF3YWl0IHN1cHByZXNzKGltcG9ydChcImdpOi8vQXN0YWxCYXR0ZXJ5XCIpLCAoeyBVUG93ZXIgfSkgPT4ge1xuICAgIHBhdGNoKFVQb3dlci5wcm90b3R5cGUsIFwiZGV2aWNlc1wiKVxufSlcblxuYXdhaXQgc3VwcHJlc3MoaW1wb3J0KFwiZ2k6Ly9Bc3RhbEJsdWV0b290aFwiKSwgKHsgQWRhcHRlciwgQmx1ZXRvb3RoLCBEZXZpY2UgfSkgPT4ge1xuICAgIHBhdGNoKEFkYXB0ZXIucHJvdG90eXBlLCBcInV1aWRzXCIpXG4gICAgcGF0Y2goQmx1ZXRvb3RoLnByb3RvdHlwZSwgXCJhZGFwdGVyc1wiKVxuICAgIHBhdGNoKEJsdWV0b290aC5wcm90b3R5cGUsIFwiZGV2aWNlc1wiKVxuICAgIHBhdGNoKERldmljZS5wcm90b3R5cGUsIFwidXVpZHNcIilcbn0pXG5cbmF3YWl0IHN1cHByZXNzKGltcG9ydChcImdpOi8vQXN0YWxIeXBybGFuZFwiKSwgKHsgSHlwcmxhbmQsIE1vbml0b3IsIFdvcmtzcGFjZSB9KSA9PiB7XG4gICAgcGF0Y2goSHlwcmxhbmQucHJvdG90eXBlLCBcImJpbmRzXCIpXG4gICAgcGF0Y2goSHlwcmxhbmQucHJvdG90eXBlLCBcIm1vbml0b3JzXCIpXG4gICAgcGF0Y2goSHlwcmxhbmQucHJvdG90eXBlLCBcIndvcmtzcGFjZXNcIilcbiAgICBwYXRjaChIeXBybGFuZC5wcm90b3R5cGUsIFwiY2xpZW50c1wiKVxuICAgIHBhdGNoKE1vbml0b3IucHJvdG90eXBlLCBcImF2YWlsYWJsZU1vZGVzXCIpXG4gICAgcGF0Y2goTW9uaXRvci5wcm90b3R5cGUsIFwiYXZhaWxhYmxlX21vZGVzXCIpXG4gICAgcGF0Y2goV29ya3NwYWNlLnByb3RvdHlwZSwgXCJjbGllbnRzXCIpXG59KVxuXG5hd2FpdCBzdXBwcmVzcyhpbXBvcnQoXCJnaTovL0FzdGFsTXByaXNcIiksICh7IE1wcmlzLCBQbGF5ZXIgfSkgPT4ge1xuICAgIHBhdGNoKE1wcmlzLnByb3RvdHlwZSwgXCJwbGF5ZXJzXCIpXG4gICAgcGF0Y2goUGxheWVyLnByb3RvdHlwZSwgXCJzdXBwb3J0ZWRfdXJpX3NjaGVtZXNcIilcbiAgICBwYXRjaChQbGF5ZXIucHJvdG90eXBlLCBcInN1cHBvcnRlZFVyaVNjaGVtZXNcIilcbiAgICBwYXRjaChQbGF5ZXIucHJvdG90eXBlLCBcInN1cHBvcnRlZF9taW1lX3R5cGVzXCIpXG4gICAgcGF0Y2goUGxheWVyLnByb3RvdHlwZSwgXCJzdXBwb3J0ZWRNaW1lVHlwZXNcIilcbiAgICBwYXRjaChQbGF5ZXIucHJvdG90eXBlLCBcImNvbW1lbnRzXCIpXG59KVxuXG5hd2FpdCBzdXBwcmVzcyhpbXBvcnQoXCJnaTovL0FzdGFsTmV0d29ya1wiKSwgKHsgV2lmaSB9KSA9PiB7XG4gICAgcGF0Y2goV2lmaS5wcm90b3R5cGUsIFwiYWNjZXNzX3BvaW50c1wiKVxuICAgIHBhdGNoKFdpZmkucHJvdG90eXBlLCBcImFjY2Vzc1BvaW50c1wiKVxufSlcblxuYXdhaXQgc3VwcHJlc3MoaW1wb3J0KFwiZ2k6Ly9Bc3RhbE5vdGlmZFwiKSwgKHsgTm90aWZkLCBOb3RpZmljYXRpb24gfSkgPT4ge1xuICAgIHBhdGNoKE5vdGlmZC5wcm90b3R5cGUsIFwibm90aWZpY2F0aW9uc1wiKVxuICAgIHBhdGNoKE5vdGlmaWNhdGlvbi5wcm90b3R5cGUsIFwiYWN0aW9uc1wiKVxufSlcblxuYXdhaXQgc3VwcHJlc3MoaW1wb3J0KFwiZ2k6Ly9Bc3RhbFBvd2VyUHJvZmlsZXNcIiksICh7IFBvd2VyUHJvZmlsZXMgfSkgPT4ge1xuICAgIHBhdGNoKFBvd2VyUHJvZmlsZXMucHJvdG90eXBlLCBcImFjdGlvbnNcIilcbn0pXG5cbmF3YWl0IHN1cHByZXNzKGltcG9ydChcImdpOi8vQXN0YWxXcFwiKSwgKHsgV3AsIEF1ZGlvLCBWaWRlbyB9KSA9PiB7XG4gICAgcGF0Y2goV3AucHJvdG90eXBlLCBcImRldmljZXNcIilcbiAgICBwYXRjaChBdWRpby5wcm90b3R5cGUsIFwic3RyZWFtc1wiKVxuICAgIHBhdGNoKEF1ZGlvLnByb3RvdHlwZSwgXCJyZWNvcmRlcnNcIilcbiAgICBwYXRjaChBdWRpby5wcm90b3R5cGUsIFwibWljcm9waG9uZXNcIilcbiAgICBwYXRjaChBdWRpby5wcm90b3R5cGUsIFwic3BlYWtlcnNcIilcbiAgICBwYXRjaChBdWRpby5wcm90b3R5cGUsIFwiZGV2aWNlc1wiKVxuICAgIHBhdGNoKFZpZGVvLnByb3RvdHlwZSwgXCJzdHJlYW1zXCIpXG4gICAgcGF0Y2goVmlkZW8ucHJvdG90eXBlLCBcInJlY29yZGVyc1wiKVxuICAgIHBhdGNoKFZpZGVvLnByb3RvdHlwZSwgXCJzaW5rc1wiKVxuICAgIHBhdGNoKFZpZGVvLnByb3RvdHlwZSwgXCJzb3VyY2VzXCIpXG4gICAgcGF0Y2goVmlkZW8ucHJvdG90eXBlLCBcImRldmljZXNcIilcbn0pXG5cbmF3YWl0IHN1cHByZXNzKGltcG9ydChcImdpOi8vQXN0YWxUcmF5XCIpLCAoeyBUcmF5IH0pID0+IHtcbiAgICBwYXRjaChUcmF5LnByb3RvdHlwZSwgXCJpdGVtc1wiKVxufSlcbiIsICIvKipcbiAqIEluIHRoZSBmdXR1cmUgSSB3b3VsZCBsaWtlIHRvIG1ha2UgdHlwZSBkZWNsYXJhdGlvbiBpbiBkZWNvcmF0b3JzIG9wdGlvbmFsXG4gKiBhbmQgaW5mZXIgaXQgZnJvbSB0eXBlc2NyaXB0IHR5cGVzIGF0IHRyYW5zcGlsZSB0aW1lLiBDdXJyZW50bHksIHdlIGNvdWxkXG4gKiBlaXRoZXIgdXNlIHN0YWdlIDIgZGVjb3JhdG9ycyB3aXRoIHRoZSBcImVtaXREZWNvcmF0b3JNZXRhZGF0YVwiIGFuZFxuICogXCJleHBlcmltZW50YWxEZWNvcmF0b3JzXCIgdHNjb25maWcgb3B0aW9ucy4gSG93ZXZlciwgbWV0YWRhdGEgaXMgbm90IHN1cHBvcnRlZFxuICogYnkgZXNidWlsZCB3aGljaCBpcyB3aGF0IEknbSBtb3N0bHkgdGFyZ2V0aW5nIGFzIHRoZSBidW5kbGVyIGZvciBwZXJmb3JtYW5jZVxuICogcmVhc29ucy4gaHR0cHM6Ly9naXRodWIuY29tL2V2YW53L2VzYnVpbGQvaXNzdWVzLzI1N1xuICogSG93ZXZlciwgSSBiZWxpZXZlIHRoYXQgd2Ugc2hvdWxkIG5vdCB1c2Ugc3RhZ2UgMiBhbnltb3JlLFxuICogc28gSSdtIHdhaXRpbmcgZm9yIGEgYmV0dGVyIGFsdGVybmF0aXZlLlxuICovXG5cbmltcG9ydCBHT2JqZWN0IGZyb20gXCJnaTovL0dPYmplY3RcIlxuaW1wb3J0IEdMaWIgZnJvbSBcImdpOi8vR0xpYlwiXG5pbXBvcnQgeyBkZWZpbmVQcm9wZXJ0eUdldHRlciwga2ViYWJpZnkgfSBmcm9tIFwiLi91dGlsLmpzXCJcblxuY29uc3QgcHJpdiA9IFN5bWJvbChcImdvYmplY3QgcHJpdmF0ZVwiKVxuY29uc3QgeyBkZWZpbmVQcm9wZXJ0eSwgZnJvbUVudHJpZXMsIGVudHJpZXMgfSA9IE9iamVjdFxuY29uc3QgeyBPYmplY3Q6IEdPYmosIHJlZ2lzdGVyQ2xhc3MgfSA9IEdPYmplY3RcblxuZXhwb3J0IHsgR09iamVjdCBhcyBkZWZhdWx0IH1cbmV4cG9ydCB7IEdPYmogYXMgT2JqZWN0IH1cblxuZXhwb3J0IGNvbnN0IFNpZ25hbEZsYWdzID0gR09iamVjdC5TaWduYWxGbGFnc1xuZXhwb3J0IHR5cGUgU2lnbmFsRmxhZ3MgPSBHT2JqZWN0LlNpZ25hbEZsYWdzXG5cbmV4cG9ydCBjb25zdCBBY2N1bXVsYXRvclR5cGUgPSBHT2JqZWN0LkFjY3VtdWxhdG9yVHlwZVxuZXhwb3J0IHR5cGUgQWNjdW11bGF0b3JUeXBlID0gR09iamVjdC5BY2N1bXVsYXRvclR5cGVcblxuZXhwb3J0IHR5cGUgUGFyYW1TcGVjPFQgPSB1bmtub3duPiA9IEdPYmplY3QuUGFyYW1TcGVjPFQ+XG5leHBvcnQgY29uc3QgUGFyYW1TcGVjID0gR09iamVjdC5QYXJhbVNwZWNcblxuZXhwb3J0IHR5cGUgUGFyYW1GbGFncyA9IEdPYmplY3QuUGFyYW1GbGFnc1xuZXhwb3J0IGNvbnN0IFBhcmFtRmxhZ3MgPSBHT2JqZWN0LlBhcmFtRmxhZ3NcblxuZXhwb3J0IHR5cGUgR1R5cGU8VCA9IHVua25vd24+ID0gR09iamVjdC5HVHlwZTxUPlxuXG50eXBlIEdPYmogPSBHT2JqZWN0Lk9iamVjdFxuXG5pbnRlcmZhY2UgR09ialByaXZhdGUgZXh0ZW5kcyBHT2JqIHtcbiAgICBbcHJpdl06IFJlY29yZDxzdHJpbmcsIGFueT5cbn1cblxudHlwZSBNZXRhID0ge1xuICAgIHByb3BlcnRpZXM/OiB7XG4gICAgICAgIFtmaWVsZE5hbWU6IHN0cmluZ106IHtcbiAgICAgICAgICAgIGZsYWdzOiBQYXJhbUZsYWdzXG4gICAgICAgICAgICB0eXBlOiBQcm9wZXJ0eVR5cGVEZWNsYXJhdGlvbjx1bmtub3duPlxuICAgICAgICB9XG4gICAgfVxuICAgIHNpZ25hbHM/OiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IHtcbiAgICAgICAgICAgIGRlZmF1bHQ/OiBib29sZWFuXG4gICAgICAgICAgICBmbGFncz86IFNpZ25hbEZsYWdzXG4gICAgICAgICAgICBhY2N1bXVsYXRvcj86IEFjY3VtdWxhdG9yVHlwZVxuICAgICAgICAgICAgcmV0dXJuX3R5cGU/OiBHVHlwZVxuICAgICAgICAgICAgcGFyYW1fdHlwZXM/OiBBcnJheTxHVHlwZT5cbiAgICAgICAgICAgIG1ldGhvZDogKC4uLmFyZzogYW55W10pID0+IHVua25vd25cbiAgICAgICAgfVxuICAgIH1cbn1cblxudHlwZSBDb250ZXh0ID0geyBwcml2YXRlOiBmYWxzZTsgc3RhdGljOiBmYWxzZTsgbmFtZTogc3RyaW5nIH1cbnR5cGUgUHJvcGVydHlDb250ZXh0PFQ+ID0gQ2xhc3NGaWVsZERlY29yYXRvckNvbnRleHQ8R09iaiwgVD4gJiBDb250ZXh0XG50eXBlIEdldHRlckNvbnRleHQ8VD4gPSBDbGFzc0dldHRlckRlY29yYXRvckNvbnRleHQ8R09iaiwgVD4gJiBDb250ZXh0XG50eXBlIFNldHRlckNvbnRleHQ8VD4gPSBDbGFzc1NldHRlckRlY29yYXRvckNvbnRleHQ8R09iaiwgVD4gJiBDb250ZXh0XG50eXBlIFNpZ25hbENvbnRleHQ8VCBleHRlbmRzICgpID0+IGFueT4gPSBDbGFzc01ldGhvZERlY29yYXRvckNvbnRleHQ8R09iaiwgVD4gJiBDb250ZXh0XG5cbnR5cGUgU2lnbmFsT3B0aW9ucyA9IHtcbiAgICBkZWZhdWx0PzogYm9vbGVhblxuICAgIGZsYWdzPzogU2lnbmFsRmxhZ3NcbiAgICBhY2N1bXVsYXRvcj86IEFjY3VtdWxhdG9yVHlwZVxufVxuXG50eXBlIFByb3BlcnR5VHlwZURlY2xhcmF0aW9uPFQ+ID1cbiAgICB8ICgobmFtZTogc3RyaW5nLCBmbGFnczogUGFyYW1GbGFncykgPT4gUGFyYW1TcGVjPFQ+KVxuICAgIHwgUGFyYW1TcGVjPFQ+XG4gICAgfCB7ICRndHlwZTogR1R5cGU8VD4gfVxuXG5mdW5jdGlvbiBhc3NlcnRGaWVsZChcbiAgICBjdHg6IENsYXNzRmllbGREZWNvcmF0b3JDb250ZXh0IHwgQ2xhc3NHZXR0ZXJEZWNvcmF0b3JDb250ZXh0IHwgQ2xhc3NTZXR0ZXJEZWNvcmF0b3JDb250ZXh0LFxuKTogc3RyaW5nIHtcbiAgICBpZiAoY3R4LnByaXZhdGUpIHRocm93IEVycm9yKFwicHJpdmF0ZSBmaWVsZHMgYXJlIG5vdCBzdXBwb3J0ZWRcIilcbiAgICBpZiAoY3R4LnN0YXRpYykgdGhyb3cgRXJyb3IoXCJzdGF0aWMgZmllbGRzIGFyZSBub3Qgc3VwcG9ydGVkXCIpXG5cbiAgICBpZiAodHlwZW9mIGN0eC5uYW1lICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRocm93IEVycm9yKFwib25seSBzdHJpbmdzIGNhbiBiZSBnb2JqZWN0IHByb3BlcnR5IGtleXNcIilcbiAgICB9XG5cbiAgICByZXR1cm4gY3R4Lm5hbWVcbn1cblxuLyoqXG4gKiBEZWZpbmVzIGEgcmVhZGFibGUgKmFuZCogd3JpdGVhYmxlIHByb3BlcnR5IHRvIGJlIHJlZ2lzdGVyZWQgd2hlbiB1c2luZyB0aGUge0BsaW5rIHJlZ2lzdGVyfSBkZWNvcmF0b3IuXG4gKlxuICogRXhhbXBsZTpcbiAqIGBgYHRzXG4gKiBjbGFzcyB7XG4gKiAgICAgXFxAcHJvcGVydHkoU3RyaW5nKSBteVByb3AgPSBcIlwiXG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb3BlcnR5PFQ+KHR5cGVEZWNsYXJhdGlvbjogUHJvcGVydHlUeXBlRGVjbGFyYXRpb248VD4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKFxuICAgICAgICBfOiB2b2lkLFxuICAgICAgICBjdHg6IFByb3BlcnR5Q29udGV4dDxUPixcbiAgICAgICAgb3B0aW9ucz86IHsgbWV0YU9ubHk6IHRydWUgfSxcbiAgICApOiAodGhpczogR09iaiwgaW5pdDogVCkgPT4gYW55IHtcbiAgICAgICAgY29uc3QgZmllbGROYW1lID0gYXNzZXJ0RmllbGQoY3R4KVxuICAgICAgICBjb25zdCBrZXkgPSBrZWJhYmlmeShmaWVsZE5hbWUpXG4gICAgICAgIGNvbnN0IG1ldGE6IFBhcnRpYWw8TWV0YT4gPSBjdHgubWV0YWRhdGEhXG5cbiAgICAgICAgbWV0YS5wcm9wZXJ0aWVzID8/PSB7fVxuICAgICAgICBtZXRhLnByb3BlcnRpZXNbZmllbGROYW1lXSA9IHsgZmxhZ3M6IFBhcmFtRmxhZ3MuUkVBRFdSSVRFLCB0eXBlOiB0eXBlRGVjbGFyYXRpb24gfVxuXG4gICAgICAgIGN0eC5hZGRJbml0aWFsaXplcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eUdldHRlcih0aGlzLCBmaWVsZE5hbWUgYXMgRXh0cmFjdDxrZXlvZiBHT2JqLCBzdHJpbmc+KVxuXG4gICAgICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLm1ldGFPbmx5KSByZXR1cm5cblxuICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkodGhpcywgZmllbGROYW1lLCB7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNldCh2OiBUKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzW3ByaXZdW2tleV0gIT09IHYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbcHJpdl1ba2V5XSA9IHZcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5KGtleSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0KCk6IFQge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1twcml2XVtrZXldXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0gc2F0aXNmaWVzIFRoaXNUeXBlPEdPYmpQcml2YXRlPilcbiAgICAgICAgfSlcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGluaXQ6IFQpIHtcbiAgICAgICAgICAgIGNvbnN0IGRpY3QgPSAoKHRoaXMgYXMgR09ialByaXZhdGUpW3ByaXZdID8/PSB7fSlcbiAgICAgICAgICAgIGRpY3Rba2V5XSA9IGluaXRcbiAgICAgICAgICAgIHJldHVybiBpbml0XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogRGVmaW5lcyBhIHJlYWQtb25seSBwcm9wZXJ0eSB0byBiZSByZWdpc3RlcmVkIHdoZW4gdXNpbmcgdGhlIHtAbGluayByZWdpc3Rlcn0gZGVjb3JhdG9yLlxuICogSWYgdGhlIGdldHRlciBoYXMgYSBzZXR0ZXIgcGFpciBkZWNvcmF0ZWQgd2l0aCB0aGUge0BsaW5rIHNldHRlcn0gZGVjb3JhdG9yIHRoZSBwcm9wZXJ0eSB3aWxsIGJlIHJlYWRhYmxlICphbmQqIHdyaXRlYWJsZS5cbiAqXG4gKiBFeGFtcGxlOlxuICogYGBgdHNcbiAqIGNsYXNzIHtcbiAqICAgICBcXEBzZXR0ZXIoU3RyaW5nKVxuICogICAgIHNldCBteVByb3AodmFsdWU6IHN0cmluZykge1xuICogICAgICAgICAvL1xuICogICAgIH1cbiAqXG4gKiAgICAgXFxAZ2V0dGVyKFN0cmluZylcbiAqICAgICBnZXQgbXlQcm9wKCk6IHN0cmluZyB7XG4gKiAgICAgICAgIHJldHVybiBcIlwiXG4gKiAgICAgfVxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXR0ZXI8VD4odHlwZURlY2xhcmF0aW9uOiBQcm9wZXJ0eVR5cGVEZWNsYXJhdGlvbjxUPikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZ2V0OiAodGhpczogR09iaikgPT4gYW55LCBjdHg6IEdldHRlckNvbnRleHQ8VD4pIHtcbiAgICAgICAgY29uc3QgZmllbGROYW1lID0gYXNzZXJ0RmllbGQoY3R4KVxuICAgICAgICBjb25zdCBtZXRhOiBQYXJ0aWFsPE1ldGE+ID0gY3R4Lm1ldGFkYXRhIVxuICAgICAgICBjb25zdCBwcm9wcyA9IChtZXRhLnByb3BlcnRpZXMgPz89IHt9KVxuICAgICAgICBpZiAoZmllbGROYW1lIGluIHByb3BzKSB7XG4gICAgICAgICAgICBjb25zdCB7IGZsYWdzLCB0eXBlIH0gPSBwcm9wc1tmaWVsZE5hbWVdXG4gICAgICAgICAgICBwcm9wc1tmaWVsZE5hbWVdID0geyBmbGFnczogZmxhZ3MgfCBQYXJhbUZsYWdzLlJFQURBQkxFLCB0eXBlIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb3BzW2ZpZWxkTmFtZV0gPSB7IGZsYWdzOiBQYXJhbUZsYWdzLlJFQURBQkxFLCB0eXBlOiB0eXBlRGVjbGFyYXRpb24gfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnZXRcbiAgICB9XG59XG5cbi8qKlxuICogRGVmaW5lcyBhIHdyaXRlLW9ubHkgcHJvcGVydHkgdG8gYmUgcmVnaXN0ZXJlZCB3aGVuIHVzaW5nIHRoZSB7QGxpbmsgcmVnaXN0ZXJ9IGRlY29yYXRvci5cbiAqIElmIHRoZSBzZXR0ZXIgaGFzIGEgZ2V0dGVyIHBhaXIgZGVjb3JhdGVkIHdpdGggdGhlIHtAbGluayBnZXR0ZXJ9IGRlY29yYXRvciB0aGUgcHJvcGVydHkgd2lsbCBiZSB3cml0ZWFibGUgKmFuZCogcmVhZGFibGUuXG4gKlxuICogRXhhbXBsZTpcbiAqIGBgYHRzXG4gKiBjbGFzcyB7XG4gKiAgICAgXFxAc2V0dGVyKFN0cmluZylcbiAqICAgICBzZXQgbXlQcm9wKHZhbHVlOiBzdHJpbmcpIHtcbiAqICAgICAgICAgLy9cbiAqICAgICB9XG4gKlxuICogICAgIFxcQGdldHRlcihTdHJpbmcpXG4gKiAgICAgZ2V0IG15UHJvcCgpOiBzdHJpbmcge1xuICogICAgICAgICByZXR1cm4gXCJcIlxuICogICAgIH1cbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0dGVyPFQ+KHR5cGVEZWNsYXJhdGlvbjogUHJvcGVydHlUeXBlRGVjbGFyYXRpb248VD4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNldDogKHRoaXM6IEdPYmosIHZhbHVlOiBhbnkpID0+IHZvaWQsIGN0eDogU2V0dGVyQ29udGV4dDxUPikge1xuICAgICAgICBjb25zdCBmaWVsZE5hbWUgPSBhc3NlcnRGaWVsZChjdHgpXG4gICAgICAgIGNvbnN0IG1ldGE6IFBhcnRpYWw8TWV0YT4gPSBjdHgubWV0YWRhdGEhXG4gICAgICAgIGNvbnN0IHByb3BzID0gKG1ldGEucHJvcGVydGllcyA/Pz0ge30pXG4gICAgICAgIGlmIChmaWVsZE5hbWUgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgZmxhZ3MsIHR5cGUgfSA9IHByb3BzW2ZpZWxkTmFtZV1cbiAgICAgICAgICAgIHByb3BzW2ZpZWxkTmFtZV0gPSB7IGZsYWdzOiBmbGFncyB8IFBhcmFtRmxhZ3MuV1JJVEFCTEUsIHR5cGUgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvcHNbZmllbGROYW1lXSA9IHsgZmxhZ3M6IFBhcmFtRmxhZ3MuV1JJVEFCTEUsIHR5cGU6IHR5cGVEZWNsYXJhdGlvbiB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNldFxuICAgIH1cbn1cblxudHlwZSBQYXJhbVR5cGU8UD4gPSBQIGV4dGVuZHMgeyAkZ3R5cGU6IEdUeXBlPGluZmVyIFQ+IH0gPyBUIDogUCBleHRlbmRzIEdUeXBlPGluZmVyIFQ+ID8gVCA6IG5ldmVyXG5cbnR5cGUgUGFyYW1UeXBlczxQYXJhbXM+ID0ge1xuICAgIFtLIGluIGtleW9mIFBhcmFtc106IFBhcmFtVHlwZTxQYXJhbXNbS10+XG59XG5cbi8qKlxuICogRGVmaW5lcyBhIHNpZ25hbCB0byBiZSByZWdpc3RlcmVkIHdoZW4gdXNpbmcgdGhlIHtAbGluayByZWdpc3Rlcn0gZGVjb3JhdG9yLlxuICpcbiAqIEV4YW1wbGU6XG4gKiBgYGB0c1xuICogY2xhc3Mge1xuICogICAgIFxcQHNpZ25hbChbU3RyaW5nLCBOdW1iZXJdLCBCb29sZWFuLCB7XG4gKiAgICAgICAgIGFjY3VtdWxhdG9yOiBBY2N1bXVsYXRvclR5cGUuRklSU1RfV0lOU1xuICogICAgIH0pXG4gKiAgICAgbXlTaWduYWwoc3RyOiBzdHJpbmcsIG46IG51bWJlcik6IGJvb2xlYW4ge1xuICogICAgICAgICAvLyBkZWZhdWx0IGhhbmRsZXJcbiAqICAgICAgICAgcmV0dXJuIGZhbHNlXG4gKiAgICAgfVxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaWduYWw8XG4gICAgY29uc3QgUGFyYW1zIGV4dGVuZHMgQXJyYXk8eyAkZ3R5cGU6IEdUeXBlIH0gfCBHVHlwZT4sXG4gICAgUmV0dXJuIGV4dGVuZHMgeyAkZ3R5cGU6IEdUeXBlIH0gfCBHVHlwZSxcbj4oXG4gICAgcGFyYW1zOiBQYXJhbXMsXG4gICAgcmV0dXJuVHlwZTogUmV0dXJuLFxuICAgIG9wdGlvbnM/OiBTaWduYWxPcHRpb25zLFxuKTogKFxuICAgIG1ldGhvZDogKHRoaXM6IEdPYmosIC4uLmFyZ3M6IGFueSkgPT4gUGFyYW1UeXBlPFJldHVybj4sXG4gICAgY3R4OiBTaWduYWxDb250ZXh0PHR5cGVvZiBtZXRob2Q+LFxuKSA9PiAodGhpczogR09iaiwgLi4uYXJnczogUGFyYW1UeXBlczxQYXJhbXM+KSA9PiBhbnlcblxuLyoqXG4gKiBEZWZpbmVzIGEgc2lnbmFsIHRvIGJlIHJlZ2lzdGVyZWQgd2hlbiB1c2luZyB0aGUge0BsaW5rIHJlZ2lzdGVyfSBkZWNvcmF0b3IuXG4gKlxuICogRXhhbXBsZTpcbiAqIGBgYHRzXG4gKiBjbGFzcyB7XG4gKiAgICAgXFxAc2lnbmFsKFN0cmluZywgTnVtYmVyKVxuICogICAgIG15U2lnbmFsKHN0cjogc3RyaW5nLCBuOiBudW1iZXIpOiB2b2lkIHtcbiAqICAgICAgICAgLy8gZGVmYXVsdCBoYW5kbGVyXG4gKiAgICAgfVxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaWduYWw8UGFyYW1zIGV4dGVuZHMgQXJyYXk8eyAkZ3R5cGU6IEdUeXBlIH0gfCBHVHlwZT4+KFxuICAgIC4uLnBhcmFtczogUGFyYW1zXG4pOiAoXG4gICAgbWV0aG9kOiAodGhpczogR09iamVjdC5PYmplY3QsIC4uLmFyZ3M6IGFueSkgPT4gdm9pZCxcbiAgICBjdHg6IFNpZ25hbENvbnRleHQ8dHlwZW9mIG1ldGhvZD4sXG4pID0+ICh0aGlzOiBHT2JqZWN0Lk9iamVjdCwgLi4uYXJnczogUGFyYW1UeXBlczxQYXJhbXM+KSA9PiB2b2lkXG5cbmV4cG9ydCBmdW5jdGlvbiBzaWduYWw8XG4gICAgUGFyYW1zIGV4dGVuZHMgQXJyYXk8eyAkZ3R5cGU6IEdUeXBlIH0gfCBHVHlwZT4sXG4gICAgUmV0dXJuIGV4dGVuZHMgeyAkZ3R5cGU6IEdUeXBlIH0gfCBHVHlwZSxcbj4oXG4gICAgLi4uYXJnczogUGFyYW1zIHwgW3BhcmFtczogUGFyYW1zLCByZXR1cm5UeXBlPzogUmV0dXJuLCBvcHRpb25zPzogU2lnbmFsT3B0aW9uc11cbik6IChcbiAgICBtZXRob2Q6ICh0aGlzOiBHT2JqLCAuLi5hcmdzOiBQYXJhbVR5cGVzPFBhcmFtcz4pID0+IFBhcmFtVHlwZTxSZXR1cm4+IHwgdm9pZCxcbiAgICBjdHg6IFNpZ25hbENvbnRleHQ8dHlwZW9mIG1ldGhvZD4sXG4pID0+IHR5cGVvZiBtZXRob2Qge1xuICAgIHJldHVybiBmdW5jdGlvbiAobWV0aG9kLCBjdHgpIHtcbiAgICAgICAgaWYgKGN0eC5wcml2YXRlKSB0aHJvdyBFcnJvcihcInByaXZhdGUgZmllbGRzIGFyZSBub3Qgc3VwcG9ydGVkXCIpXG4gICAgICAgIGlmIChjdHguc3RhdGljKSB0aHJvdyBFcnJvcihcInN0YXRpYyBmaWVsZHMgYXJlIG5vdCBzdXBwb3J0ZWRcIilcblxuICAgICAgICBpZiAodHlwZW9mIGN0eC5uYW1lICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIm9ubHkgc3RyaW5ncyBjYW4gYmUgZ29iamVjdCBzaWduYWxzXCIpXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzaWduYWxOYW1lID0ga2ViYWJpZnkoY3R4Lm5hbWUpXG4gICAgICAgIGNvbnN0IG1ldGE6IFBhcnRpYWw8TWV0YT4gPSBjdHgubWV0YWRhdGEhXG4gICAgICAgIGNvbnN0IHNpZ25hbHMgPSAobWV0YS5zaWduYWxzID8/PSB7fSlcblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhcmdzWzBdKSkge1xuICAgICAgICAgICAgY29uc3QgW3BhcmFtcywgcmV0dXJuVHlwZSwgb3B0aW9uc10gPSBhcmdzIGFzIFtcbiAgICAgICAgICAgICAgICBwYXJhbXM6IFBhcmFtcyxcbiAgICAgICAgICAgICAgICByZXR1cm5UeXBlPzogUmV0dXJuLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM/OiBTaWduYWxPcHRpb25zLFxuICAgICAgICAgICAgXVxuXG4gICAgICAgICAgICBzaWduYWxzW3NpZ25hbE5hbWVdID0ge1xuICAgICAgICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBvcHRpb25zPy5kZWZhdWx0ID8/IHRydWUsXG4gICAgICAgICAgICAgICAgcGFyYW1fdHlwZXM6IHBhcmFtcy5tYXAoKGkpID0+IChcIiRndHlwZVwiIGluIGkgPyBpLiRndHlwZSA6IGkpKSxcbiAgICAgICAgICAgICAgICAuLi4ocmV0dXJuVHlwZSAmJiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybl90eXBlOiBcIiRndHlwZVwiIGluIHJldHVyblR5cGUgPyByZXR1cm5UeXBlLiRndHlwZSA6IHJldHVyblR5cGUsXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgLi4uKG9wdGlvbnM/LmZsYWdzICYmIHtcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3M6IG9wdGlvbnMuZmxhZ3MsXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgLi4uKHR5cGVvZiBvcHRpb25zPy5hY2N1bXVsYXRvciA9PT0gXCJudW1iZXJcIiAmJiB7XG4gICAgICAgICAgICAgICAgICAgIGFjY3VtdWxhdG9yOiBvcHRpb25zLmFjY3VtdWxhdG9yLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gYXJncyBhcyBQYXJhbXNcbiAgICAgICAgICAgIHNpZ25hbHNbc2lnbmFsTmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgcGFyYW1fdHlwZXM6IHBhcmFtcy5tYXAoKGkpID0+IChcIiRndHlwZVwiIGluIGkgPyBpLiRndHlwZSA6IGkpKSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoLi4ucGFyYW1zKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbWl0KHNpZ25hbE5hbWUsIC4uLnBhcmFtcykgYXMgUGFyYW1UeXBlPFJldHVybj5cbiAgICAgICAgfVxuICAgIH1cbn1cblxuY29uc3QgTUFYSU5UID0gMiAqKiAzMSAtIDFcbmNvbnN0IE1JTklOVCA9IC0oMiAqKiAzMSlcbmNvbnN0IE1BWFVJTlQgPSAyICoqIDMyIC0gMVxuY29uc3QgTUFYRkxPQVQgPSAzLjQwMjgyMzVlMzhcbmNvbnN0IE1JTkZMT0FUID0gLTMuNDAyODIzNWUzOFxuY29uc3QgTUlOSU5UNjQgPSBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUlxuY29uc3QgTUFYSU5UNjQgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxuXG5mdW5jdGlvbiBwc3BlY0Zyb21HVHlwZSh0eXBlOiBHVHlwZTx1bmtub3duPiwgbmFtZTogc3RyaW5nLCBmbGFnczogUGFyYW1GbGFncykge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIEdPYmplY3QuVFlQRV9CT09MRUFOOlxuICAgICAgICAgICAgcmV0dXJuIFBhcmFtU3BlYy5ib29sZWFuKG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzLCBmYWxzZSlcbiAgICAgICAgY2FzZSBHT2JqZWN0LlRZUEVfU1RSSU5HOlxuICAgICAgICAgICAgcmV0dXJuIFBhcmFtU3BlYy5zdHJpbmcobmFtZSwgXCJcIiwgXCJcIiwgZmxhZ3MsIFwiXCIpXG4gICAgICAgIGNhc2UgR09iamVjdC5UWVBFX0lOVDpcbiAgICAgICAgICAgIHJldHVybiBQYXJhbVNwZWMuaW50KG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzLCBNSU5JTlQsIE1BWElOVCwgMClcbiAgICAgICAgY2FzZSBHT2JqZWN0LlRZUEVfVUlOVDpcbiAgICAgICAgICAgIHJldHVybiBQYXJhbVNwZWMudWludChuYW1lLCBcIlwiLCBcIlwiLCBmbGFncywgMCwgTUFYVUlOVCwgMClcbiAgICAgICAgY2FzZSBHT2JqZWN0LlRZUEVfSU5UNjQ6XG4gICAgICAgICAgICByZXR1cm4gUGFyYW1TcGVjLmludDY0KG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzLCBNSU5JTlQ2NCwgTUFYSU5UNjQsIDApXG4gICAgICAgIGNhc2UgR09iamVjdC5UWVBFX1VJTlQ2NDpcbiAgICAgICAgICAgIHJldHVybiBQYXJhbVNwZWMudWludDY0KG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzLCAwLCBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiwgMClcbiAgICAgICAgY2FzZSBHT2JqZWN0LlRZUEVfRkxPQVQ6XG4gICAgICAgICAgICByZXR1cm4gUGFyYW1TcGVjLmZsb2F0KG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzLCBNSU5GTE9BVCwgTUFYRkxPQVQsIDApXG4gICAgICAgIGNhc2UgR09iamVjdC5UWVBFX0RPVUJMRTpcbiAgICAgICAgICAgIHJldHVybiBQYXJhbVNwZWMuZG91YmxlKG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzLCBOdW1iZXIuTUlOX1ZBTFVFLCBOdW1iZXIuTUlOX1ZBTFVFLCAwKVxuICAgICAgICBjYXNlIEdPYmplY3QuVFlQRV9KU09CSkVDVDpcbiAgICAgICAgICAgIHJldHVybiBQYXJhbVNwZWMuanNvYmplY3QobmFtZSwgXCJcIiwgXCJcIiwgZmxhZ3MpXG4gICAgICAgIGNhc2UgR09iamVjdC5UWVBFX1ZBUklBTlQ6XG4gICAgICAgICAgICByZXR1cm4gUGFyYW1TcGVjLm9iamVjdChuYW1lLCBcIlwiLCBcIlwiLCBmbGFncyBhcyBhbnksIEdMaWIuVmFyaWFudClcblxuICAgICAgICBjYXNlIEdPYmplY3QuVFlQRV9FTlVNOlxuICAgICAgICBjYXNlIEdPYmplY3QuVFlQRV9JTlRFUkZBQ0U6XG4gICAgICAgIGNhc2UgR09iamVjdC5UWVBFX0JPWEVEOlxuICAgICAgICBjYXNlIEdPYmplY3QuVFlQRV9QT0lOVEVSOlxuICAgICAgICBjYXNlIEdPYmplY3QuVFlQRV9QQVJBTTpcbiAgICAgICAgY2FzZSBHT2JqZWN0LnR5cGVfZnJvbV9uYW1lKFwiR1R5cGVcIik6XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgY2Fubm90IGd1ZXNzIFBhcmFtU3BlYyBmcm9tIEdUeXBlIFwiJHt0eXBlfVwiYClcbiAgICAgICAgY2FzZSBHT2JqZWN0LlRZUEVfT0JKRUNUOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIFBhcmFtU3BlYy5vYmplY3QobmFtZSwgXCJcIiwgXCJcIiwgZmxhZ3MgYXMgYW55LCB0eXBlKVxuICAgIH1cbn1cblxuZnVuY3Rpb24gcHNwZWMobmFtZTogc3RyaW5nLCBmbGFnczogUGFyYW1GbGFncywgZGVjbGFyYXRpb246IFByb3BlcnR5VHlwZURlY2xhcmF0aW9uPHVua25vd24+KSB7XG4gICAgaWYgKGRlY2xhcmF0aW9uIGluc3RhbmNlb2YgUGFyYW1TcGVjKSByZXR1cm4gZGVjbGFyYXRpb25cblxuICAgIGlmIChkZWNsYXJhdGlvbiA9PT0gT2JqZWN0IHx8IGRlY2xhcmF0aW9uID09PSBGdW5jdGlvbiB8fCBkZWNsYXJhdGlvbiA9PT0gQXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIFBhcmFtU3BlYy5qc29iamVjdChuYW1lLCBcIlwiLCBcIlwiLCBmbGFncylcbiAgICB9XG5cbiAgICBpZiAoZGVjbGFyYXRpb24gPT09IFN0cmluZykge1xuICAgICAgICByZXR1cm4gUGFyYW1TcGVjLnN0cmluZyhuYW1lLCBcIlwiLCBcIlwiLCBmbGFncywgXCJcIilcbiAgICB9XG5cbiAgICBpZiAoZGVjbGFyYXRpb24gPT09IE51bWJlcikge1xuICAgICAgICByZXR1cm4gUGFyYW1TcGVjLmRvdWJsZShuYW1lLCBcIlwiLCBcIlwiLCBmbGFncywgLU51bWJlci5NQVhfVkFMVUUsIE51bWJlci5NQVhfVkFMVUUsIDApXG4gICAgfVxuXG4gICAgaWYgKGRlY2xhcmF0aW9uID09PSBCb29sZWFuKSB7XG4gICAgICAgIHJldHVybiBQYXJhbVNwZWMuYm9vbGVhbihuYW1lLCBcIlwiLCBcIlwiLCBmbGFncywgZmFsc2UpXG4gICAgfVxuXG4gICAgaWYgKFwiJGd0eXBlXCIgaW4gZGVjbGFyYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHBzcGVjRnJvbUdUeXBlKGRlY2xhcmF0aW9uLiRndHlwZSwgbmFtZSwgZmxhZ3MpXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBkZWNsYXJhdGlvbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBkZWNsYXJhdGlvbihuYW1lLCBmbGFncylcbiAgICB9XG5cbiAgICB0aHJvdyBFcnJvcihcImludmFsaWQgUHJvcGVydHlUeXBlRGVjbGFyYXRpb25cIilcbn1cblxudHlwZSBNZXRhSW5mbyA9IEdPYmplY3QuTWV0YUluZm88bmV2ZXIsIEFycmF5PHsgJGd0eXBlOiBHVHlwZTx1bmtub3duPiB9PiwgbmV2ZXI+XG5cbi8qKlxuICogUmVwbGFjZW1lbnQgZm9yIHtAbGluayBHT2JqZWN0LnJlZ2lzdGVyQ2xhc3N9XG4gKiBUaGlzIGRlY29yYXRvciBjb25zdW1lcyBtZXRhZGF0YSBuZWVkZWQgdG8gcmVnaXN0ZXIgdHlwZXMgd2hlcmUgdGhlIHByb3ZpZGVkIGRlY29yYXRvcnMgYXJlIHVzZWQ6XG4gKiAtIHtAbGluayBzaWduYWx9XG4gKiAtIHtAbGluayBwcm9wZXJ0eX1cbiAqIC0ge0BsaW5rIGdldHRlcn1cbiAqIC0ge0BsaW5rIHNldHRlcn1cbiAqXG4gKiBFeGFtcGxlOlxuICogYGBgdHNcbiAqIFxcQHJlZ2lzdGVyKHsgR1R5cGVOYW1lOiBcIk15Q2xhc3NcIiB9KVxuICogY2xhc3MgTXlDbGFzcyBleHRlbmRzIEdPYmplY3QuT2JqZWN0IHsgfVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlcjxDbHMgZXh0ZW5kcyB7IG5ldyAoLi4uYXJnczogYW55KTogR09iaiB9PihvcHRpb25zOiBNZXRhSW5mbyA9IHt9KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChjbHM6IENscywgY3R4OiBDbGFzc0RlY29yYXRvckNvbnRleHQ8Q2xzPikge1xuICAgICAgICBjb25zdCB0ID0gb3B0aW9ucy5UZW1wbGF0ZVxuXG4gICAgICAgIGlmICh0eXBlb2YgdCA9PT0gXCJzdHJpbmdcIiAmJiAhdC5zdGFydHNXaXRoKFwicmVzb3VyY2U6Ly9cIikgJiYgIXQuc3RhcnRzV2l0aChcImZpbGU6Ly9cIikpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuVGVtcGxhdGUgPSBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUodClcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1ldGEgPSBjdHgubWV0YWRhdGEhIGFzIE1ldGFcblxuICAgICAgICBjb25zdCBwcm9wczogUmVjb3JkPHN0cmluZywgUGFyYW1TcGVjPHVua25vd24+PiA9IGZyb21FbnRyaWVzKFxuICAgICAgICAgICAgZW50cmllcyhtZXRhLnByb3BlcnRpZXMgPz8ge30pLm1hcCgoW2ZpZWxkTmFtZSwgeyBmbGFncywgdHlwZSB9XSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGtlYmFiaWZ5KGZpZWxkTmFtZSlcbiAgICAgICAgICAgICAgICBjb25zdCBzcGVjID0gcHNwZWMoa2V5LCBmbGFncywgdHlwZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gW2tleSwgc3BlY11cbiAgICAgICAgICAgIH0pLFxuICAgICAgICApXG5cbiAgICAgICAgY29uc3Qgc2lnbmFscyA9IGZyb21FbnRyaWVzKFxuICAgICAgICAgICAgZW50cmllcyhtZXRhLnNpZ25hbHMgPz8ge30pLm1hcCgoW3NpZ25hbE5hbWUsIHsgZGVmYXVsdDogZGVmLCBtZXRob2QsIC4uLnNpZ25hbCB9XSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChkZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkoY2xzLnByb3RvdHlwZSwgYG9uXyR7c2lnbmFsTmFtZS5yZXBsYWNlQWxsKFwiLVwiLCBcIl9cIil9YCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtzaWduYWxOYW1lLCBzaWduYWxdXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgKVxuXG4gICAgICAgIGRlbGV0ZSBtZXRhLnByb3BlcnRpZXNcbiAgICAgICAgZGVsZXRlIG1ldGEuc2lnbmFsc1xuXG4gICAgICAgIHJlZ2lzdGVyQ2xhc3MoeyAuLi5vcHRpb25zLCBQcm9wZXJ0aWVzOiBwcm9wcywgU2lnbmFsczogc2lnbmFscyB9LCBjbHMpXG4gICAgfVxufVxuXG4vKipcbiAqIEBleHBlcmltZW50YWxcbiAqIEFzc2VydHMgYSBndHlwZSBpbiBjYXNlcyB3aGVyZSB0aGUgdHlwZSBpcyB0b28gbG9vc2Uvc3RyaWN0LlxuICpcbiAqIEV4YW1wbGU6XG4gKiBgYGB0c1xuICogdHlwZSBUdXBsZSA9IFtudW1iZXIsIG51bWJlcl1cbiAqIGNvbnN0IFR1cGxlID0gZ3R5cGU8VHVwbGU+KEFycmF5KVxuICpcbiAqIGNsYXNzIHtcbiAqICAgXFxAcHJvcGVydHkoVHVwbGUpIHZhbHVlID0gWzEsIDJdIGFzIFR1cGxlXG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGd0eXBlPEFzc2VydD4odHlwZTogR1R5cGU8YW55PiB8IHsgJGd0eXBlOiBHVHlwZTxhbnk+IH0pOiB7XG4gICAgJGd0eXBlOiBHVHlwZTxBc3NlcnQ+XG59IHtcbiAgICByZXR1cm4gXCIkZ3R5cGVcIiBpbiB0eXBlID8gdHlwZSA6IHsgJGd0eXBlOiB0eXBlIH1cbn1cblxuZGVjbGFyZSBnbG9iYWwge1xuICAgIGludGVyZmFjZSBGdW5jdGlvbkNvbnN0cnVjdG9yIHtcbiAgICAgICAgJGd0eXBlOiBHVHlwZTwoLi4uYXJnczogYW55W10pID0+IGFueT5cbiAgICB9XG5cbiAgICBpbnRlcmZhY2UgQXJyYXlDb25zdHJ1Y3RvciB7XG4gICAgICAgICRndHlwZTogR1R5cGU8YW55W10+XG4gICAgfVxuXG4gICAgaW50ZXJmYWNlIERhdGVDb25zdHJ1Y3RvciB7XG4gICAgICAgICRndHlwZTogR1R5cGU8RGF0ZT5cbiAgICB9XG5cbiAgICBpbnRlcmZhY2UgTWFwQ29uc3RydWN0b3Ige1xuICAgICAgICAkZ3R5cGU6IEdUeXBlPE1hcDxhbnksIGFueT4+XG4gICAgfVxuXG4gICAgaW50ZXJmYWNlIFNldENvbnN0cnVjdG9yIHtcbiAgICAgICAgJGd0eXBlOiBHVHlwZTxTZXQ8YW55Pj5cbiAgICB9XG59XG5cbkZ1bmN0aW9uLiRndHlwZSA9IE9iamVjdC4kZ3R5cGUgYXMgRnVuY3Rpb25Db25zdHJ1Y3RvcltcIiRndHlwZVwiXVxuQXJyYXkuJGd0eXBlID0gT2JqZWN0LiRndHlwZSBhcyBBcnJheUNvbnN0cnVjdG9yW1wiJGd0eXBlXCJdXG5EYXRlLiRndHlwZSA9IE9iamVjdC4kZ3R5cGUgYXMgRGF0ZUNvbnN0cnVjdG9yW1wiJGd0eXBlXCJdXG5NYXAuJGd0eXBlID0gT2JqZWN0LiRndHlwZSBhcyBNYXBDb25zdHJ1Y3RvcltcIiRndHlwZVwiXVxuU2V0LiRndHlwZSA9IE9iamVjdC4kZ3R5cGUgYXMgU2V0Q29uc3RydWN0b3JbXCIkZ3R5cGVcIl1cbiIsICJpbXBvcnQgdHlwZSBHT2JqZWN0IGZyb20gXCJnaTovL0dPYmplY3RcIlxuXG5leHBvcnQgZnVuY3Rpb24ga2ViYWJpZnkoc3RyOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyXG4gICAgICAgIC5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCBcIiQxLSQyXCIpXG4gICAgICAgIC5yZXBsYWNlQWxsKFwiX1wiLCBcIi1cIilcbiAgICAgICAgLnRvTG93ZXJDYXNlKClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNuYWtlaWZ5KHN0cjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0clxuICAgICAgICAucmVwbGFjZSgvKFthLXpdKShbQS1aXSkvZywgXCIkMS0kMlwiKVxuICAgICAgICAucmVwbGFjZUFsbChcIi1cIiwgXCJfXCIpXG4gICAgICAgIC50b0xvd2VyQ2FzZSgpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYW1lbGlmeShzdHI6IHN0cmluZykge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvWy1fXSguKS9nLCAoXywgY2hhcikgPT4gY2hhci50b1VwcGVyQ2FzZSgpKVxufVxuXG5leHBvcnQgdHlwZSBQYXNjYWxpZnk8Uz4gPSBTIGV4dGVuZHMgYCR7aW5mZXIgSGVhZH0ke1wiLVwiIHwgXCJfXCJ9JHtpbmZlciBUYWlsfWBcbiAgICA/IGAke0NhcGl0YWxpemU8SGVhZD59JHtQYXNjYWxpZnk8VGFpbD59YFxuICAgIDogUyBleHRlbmRzIHN0cmluZ1xuICAgICAgPyBDYXBpdGFsaXplPFM+XG4gICAgICA6IG5ldmVyXG5cbmV4cG9ydCB0eXBlIFhtbE5vZGUgPSB7XG4gICAgbmFtZTogc3RyaW5nXG4gICAgYXR0cmlidXRlcz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz5cbiAgICBjaGlsZHJlbj86IEFycmF5PFhtbE5vZGU+XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB4bWwoeyBuYW1lLCBhdHRyaWJ1dGVzLCBjaGlsZHJlbiB9OiBYbWxOb2RlKSB7XG4gICAgbGV0IGJ1aWxkZXIgPSBgPCR7bmFtZX1gXG5cbiAgICBjb25zdCBhdHRycyA9IE9iamVjdC5lbnRyaWVzKGF0dHJpYnV0ZXMgPz8gW10pXG5cbiAgICBpZiAoYXR0cnMubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBhdHRycykge1xuICAgICAgICAgICAgYnVpbGRlciArPSBgICR7a2V5fT1cIiR7dmFsdWV9XCJgXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2hpbGRyZW4gJiYgY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICBidWlsZGVyICs9IFwiPlwiXG4gICAgICAgIGZvciAoY29uc3Qgbm9kZSBvZiBjaGlsZHJlbikge1xuICAgICAgICAgICAgYnVpbGRlciArPSB4bWwobm9kZSlcbiAgICAgICAgfVxuICAgICAgICBidWlsZGVyICs9IGA8LyR7bmFtZX0+YFxuICAgIH0gZWxzZSB7XG4gICAgICAgIGJ1aWxkZXIgKz0gXCIgLz5cIlxuICAgIH1cblxuICAgIHJldHVybiBidWlsZGVyXG59XG5cbi8vIEJpbmRpbmdzIHdvcmsgb3ZlciBwcm9wZXJ0aWVzIGluIGtlYmFiLWNhc2UgYmVjYXVzZSB0aGF0cyB0aGUgY29udmVudGlvbiBvZiBnb2JqZWN0XG4vLyBob3dldmVyIGluIGpzIGl0cyBlaXRoZXIgc25ha2VfY2FzZSBvciBjYW1lbENhc2Vcbi8vIGFsc28gb24gREJ1cyBpbnRlcmZhY2VzIGl0cyBQYXNjYWxDYXNlIGJ5IGNvbnZlbnRpb25cbi8vIHNvIGFzIGEgd29ya2Fyb3VuZCB3ZSB1c2UgZ2V0X3Byb3BlcnR5X25hbWUgYW5kIG9ubHkgdXNlIHRoZSBwcm9wZXJ0eSBmaWVsZCBhcyBhIGZhbGxiYWNrXG5leHBvcnQgZnVuY3Rpb24gZGVmaW5lUHJvcGVydHlHZXR0ZXI8VCBleHRlbmRzIG9iamVjdD4ob2JqZWN0OiBULCBwcm9wOiBFeHRyYWN0PGtleW9mIFQsIHN0cmluZz4pIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCBgZ2V0XyR7a2ViYWJpZnkocHJvcCkucmVwbGFjZUFsbChcIi1cIiwgXCJfXCIpfWAsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6ICgpID0+IG9iamVjdFtwcm9wXSxcbiAgICB9KVxufVxuXG4vLyBhdHRlbXB0IHNldHRpbmcgYSBwcm9wZXJ0eSBvZiBHT2JqZWN0Lk9iamVjdFxuZXhwb3J0IGZ1bmN0aW9uIHNldChvYmo6IEdPYmplY3QuT2JqZWN0LCBwcm9wOiBzdHJpbmcsIHZhbHVlOiBhbnkpIHtcbiAgICBjb25zdCBrZXkgPSBzbmFrZWlmeShwcm9wKVxuICAgIGNvbnN0IGdldHRlciA9IGBnZXRfJHtrZXl9YCBhcyBrZXlvZiB0eXBlb2Ygb2JqXG4gICAgY29uc3Qgc2V0dGVyID0gYHNldF8ke2tleX1gIGFzIGtleW9mIHR5cGVvZiBvYmpcblxuICAgIGxldCBjdXJyZW50OiB1bmtub3duXG5cbiAgICBpZiAoZ2V0dGVyIGluIG9iaiAmJiB0eXBlb2Ygb2JqW2dldHRlcl0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjdXJyZW50ID0gKG9ialtnZXR0ZXJdIGFzICgpID0+IHVua25vd24pKClcbiAgICB9IGVsc2Uge1xuICAgICAgICBjdXJyZW50ID0gb2JqW3Byb3AgYXMga2V5b2YgdHlwZW9mIG9ial1cbiAgICB9XG5cbiAgICBpZiAoY3VycmVudCAhPT0gdmFsdWUpIHtcbiAgICAgICAgaWYgKHNldHRlciBpbiBvYmogJiYgdHlwZW9mIG9ialtzZXR0ZXJdID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIDsob2JqW3NldHRlcl0gYXMgKHY6IGFueSkgPT4gdm9pZCkodmFsdWUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKG9iaiwgeyBbcHJvcF06IHZhbHVlIH0pXG4gICAgICAgIH1cbiAgICB9XG59XG4iLCAiaW1wb3J0IFwiLi4vb3ZlcnJpZGVzLmpzXCJcbmltcG9ydCBHT2JqZWN0LCB7IHJlZ2lzdGVyLCBzaWduYWwsIHNldHRlciB9IGZyb20gXCJnbmltL2dvYmplY3RcIlxuaW1wb3J0IEdMaWIgZnJvbSBcImdpOi8vR0xpYj92ZXJzaW9uPTIuMFwiXG5pbXBvcnQgR3RrIGZyb20gXCJnaTovL0d0az92ZXJzaW9uPTQuMFwiXG5pbXBvcnQgR2RrIGZyb20gXCJnaTovL0dkaz92ZXJzaW9uPTQuMFwiXG5pbXBvcnQgR2lvIGZyb20gXCJnaTovL0dpbz92ZXJzaW9uPTIuMFwiXG5pbXBvcnQgeyBnZXR0ZXIgfSBmcm9tIFwiZ25pbS9nb2JqZWN0XCJcbmltcG9ydCB7IEFwcERCdXMgfSBmcm9tIFwiLi4vYXBwL2RidXMuanNcIlxuaW1wb3J0IHsgc2V0Q29uc29sZUxvZ0RvbWFpbiB9IGZyb20gXCJjb25zb2xlXCJcbmltcG9ydCB7IGV4aXQsIHByb2dyYW1BcmdzIH0gZnJvbSBcInN5c3RlbVwiXG5pbXBvcnQgeyBjcmVhdGVSb290IH0gZnJvbSBcImduaW1cIlxuXG5HdGsuaW5pdCgpXG5cbi8vIHN0b3AgdGhpcyBmcm9tIGxlYWtpbmcgaW50byBzdWJwcm9jZXNzZXNcbi8vIGFuZCBnaW8gbGF1bmNoIGludm9jYXRpb25zXG5HTGliLnVuc2V0ZW52KFwiTERfUFJFTE9BRFwiKVxuXG4vLyB1c2VycyBtaWdodCB3YW50IHRvIHVzZSBBZHdhaXRhIGluIHdoaWNoIGNhc2UgaXQgaGFzIHRvIGJlIGluaXRpYWxpemVkXG4vLyBpdCBtaWdodCBiZSBjb21tb24gcGl0ZmFsbCB0byBmb3JnZXQgaXQgYmVjYXVzZSBgQXBwYCBpcyBub3QgYEFkdy5BcHBsaWNhdGlvbmBcbmF3YWl0IGltcG9ydChcImdpOi8vQWR3P3ZlcnNpb249MVwiKS50aGVuKCh7IGRlZmF1bHQ6IEFkdyB9KSA9PiBBZHcuaW5pdCgpKS5jYXRjaCgoKSA9PiB2b2lkIDApXG5cbnR5cGUgU3RhcnRDb25maWcgPSBQYXJ0aWFsPHtcbiAgICBpbnN0YW5jZU5hbWU6IHN0cmluZ1xuICAgIGNzczogc3RyaW5nXG4gICAgaWNvbnM6IHN0cmluZ1xuICAgIGd0a1RoZW1lOiBzdHJpbmdcbiAgICBpY29uVGhlbWU6IHN0cmluZ1xuICAgIGN1cnNvclRoZW1lOiBzdHJpbmdcbiAgICBtYWluKC4uLmFyZ3Y6IHN0cmluZ1tdKTogdm9pZFxuICAgIHJlcXVlc3RIYW5kbGVyKGFyZ3Y6IHN0cmluZ1tdLCByZXM6IChyZXNwb25zZTogYW55KSA9PiB2b2lkKTogdm9pZFxufT5cblxuaW50ZXJmYWNlIEFwcFNpZ25hbHMgZXh0ZW5kcyBHdGsuQXBwbGljYXRpb24uU2lnbmFsU2lnbmF0dXJlcyB7XG4gICAgXCJyZXF1ZXN0XCI6IEFwcFtcInJlcXVlc3RcIl1cbiAgICBcIndpbmRvdy10b2dnbGVkXCI6IEFwcFtcIndpbmRvd1RvZ2dsZWRcIl1cbn1cblxuQHJlZ2lzdGVyKClcbmNsYXNzIEFwcCBleHRlbmRzIEd0ay5BcHBsaWNhdGlvbiB7XG4gICAgZGVjbGFyZSAkc2lnbmFsczogQXBwU2lnbmFsc1xuXG4gICAgI2luc3RhbmNlTmFtZSA9IFwiYWdzXCJcbiAgICAjbWFpbj86ICguLi5hcmd2OiBzdHJpbmdbXSkgPT4gdm9pZFxuICAgICNyZXF1ZXN0SGFuZGxlcnMgPSAwXG4gICAgI2RidXNTZXJ2aWNlOiBBcHBEQnVzXG4gICAgI2Nzc1Byb3ZpZGVycyA9IG5ldyBBcnJheTxHdGsuQ3NzUHJvdmlkZXI+KClcblxuICAgIGdldCAjc2V0dGluZ3MoKTogR3RrLlNldHRpbmdzIHtcbiAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSBHdGsuU2V0dGluZ3MuZ2V0X2RlZmF1bHQoKVxuICAgICAgICBpZiAoIXNldHRpbmdzKSB0aHJvdyBFcnJvcihcImNvdWxkIG5vdCBnZXQgc2V0dGluZ3NcIilcbiAgICAgICAgcmV0dXJuIHNldHRpbmdzXG4gICAgfVxuXG4gICAgZ2V0ICNkaXNwbGF5KCk6IEdkay5EaXNwbGF5IHtcbiAgICAgICAgY29uc3QgZGlzcGxheSA9IEdkay5EaXNwbGF5LmdldF9kZWZhdWx0KClcbiAgICAgICAgaWYgKCFkaXNwbGF5KSB0aHJvdyBFcnJvcihcImNvdWxkIG5vdCBnZXQgZGlzcGxheVwiKVxuICAgICAgICByZXR1cm4gZGlzcGxheVxuICAgIH1cblxuICAgIGdldCBpbnN0YW5jZU5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNpbnN0YW5jZU5hbWVcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIG1vbml0b3JzIGZyb20ge0BsaW5rIEdkay5EaXNwbGF5fS5cbiAgICAgKi9cbiAgICBnZXRfbW9uaXRvcnMoKSB7XG4gICAgICAgIGNvbnN0IG1vbnMgPSB0aGlzLiNkaXNwbGF5LmdldF9tb25pdG9ycygpIGFzIEdpby5MaXN0TW9kZWw8R2RrLk1vbml0b3I+XG4gICAgICAgIGNvbnN0IGxpc3QgPSBuZXcgQXJyYXk8R2RrLk1vbml0b3I+KClcblxuICAgICAgICBsZXQgbW9uaXRvcjogR2RrLk1vbml0b3IgfCBudWxsID0gbnVsbFxuICAgICAgICBsZXQgaSA9IDBcblxuICAgICAgICB3aGlsZSAoKG1vbml0b3IgPSBtb25zLmdldF9pdGVtKGkrKykpICE9PSBudWxsKSB7XG4gICAgICAgICAgICBsaXN0LnB1c2gobW9uaXRvcilcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsaXN0XG4gICAgfVxuXG4gICAgQHNpZ25hbChHdGsuV2luZG93KVxuICAgIHByaXZhdGUgd2luZG93VG9nZ2xlZCh3aW5kb3c6IEd0ay5XaW5kb3cpIHtcbiAgICAgICAgdm9pZCB3aW5kb3dcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIG1vbml0b3JzIGZyb20ge0BsaW5rIEdkay5EaXNwbGF5fS5cbiAgICAgKi9cbiAgICBAZ2V0dGVyKEFycmF5KVxuICAgIGdldCBtb25pdG9ycygpOiBBcnJheTxHZGsuTW9uaXRvcj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRfbW9uaXRvcnMoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdpbmRvd3MgdGhhdCBoYXMgYmVlbiBhZGRlZCB0byB0aGlzIGFwcFxuICAgICAqIHVzaW5nIHtAbGluayBHdGsuQXBwbGljYXRpb24ucHJvdG90eXBlLmFkZF93aW5kb3d9LlxuICAgICAqL1xuICAgIEBnZXR0ZXIoQXJyYXkpXG4gICAgZ2V0IHdpbmRvd3MoKTogQXJyYXk8R3RrLldpbmRvdz4ge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRfd2luZG93cygpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2hvcnRjdXQgZm9yIHtAbGluayBHdGsuU2V0dGluZ3MucHJvdG90eXBlLmd0a1RoZW1lTmFtZX1cbiAgICAgKi9cbiAgICBAc2V0dGVyKFN0cmluZylcbiAgICBzZXQgZ3RrVGhlbWUobmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuI3NldHRpbmdzLmd0a1RoZW1lTmFtZSA9IG5hbWVcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTaG9ydGN1dCBmb3Ige0BsaW5rIEd0ay5TZXR0aW5ncy5wcm90b3R5cGUuZ3RrVGhlbWVOYW1lfVxuICAgICAqL1xuICAgIEBnZXR0ZXIoU3RyaW5nKVxuICAgIGdldCBndGtUaGVtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3NldHRpbmdzLmd0a1RoZW1lTmFtZVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNob3J0Y3V0IGZvciB7QGxpbmsgR3RrLlNldHRpbmdzLnByb3RvdHlwZS5ndGtJY29uVGhlbWVOYW1lfVxuICAgICAqL1xuICAgIEBzZXR0ZXIoU3RyaW5nKVxuICAgIHNldCBpY29uVGhlbWUobmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuI3NldHRpbmdzLmd0a0ljb25UaGVtZU5hbWUgPSBuYW1lXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2hvcnRjdXQgZm9yIHtAbGluayBHdGsuU2V0dGluZ3MucHJvdG90eXBlLmd0a0ljb25UaGVtZU5hbWV9XG4gICAgICovXG4gICAgQGdldHRlcihTdHJpbmcpXG4gICAgZ2V0IGljb25UaGVtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3NldHRpbmdzLmd0a0ljb25UaGVtZU5hbWVcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTaG9ydGN1dCBmb3Ige0BsaW5rIEd0ay5TZXR0aW5ncy5wcm90b3R5cGUuZ3RrQ3Vyc29yVGhlbWVOYW1lfVxuICAgICAqL1xuICAgIEBzZXR0ZXIoU3RyaW5nKVxuICAgIHNldCBjdXJzb3JUaGVtZShuYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy4jc2V0dGluZ3MuZ3RrQ3Vyc29yVGhlbWVOYW1lID0gbmFtZVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNob3J0Y3V0IGZvciB7QGxpbmsgR3RrLlNldHRpbmdzLnByb3RvdHlwZS5ndGtDdXJzb3JUaGVtZU5hbWV9XG4gICAgICovXG4gICAgQGdldHRlcihTdHJpbmcpXG4gICAgZ2V0IGN1cnNvclRoZW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jc2V0dGluZ3MuZ3RrQ3Vyc29yVGhlbWVOYW1lXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGEgd2luZG93IGJ5IGl0cyB7QGxpbmsgR3RrLldpZGdldC5wcm90b3R5cGUubmFtZX0gdGhhdCBoYXMgYmVlbiBhZGRlZCB0byB0aGlzIGFwcFxuICAgICAqIHVzaW5nIHtAbGluayBHdGsuQXBwbGljYXRpb24ucHJvdG90eXBlLmFkZF93aW5kb3d9LlxuICAgICAqL1xuICAgIGdldF93aW5kb3cobmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndpbmRvd3MuZmluZCgodykgPT4gdy5uYW1lID09PSBuYW1lKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRvZ2dsZSB0aGUgdmlzaWJpbGl0eSBvZiBhIHdpbmRvdyBieSBpdHMge0BsaW5rIEd0ay5XaWRnZXQucHJvdG90eXBlLm5hbWV9XG4gICAgICogdGhhdCBoYXMgYmVlbiBhZGRlZCB0byB0aGlzIGFwcCB1c2luZyB7QGxpbmsgR3RrLkFwcGxpY2F0aW9uLnByb3RvdHlwZS5hZGRfd2luZG93fS5cbiAgICAgKi9cbiAgICB0b2dnbGVfd2luZG93KG5hbWU6IHN0cmluZykge1xuICAgICAgICBjb25zdCB3aW4gPSB0aGlzLmdldF93aW5kb3cobmFtZSlcbiAgICAgICAgaWYgKCF3aW4pIHRocm93IEVycm9yKGBubyB3aW5kb3cgcmVnaXN0ZXJlZCB3aXRoIG5hbWUgXCIke25hbWV9XCJgKVxuICAgICAgICB3aW4udmlzaWJsZSA9ICF3aW4udmlzaWJsZVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc2V0IHByZXZpb3VzbHkgc2V0IGNzcyBwcm92aWRlcnMgd2l0aCB7QGxpbmsgQXBwLnByb3RvdHlwZS5hcHBseV9jc3N9LlxuICAgICAqL1xuICAgIHJlc2V0X2NzcygpIHtcbiAgICAgICAgZm9yIChjb25zdCBwcm92aWRlciBvZiB0aGlzLiNjc3NQcm92aWRlcnMpIHtcbiAgICAgICAgICAgIEd0ay5TdHlsZUNvbnRleHQucmVtb3ZlX3Byb3ZpZGVyX2Zvcl9kaXNwbGF5KHRoaXMuI2Rpc3BsYXksIHByb3ZpZGVyKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGEgbmV3IHtAbGluayBHdGsuQ3NzUHJvdmlkZXJ9LlxuICAgICAqIEBwYXJhbSBzdHlsZSBDc3Mgc3RyaW5nIG9yIGEgcGF0aCB0byBhIGNzcyBmaWxlLlxuICAgICAqL1xuICAgIGFwcGx5X2NzcyhzdHlsZTogc3RyaW5nLCByZXNldCA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gbmV3IEd0ay5Dc3NQcm92aWRlcigpXG5cbiAgICAgICAgcHJvdmlkZXIuY29ubmVjdChcInBhcnNpbmctZXJyb3JcIiwgKF8sIHNlY3Rpb24sIGVycm9yKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gc2VjdGlvbi5nZXRfZmlsZSgpPy5nZXRfYmFzZW5hbWUoKSA/PyBcIlwiXG4gICAgICAgICAgICBjb25zdCBsaW5lID0gc2VjdGlvbi5nZXRfc3RhcnRfbG9jYXRpb24oKS5saW5lcyArIDFcbiAgICAgICAgICAgIGNvbnN0IGNoYXJzID0gc2VjdGlvbi5nZXRfc3RhcnRfbG9jYXRpb24oKS5saW5lX2NoYXJzICsgMVxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgQ1NTIEVycm9yICR7bmFtZX06JHtsaW5lfToke2NoYXJzfSAke2Vycm9yLm1lc3NhZ2V9YClcbiAgICAgICAgfSlcblxuICAgICAgICBpZiAocmVzZXQpIHRoaXMucmVzZXRfY3NzKClcblxuICAgICAgICBpZiAoR0xpYi5maWxlX3Rlc3Qoc3R5bGUsIEdMaWIuRmlsZVRlc3QuRVhJU1RTKSkge1xuICAgICAgICAgICAgcHJvdmlkZXIubG9hZF9mcm9tX3BhdGgoc3R5bGUpXG4gICAgICAgIH0gZWxzZSBpZiAoc3R5bGUuc3RhcnRzV2l0aChcInJlc291cmNlOi8vXCIpKSB7XG4gICAgICAgICAgICBwcm92aWRlci5sb2FkX2Zyb21fcmVzb3VyY2Uoc3R5bGUucmVwbGFjZShcInJlc291cmNlOi8vXCIsIFwiXCIpKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvdmlkZXIubG9hZF9mcm9tX3N0cmluZyhzdHlsZSlcbiAgICAgICAgfVxuXG4gICAgICAgIEd0ay5TdHlsZUNvbnRleHQuYWRkX3Byb3ZpZGVyX2Zvcl9kaXNwbGF5KFxuICAgICAgICAgICAgdGhpcy4jZGlzcGxheSxcbiAgICAgICAgICAgIHByb3ZpZGVyLFxuICAgICAgICAgICAgR3RrLlNUWUxFX1BST1ZJREVSX1BSSU9SSVRZX1VTRVIsXG4gICAgICAgIClcblxuICAgICAgICB0aGlzLiNjc3NQcm92aWRlcnMucHVzaChwcm92aWRlcilcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTaG9ydGN1dCBmb3Ige0BsaW5rIEd0ay5JY29uVGhlbWUucHJvdG90eXBlLmFkZF9zZWFyY2hfcGF0aH0uXG4gICAgICovXG4gICAgYWRkX2ljb25zKHBhdGg6IHN0cmluZykge1xuICAgICAgICBHdGsuSWNvblRoZW1lLmdldF9mb3JfZGlzcGxheSh0aGlzLiNkaXNwbGF5KS5hZGRfc2VhcmNoX3BhdGgocGF0aClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBRdWl0IGFuZCBleGl0IHRoZSBhcHBsaWNhdGlvbi5cbiAgICAgKi9cbiAgICBxdWl0KGNvZGUgPSAwKSB7XG4gICAgICAgIHRoaXMuI2RidXNTZXJ2aWNlLnN0b3AoKVxuICAgICAgICBzdXBlci5xdWl0KClcbiAgICAgICAgZXhpdChjb2RlKVxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcih7IGZsYWdzOiBHaW8uQXBwbGljYXRpb25GbGFncy5IQU5ETEVTX0NPTU1BTkRfTElORSB9KVxuXG4gICAgICAgIHRoaXMuI2RidXNTZXJ2aWNlID0gbmV3IEFwcERCdXMoe1xuICAgICAgICAgICAgdG9nZ2xlV2luZG93OiB0aGlzLnRvZ2dsZV93aW5kb3cuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIHF1aXQ6IHRoaXMucXVpdC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgcmVxdWVzdDogKGFyZ3YpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB0aGlzLnJlcXVlc3QoYXJndiwgcmVzb2x2ZSkpLFxuICAgICAgICAgICAgaW5zZWN0b3I6ICgpID0+IHtcbiAgICAgICAgICAgICAgICBHdGsuV2luZG93LnNldF9pbnRlcmFjdGl2ZV9kZWJ1Z2dpbmcodHJ1ZSlcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pXG5cbiAgICAgICAgdGhpcy4jZGlzcGxheS5nZXRfbW9uaXRvcnMoKS5jb25uZWN0KFwiaXRlbXMtY2hhbmdlZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm5vdGlmeShcIm1vbml0b3JzXCIpXG4gICAgICAgIH0pXG5cbiAgICAgICAgdGhpcy5jb25uZWN0KFwid2luZG93LWFkZGVkXCIsIChfLCB3aW5kb3cpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGlkMSA9IHdpbmRvdy5jb25uZWN0KFwibm90aWZ5Ojp2aXNpYmxlXCIsICgpID0+IHRoaXMud2luZG93VG9nZ2xlZCh3aW5kb3cpKVxuICAgICAgICAgICAgY29uc3QgaWQyID0gdGhpcy5jb25uZWN0KFwid2luZG93LXJlbW92ZWRcIiwgKF8sIHJlbW92ZWQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVtb3ZlZCA9PSB3aW5kb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmRpc2Nvbm5lY3QoaWQxKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3QoaWQyKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG5cbiAgICAgICAgdGhpcy4jc2V0dGluZ3MuY29ubmVjdChcIm5vdGlmeVwiLCAoXywgeyBuYW1lIH0pID0+IHtcbiAgICAgICAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJndGstdGhlbWUtbmFtZVwiOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGlmeShcImd0ay10aGVtZVwiKVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgXCJndGstaWNvbi10aGVtZS1uYW1lXCI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5KFwiaWNvbi10aGVtZVwiKVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgXCJndGstY3Vyc29yLXRoZW1lLW5hbWVcIjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RpZnkoXCJjdXJzb3ItdGhlbWVcIilcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIEBzaWduYWwoQXJyYXksIEZ1bmN0aW9uKVxuICAgIHByaXZhdGUgcmVxdWVzdChhcmdzOiBzdHJpbmdbXSwgcmVzcG9uc2U6IChyZXNwb25zZTogc3RyaW5nKSA9PiB2b2lkKSB7XG4gICAgICAgIGlmICh0aGlzLiNyZXF1ZXN0SGFuZGxlcnMgPT09IDApIHtcbiAgICAgICAgICAgIHJlc3BvbnNlKGBpbnN0YW5jZSBcIiR7dGhpcy5pbnN0YW5jZU5hbWV9XCIgaGFzIG5vIHJlcXVlc3QgaGFuZGxlciBpbXBsZW1lbnRlZGApXG4gICAgICAgIH1cbiAgICAgICAgdm9pZCBhcmdzXG4gICAgfVxuXG4gICAgdmZ1bmNfY29tbWFuZF9saW5lKGNtZDogR2lvLkFwcGxpY2F0aW9uQ29tbWFuZExpbmUpOiBudW1iZXIge1xuICAgICAgICBpZiAoY21kLmlzUmVtb3RlKSB7XG4gICAgICAgICAgICB0aGlzLnJlcXVlc3QoY21kLmdldF9hcmd1bWVudHMoKSwgKHN0cikgPT4ge1xuICAgICAgICAgICAgICAgIGNtZC5wcmludF9saXRlcmFsKHN0ciArIFwiXFxuXCIpXG4gICAgICAgICAgICAgICAgY21kLmRvbmUoKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaG9sZCgpXG4gICAgICAgICAgICB0aGlzLiNkYnVzU2VydmljZS5zZXJ2ZSh7XG4gICAgICAgICAgICAgICAgbmFtZTogdGhpcy5hcHBsaWNhdGlvbklkLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGNyZWF0ZVJvb3QoKGRpc3Bvc2UpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3QoXCJzaHV0ZG93blwiLCBkaXNwb3NlKVxuICAgICAgICAgICAgICAgIHRoaXMuI21haW4/LiguLi5wcm9ncmFtQXJncylcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gMFxuICAgIH1cblxuICAgIHN0YXJ0KGNvbmZpZzogU3RhcnRDb25maWcpIHtcbiAgICAgICAgY29uc3QgeyBtYWluLCByZXF1ZXN0SGFuZGxlciwgaW5zdGFuY2VOYW1lLCBjc3MsIGljb25zLCAuLi5jZmcgfSA9IGNvbmZpZ1xuXG4gICAgICAgIHRoaXMuI21haW4gPSBtYWluXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgY2ZnKVxuXG4gICAgICAgIGlmIChyZXF1ZXN0SGFuZGxlcikge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0KFwicmVxdWVzdFwiLCAoXywgYXJncywgcmVzcG9uc2UpID0+IHJlcXVlc3RIYW5kbGVyKGFyZ3MsIHJlc3BvbnNlKSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbnN0YW5jZU5hbWUpIHRoaXMuI2luc3RhbmNlTmFtZSA9IGluc3RhbmNlTmFtZVxuICAgICAgICBpZiAoY3NzKSB0aGlzLmFwcGx5X2Nzcyhjc3MsIGZhbHNlKVxuICAgICAgICBpZiAoaWNvbnMpIGFwcC5hZGRfaWNvbnMoaWNvbnMpXG5cbiAgICAgICAgdGhpcy5hcHBsaWNhdGlvbklkID0gXCJpby5Bc3RhbC5cIiArIHRoaXMuaW5zdGFuY2VOYW1lXG4gICAgICAgIHNldENvbnNvbGVMb2dEb21haW4odGhpcy5pbnN0YW5jZU5hbWUpXG4gICAgICAgIHRoaXMucnVuQXN5bmMocHJvZ3JhbUFyZ3MpXG4gICAgfVxuXG4gICAgY29ubmVjdDxTIGV4dGVuZHMga2V5b2YgQXBwU2lnbmFscz4oXG4gICAgICAgIHNpZ25hbDogUyxcbiAgICAgICAgY2FsbGJhY2s6IEdPYmplY3QuU2lnbmFsQ2FsbGJhY2s8dGhpcywgQXBwU2lnbmFsc1tTXT4sXG4gICAgKTogbnVtYmVyIHtcbiAgICAgICAgaWYgKHNpZ25hbCA9PT0gXCJyZXF1ZXN0XCIpIHRoaXMuI3JlcXVlc3RIYW5kbGVycyArPSAxXG4gICAgICAgIHJldHVybiBzdXBlci5jb25uZWN0KHNpZ25hbCwgY2FsbGJhY2spXG4gICAgfVxufVxuXG5jb25zdCBhcHAgPSBuZXcgQXBwKClcbmV4cG9ydCBkZWZhdWx0IGFwcFxuIiwgIi8qKlxuICogQSB7QGxpbmsgU2VydmljZX0gY3VycmVudGx5IG9ubHkgYWxsb3dzIGludGVyZmFjaW5nIHdpdGggYSBzaW5nbGUgaW50ZXJmYWNlIG9mIGEgcmVtb3RlIG9iamVjdC5cbiAqIEluIHRoZSBmdXR1cmUgSSB3YW50IHRvIGNvbWUgdXAgd2l0aCBhbiBBUEkgdG8gYmUgYWJsZSB0byBjcmVhdGUgU2VydmljZSBvYmplY3RzIGZvciBtdWx0aXBsZVxuICogaW50ZXJmYWNlcyBvZiBhbiBvYmplY3QgYXQgdGhlIHNhbWUgdGltZS4gRXhhbXBsZSB1c2FnZSB3b3VsZCBiZSBmb3IgZXhhbXBsZSBjb21iaW5pbmdcbiAqIFwib3JnLm1wcmlzLk1lZGlhUGxheWVyMlwiIGFuZCBcIm9yZy5tcHJpcy5NZWRpYVBsYXllcjIuUGxheWVyXCIgaW50byBhIHNpbmdsZSBvYmplY3QuXG4gKi9cbmltcG9ydCBHaW8gZnJvbSBcImdpOi8vR2lvXCJcbmltcG9ydCBHTGliIGZyb20gXCJnaTovL0dMaWJcIlxuaW1wb3J0IEdPYmplY3QgZnJvbSBcImdpOi8vR09iamVjdFwiXG5pbXBvcnQgeyBkZWZpbmVQcm9wZXJ0eUdldHRlciwga2ViYWJpZnksIHhtbCB9IGZyb20gXCIuL3V0aWwuanNcIlxuaW1wb3J0IHR5cGUgeyBEZWVwSW5mZXIgfSBmcm9tIFwiLi92YXJpYW50LmpzXCJcbmltcG9ydCB7XG4gICAgcmVnaXN0ZXIsXG4gICAgcHJvcGVydHkgYXMgZ3Byb3BlcnR5LFxuICAgIHNpZ25hbCBhcyBnc2lnbmFsLFxuICAgIGdldHRlciBhcyBnZ2V0dGVyLFxuICAgIHNldHRlciBhcyBnc2V0dGVyLFxufSBmcm9tIFwiLi9nb2JqZWN0LmpzXCJcblxuY29uc3QgREVGQVVMVF9USU1FT1VUID0gMTBfMDAwXG5cbmV4cG9ydCBjb25zdCBWYXJpYW50ID0gR0xpYi5WYXJpYW50XG5leHBvcnQgdHlwZSBWYXJpYW50PFQgZXh0ZW5kcyBzdHJpbmc+ID0gR0xpYi5WYXJpYW50PFQ+XG5cbmNvbnN0IGluZm8gPSBTeW1ib2woXCJkYnVzIGludGVyZmFjZSBpbmZvXCIpXG5jb25zdCBpbnRlcm5hbHMgPSBTeW1ib2woXCJkYnVzIGludGVyZmFjZSBpbnRlcm5hbHNcIilcbmNvbnN0IHJlbW90ZU1ldGhvZCA9IFN5bWJvbChcInByb3h5IHJlbW90ZU1ldGhvZFwiKVxuY29uc3QgcmVtb3RlTWV0aG9kQXN5bmMgPSBTeW1ib2woXCJwcm94eSByZW1vdGVNZXRob2RBc3luY1wiKVxuY29uc3QgcmVtb3RlUHJvcGVydHlTZXQgPSBTeW1ib2woXCJwcm94eSByZW1vdGVQcm9wZXJ0eVNldFwiKVxuXG50eXBlIEN0eCA9IHsgcHJpdmF0ZTogZmFsc2U7IHN0YXRpYzogZmFsc2U7IG5hbWU6IHN0cmluZyB9XG5cbi8qKlxuICogQmFzZSB0eXBlIGZvciBEQnVzIHNlcnZpY2VzIGFuZCBwcm94aWVzLiBJbnRlcmZhY2UgbmFtZSBpcyBzZXQgd2l0aFxuICogdGhlIHtAbGluayBpZmFjZX0gZGVjb3JhdG9yIHdoaWNoIGFsc28gcmVnaXN0ZXIgaXQgYXMgYSBHT2JqZWN0IHR5cGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBTZXJ2aWNlIGV4dGVuZHMgR09iamVjdC5PYmplY3Qge1xuICAgIHN0YXRpYyBbaW5mb10/OiBHaW8uREJ1c0ludGVyZmFjZUluZm9cblxuICAgIHN0YXRpYyB7XG4gICAgICAgIEdPYmplY3QucmVnaXN0ZXJDbGFzcyh0aGlzKVxuICAgIH1cblxuICAgIFtpbnRlcm5hbHNdOiB7XG4gICAgICAgIGRidXNPYmplY3Q/OiBHaW8uREJ1c0V4cG9ydGVkT2JqZWN0XG4gICAgICAgIHByb3h5PzogR2lvLkRCdXNQcm94eVxuICAgICAgICBwcml2OiBSZWNvcmQ8c3RyaW5nIHwgc3ltYm9sLCB1bmtub3duPlxuICAgICAgICBvblN0b3A6IFNldDwoKSA9PiB2b2lkPlxuICAgIH0gPSB7XG4gICAgICAgIHByaXY6IHt9LFxuICAgICAgICBvblN0b3A6IG5ldyBTZXQ8KCkgPT4gdm9pZD4oKSxcbiAgICB9XG5cbiAgICAjaW5mbzogR2lvLkRCdXNJbnRlcmZhY2VJbmZvXG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKVxuICAgICAgICBjb25zdCBzZXJ2aWNlID0gdGhpcy5jb25zdHJ1Y3RvciBhcyB1bmtub3duIGFzIHR5cGVvZiBTZXJ2aWNlXG4gICAgICAgIGlmICghc2VydmljZVtpbmZvXSkgdGhyb3cgRXJyb3IoXCJtaXNzaW5nIGludGVyZmFjZSBpbmZvXCIpXG4gICAgICAgIHRoaXMuI2luZm8gPSBzZXJ2aWNlW2luZm9dXG4gICAgfVxuXG4gICAgbm90aWZ5KHByb3BlcnR5TmFtZTogRXh0cmFjdDxrZXlvZiB0aGlzLCBzdHJpbmc+IHwgKHN0cmluZyAmIHt9KSk6IHZvaWQge1xuICAgICAgICBjb25zdCBwcm9wID0gdGhpcy4jaW5mby5sb29rdXBfcHJvcGVydHkocHJvcGVydHlOYW1lKVxuXG4gICAgICAgIGlmIChwcm9wICYmIHRoaXNbaW50ZXJuYWxzXS5kYnVzT2JqZWN0KSB7XG4gICAgICAgICAgICB0aGlzW2ludGVybmFsc10uZGJ1c09iamVjdC5lbWl0X3Byb3BlcnR5X2NoYW5nZWQoXG4gICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lLFxuICAgICAgICAgICAgICAgIG5ldyBHTGliLlZhcmlhbnQocHJvcC5zaWduYXR1cmUsIHRoaXNbcHJvcGVydHlOYW1lIGFzIGtleW9mIHRoaXNdKSxcbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuXG4gICAgICAgIHN1cGVyLm5vdGlmeShwcm9wID8ga2ViYWJpZnkocHJvcGVydHlOYW1lKSA6IHByb3BlcnR5TmFtZSlcbiAgICB9XG5cbiAgICBlbWl0KG5hbWU6IHN0cmluZywgLi4ucGFyYW1zOiB1bmtub3duW10pOiB2b2lkIHtcbiAgICAgICAgY29uc3Qgc2lnbmFsID0gdGhpcy4jaW5mby5sb29rdXBfc2lnbmFsKG5hbWUpXG5cbiAgICAgICAgaWYgKHNpZ25hbCAmJiB0aGlzW2ludGVybmFsc10uZGJ1c09iamVjdCkge1xuICAgICAgICAgICAgY29uc3Qgc2lnbmF0dXJlID0gYCgke3NpZ25hbC5hcmdzLm1hcCgoYSkgPT4gYS5zaWduYXR1cmUpLmpvaW4oXCJcIil9KWBcbiAgICAgICAgICAgIHRoaXNbaW50ZXJuYWxzXS5kYnVzT2JqZWN0LmVtaXRfc2lnbmFsKG5hbWUsIG5ldyBHTGliLlZhcmlhbnQoc2lnbmF0dXJlLCBwYXJhbXMpKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN1cGVyLmVtaXQoc2lnbmFsID8ga2ViYWJpZnkobmFtZSkgOiBuYW1lLCAuLi5wYXJhbXMpXG4gICAgfVxuXG4gICAgLy8gc2VydmVyXG4gICAgI2hhbmRsZVByb3BlcnR5R2V0KF86IEdpby5EQnVzRXhwb3J0ZWRPYmplY3QsIHByb3BlcnR5TmFtZTogRXh0cmFjdDxrZXlvZiB0aGlzLCBzdHJpbmc+KSB7XG4gICAgICAgIGNvbnN0IHByb3AgPSB0aGlzLiNpbmZvLmxvb2t1cF9wcm9wZXJ0eShwcm9wZXJ0eU5hbWUpXG5cbiAgICAgICAgaWYgKCFwcm9wKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9IGhhcyBubyBleHBvcnRlZCBwcm9wZXJ0eTogXCIke3Byb3BlcnR5TmFtZX1cImApXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXNbcHJvcGVydHlOYW1lXVxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEdMaWIuVmFyaWFudChwcm9wLnNpZ25hdHVyZSwgdmFsdWUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gc2VydmVyXG4gICAgI2hhbmRsZVByb3BlcnR5U2V0KFxuICAgICAgICBfOiBHaW8uREJ1c0V4cG9ydGVkT2JqZWN0LFxuICAgICAgICBwcm9wZXJ0eU5hbWU6IEV4dHJhY3Q8a2V5b2YgdGhpcywgc3RyaW5nPixcbiAgICAgICAgdmFsdWU6IEdMaWIuVmFyaWFudCxcbiAgICApIHtcbiAgICAgICAgY29uc3QgbmV3VmFsdWUgPSB2YWx1ZS5kZWVwVW5wYWNrKClcbiAgICAgICAgY29uc3QgcHJvcCA9IHRoaXMuI2luZm8ubG9va3VwX3Byb3BlcnR5KHByb3BlcnR5TmFtZSlcblxuICAgICAgICBpZiAoIXByb3ApIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKGAke3RoaXMuY29uc3RydWN0b3IubmFtZX0gaGFzIG5vIHByb3BlcnR5OiBcIiR7cHJvcGVydHlOYW1lfVwiYClcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzW3Byb3BlcnR5TmFtZV0gIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzW3Byb3BlcnR5TmFtZV0gPSB2YWx1ZS5kZWVwVW5wYWNrPGFueT4oKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gc2VydmVyXG4gICAgI3JldHVybkVycm9yKGVycm9yOiB1bmtub3duLCBpbnZvY2F0aW9uOiBHaW8uREJ1c01ldGhvZEludm9jYXRpb24pIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcilcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgR0xpYi5FcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGludm9jYXRpb24ucmV0dXJuX2dlcnJvcihlcnJvcilcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGludm9jYXRpb24ucmV0dXJuX2RidXNfZXJyb3IoXG4gICAgICAgICAgICAgICAgZXJyb3IubmFtZS5pbmNsdWRlcyhcIi5cIikgPyBlcnJvci5uYW1lIDogYGdqcy5KU0Vycm9yLiR7ZXJyb3IubmFtZX1gLFxuICAgICAgICAgICAgICAgIGVycm9yLm1lc3NhZ2UsXG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgaW52b2NhdGlvbi5yZXR1cm5fZGJ1c19lcnJvcihcImdqcy5EQnVzU2VydmljZS5Vbmtub3duRXJyb3JcIiwgYCR7ZXJyb3J9YClcbiAgICB9XG5cbiAgICAvLyBzZXJ2ZXJcbiAgICAjcmV0dXJuVmFsdWUodmFsdWU6IHVua25vd24sIG1ldGhvZE5hbWU6IHN0cmluZywgaW52b2NhdGlvbjogR2lvLkRCdXNNZXRob2RJbnZvY2F0aW9uKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gaW52b2NhdGlvbi5yZXR1cm5fdmFsdWUobmV3IEdMaWIuVmFyaWFudChcIigpXCIsIFtdKSlcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGFyZ3MgPSB0aGlzLiNpbmZvLmxvb2t1cF9tZXRob2QobWV0aG9kTmFtZSk/Lm91dF9hcmdzID8/IFtdXG4gICAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IGAoJHthcmdzLm1hcCgoYXJnKSA9PiBhcmcuc2lnbmF0dXJlKS5qb2luKFwiXCIpfSlgXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHRocm93IEVycm9yKFwidmFsdWUgaGFzIHRvIGJlIGEgdHVwbGVcIilcbiAgICAgICAgaW52b2NhdGlvbi5yZXR1cm5fdmFsdWUobmV3IEdMaWIuVmFyaWFudChzaWduYXR1cmUsIHZhbHVlKSlcbiAgICB9XG5cbiAgICAvLyBzZXJ2ZXJcbiAgICAjaGFuZGxlTWV0aG9kQ2FsbChcbiAgICAgICAgXzogR2lvLkRCdXNFeHBvcnRlZE9iamVjdCxcbiAgICAgICAgbWV0aG9kTmFtZTogRXh0cmFjdDxrZXlvZiB0aGlzLCBzdHJpbmc+LFxuICAgICAgICBwYXJhbWV0ZXJzOiBHTGliLlZhcmlhbnQsXG4gICAgICAgIGludm9jYXRpb246IEdpby5EQnVzTWV0aG9kSW52b2NhdGlvbixcbiAgICApOiB2b2lkIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gKHRoaXNbbWV0aG9kTmFtZV0gYXMgKC4uLmFyZ3M6IHVua25vd25bXSkgPT4gdW5rbm93bikoXG4gICAgICAgICAgICAgICAgLi4ucGFyYW1ldGVycy5kZWVwVW5wYWNrPEFycmF5PHVua25vd24+PigpLFxuICAgICAgICAgICAgKVxuXG4gICAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBHTGliLlZhcmlhbnQpIHtcbiAgICAgICAgICAgICAgICBpbnZvY2F0aW9uLnJldHVybl92YWx1ZSh2YWx1ZSlcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKHZhbHVlKSA9PiB0aGlzLiNyZXR1cm5WYWx1ZSh2YWx1ZSwgbWV0aG9kTmFtZSwgaW52b2NhdGlvbikpXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHRoaXMuI3JldHVybkVycm9yKGVycm9yLCBpbnZvY2F0aW9uKSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy4jcmV0dXJuVmFsdWUodmFsdWUsIG1ldGhvZE5hbWUsIGludm9jYXRpb24pXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLiNyZXR1cm5FcnJvcihlcnJvciwgaW52b2NhdGlvbilcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIHNlcnZlclxuICAgIGFzeW5jIHNlcnZlKHtcbiAgICAgICAgYnVzVHlwZSA9IEdpby5CdXNUeXBlLlNFU1NJT04sXG4gICAgICAgIG5hbWUgPSB0aGlzLiNpbmZvLm5hbWUsXG4gICAgICAgIG9iamVjdFBhdGggPSBcIi9cIiArIHRoaXMuI2luZm8ubmFtZS5zcGxpdChcIi5cIikuam9pbihcIi9cIiksXG4gICAgICAgIGZsYWdzID0gR2lvLkJ1c05hbWVPd25lckZsYWdzLk5PTkUsXG4gICAgICAgIHRpbWVvdXQgPSBERUZBVUxUX1RJTUVPVVQsXG4gICAgfToge1xuICAgICAgICBidXNUeXBlPzogR2lvLkJ1c1R5cGVcbiAgICAgICAgbmFtZT86IHN0cmluZ1xuICAgICAgICBvYmplY3RQYXRoPzogc3RyaW5nXG4gICAgICAgIGZsYWdzPzogR2lvLkJ1c05hbWVPd25lckZsYWdzXG4gICAgICAgIHRpbWVvdXQ/OiBudW1iZXJcbiAgICB9ID0ge30pOiBQcm9taXNlPHRoaXM+IHtcbiAgICAgICAgY29uc3QgaW1wbCA9IG5ldyBHaW8uREJ1c0V4cG9ydGVkT2JqZWN0KFxuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBtaXNzaW5nIGNvbnN0cnVjdG9yIHR5cGVcbiAgICAgICAgICAgIHsgZ19pbnRlcmZhY2VfaW5mbzogdGhpcy4jaW5mbyB9LFxuICAgICAgICApXG5cbiAgICAgICAgaW1wbC5jb25uZWN0KFwiaGFuZGxlLW1ldGhvZC1jYWxsXCIsIHRoaXMuI2hhbmRsZU1ldGhvZENhbGwuYmluZCh0aGlzKSlcbiAgICAgICAgaW1wbC5jb25uZWN0KFwiaGFuZGxlLXByb3BlcnR5LWdldFwiLCB0aGlzLiNoYW5kbGVQcm9wZXJ0eUdldC5iaW5kKHRoaXMpKVxuICAgICAgICBpbXBsLmNvbm5lY3QoXCJoYW5kbGUtcHJvcGVydHktc2V0XCIsIHRoaXMuI2hhbmRsZVByb3BlcnR5U2V0LmJpbmQodGhpcykpXG5cbiAgICAgICAgdGhpcy4jaW5mby5jYWNoZV9idWlsZCgpXG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGxldCBzb3VyY2UgPVxuICAgICAgICAgICAgICAgIHRpbWVvdXQgPiAwXG4gICAgICAgICAgICAgICAgICAgID8gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChFcnJvcihgc2VydmUgdGltZWQgb3V0YCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZSA9IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICB9LCB0aW1lb3V0KVxuICAgICAgICAgICAgICAgICAgICA6IG51bGxcblxuICAgICAgICAgICAgY29uc3QgY2xlYXIgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoc291cmNlKVxuICAgICAgICAgICAgICAgICAgICBzb3VyY2UgPSBudWxsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBidXNJZCA9IEdpby5idXNfb3duX25hbWUoXG4gICAgICAgICAgICAgICAgYnVzVHlwZSxcbiAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgIGZsYWdzLFxuICAgICAgICAgICAgICAgIChjb25uOiBHaW8uREJ1c0Nvbm5lY3Rpb24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltcGwuZXhwb3J0KGNvbm4sIG9iamVjdFBhdGgpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2ludGVybmFsc10uZGJ1c09iamVjdCA9IGltcGxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbaW50ZXJuYWxzXS5vblN0b3AuYWRkKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBHaW8uYnVzX3Vub3duX25hbWUoYnVzSWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1wbC51bmV4cG9ydCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jaW5mby5jYWNoZV9yZWxlYXNlKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpc1tpbnRlcm5hbHNdLmRidXNPYmplY3RcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodGhpcylcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2xlYXIsXG4gICAgICAgICAgICAgICAgY2xlYXIsXG4gICAgICAgICAgICApXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgLy8gcHJveHlcbiAgICAjaGFuZGxlUHJvcGVydGllc0NoYW5nZWQoXG4gICAgICAgIF86IEdpby5EQnVzUHJveHksXG4gICAgICAgIGNoYW5nZWQ6IEdMaWIuVmFyaWFudDxcImF7c3Z9XCI+LFxuICAgICAgICBpbnZhbGlkYXRlZDogc3RyaW5nW10sXG4gICAgKSB7XG4gICAgICAgIGNvbnN0IHNldCA9IG5ldyBTZXQoWy4uLk9iamVjdC5rZXlzKGNoYW5nZWQuZGVlcFVucGFjaygpKSwgLi4uaW52YWxpZGF0ZWRdKVxuICAgICAgICBmb3IgKGNvbnN0IHByb3Agb2Ygc2V0LnZhbHVlcygpKSB7XG4gICAgICAgICAgICB0aGlzLm5vdGlmeShwcm9wIGFzIEV4dHJhY3Q8a2V5b2YgdGhpcywgc3RyaW5nPilcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIHByb3h5XG4gICAgI2hhbmRsZVNpZ25hbChcbiAgICAgICAgXzogR2lvLkRCdXNQcm94eSxcbiAgICAgICAgX3NlbmRlcjogc3RyaW5nIHwgbnVsbCxcbiAgICAgICAgc2lnbmFsOiBzdHJpbmcsXG4gICAgICAgIHBhcmFtZXRlcnM6IEdMaWIuVmFyaWFudCxcbiAgICApIHtcbiAgICAgICAgdGhpcy5lbWl0KGtlYmFiaWZ5KHNpZ25hbCksIC4uLnBhcmFtZXRlcnMuZGVlcFVucGFjazxBcnJheTx1bmtub3duPj4oKSlcbiAgICB9XG5cbiAgICAvLyBwcm94eVxuICAgICNyZW1vdGVNZXRob2RQYXJhbXMoXG4gICAgICAgIG1ldGhvZE5hbWU6IHN0cmluZyxcbiAgICAgICAgYXJnczogdW5rbm93bltdLFxuICAgICk6IFBhcmFtZXRlcnM8R2lvLkRCdXNQcm94eVtcImNhbGxfc3luY1wiXT4ge1xuICAgICAgICBjb25zdCB7IHByb3h5IH0gPSB0aGlzW2ludGVybmFsc11cbiAgICAgICAgaWYgKCFwcm94eSkgdGhyb3cgRXJyb3IoXCJpbnZhbGlkIHJlbW90ZU1ldGhvZCBpbnZvY2F0aW9uOiBub3QgYSBwcm94eVwiKVxuXG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IHRoaXMuI2luZm8ubG9va3VwX21ldGhvZChtZXRob2ROYW1lKVxuICAgICAgICBpZiAoIW1ldGhvZCkgdGhyb3cgRXJyb3IoXCJtZXRob2Qgbm90IGZvdW5kXCIpXG5cbiAgICAgICAgY29uc3Qgc2lnbmF0dXJlID0gYCgke21ldGhvZC5pbl9hcmdzLm1hcCgoYSkgPT4gYS5zaWduYXR1cmUpLmpvaW4oXCJcIil9KWBcblxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgbWV0aG9kTmFtZSxcbiAgICAgICAgICAgIG5ldyBHTGliLlZhcmlhbnQoc2lnbmF0dXJlLCBhcmdzKSxcbiAgICAgICAgICAgIEdpby5EQnVzQ2FsbEZsYWdzLk5PTkUsXG4gICAgICAgICAgICBERUZBVUxUX1RJTUVPVVQsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICBdXG4gICAgfVxuXG4gICAgLy8gcHJveHlcbiAgICBbcmVtb3RlTWV0aG9kXShtZXRob2ROYW1lOiBzdHJpbmcsIGFyZ3M6IHVua25vd25bXSk6IEdMaWIuVmFyaWFudCB7XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHRoaXMuI3JlbW90ZU1ldGhvZFBhcmFtcyhtZXRob2ROYW1lLCBhcmdzKVxuICAgICAgICByZXR1cm4gdGhpc1tpbnRlcm5hbHNdLnByb3h5IS5jYWxsX3N5bmMoLi4ucGFyYW1zKVxuICAgIH1cblxuICAgIC8vIHByb3h5XG4gICAgW3JlbW90ZU1ldGhvZEFzeW5jXShtZXRob2ROYW1lOiBzdHJpbmcsIGFyZ3M6IHVua25vd25bXSk6IFByb21pc2U8R0xpYi5WYXJpYW50PiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHRoaXMuI3JlbW90ZU1ldGhvZFBhcmFtcyhtZXRob2ROYW1lLCBhcmdzKVxuICAgICAgICAgICAgICAgIHRoaXNbaW50ZXJuYWxzXS5wcm94eSEuY2FsbCguLi5wYXJhbXMsIChfLCByZXMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodGhpc1tpbnRlcm5hbHNdLnByb3h5IS5jYWxsX2ZpbmlzaChyZXMpKVxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIC8vIHByb3h5XG4gICAgW3JlbW90ZVByb3BlcnR5U2V0XShuYW1lOiBzdHJpbmcsIHZhbHVlOiB1bmtub3duKSB7XG4gICAgICAgIGNvbnN0IHByb3h5ID0gdGhpc1tpbnRlcm5hbHNdLnByb3h5IVxuICAgICAgICBjb25zdCBwcm9wID0gdGhpcy4jaW5mby5sb29rdXBfcHJvcGVydHkobmFtZSkhXG5cbiAgICAgICAgY29uc3QgdmFyaWFudCA9IG5ldyBHTGliLlZhcmlhbnQocHJvcC5zaWduYXR1cmUsIHZhbHVlKVxuICAgICAgICBwcm94eS5zZXRfY2FjaGVkX3Byb3BlcnR5KG5hbWUsIHZhcmlhbnQpXG5cbiAgICAgICAgcHJveHkuY2FsbChcbiAgICAgICAgICAgIFwib3JnLmZyZWVkZXNrdG9wLkRCdXMuUHJvcGVydGllcy5TZXRcIixcbiAgICAgICAgICAgIG5ldyBHTGliLlZhcmlhbnQoXCIoc3N2KVwiLCBbcHJveHkuZ0ludGVyZmFjZU5hbWUsIG5hbWUsIHZhcmlhbnRdKSxcbiAgICAgICAgICAgIEdpby5EQnVzQ2FsbEZsYWdzLk5PTkUsXG4gICAgICAgICAgICAtMSxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAoXywgcmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcHJveHkuY2FsbF9maW5pc2gocmVzKVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIClcbiAgICB9XG5cbiAgICAvLyBwcm94eVxuICAgIGFzeW5jIHByb3h5KHtcbiAgICAgICAgYnVzID0gR2lvLkRCdXMuc2Vzc2lvbixcbiAgICAgICAgbmFtZSA9IHRoaXMuI2luZm8ubmFtZSxcbiAgICAgICAgb2JqZWN0UGF0aCA9IFwiL1wiICsgdGhpcy4jaW5mby5uYW1lLnNwbGl0KFwiLlwiKS5qb2luKFwiL1wiKSxcbiAgICAgICAgZmxhZ3MgPSBHaW8uREJ1c1Byb3h5RmxhZ3MuTk9ORSxcbiAgICAgICAgdGltZW91dCA9IERFRkFVTFRfVElNRU9VVCxcbiAgICB9OiB7XG4gICAgICAgIGJ1cz86IEdpby5EQnVzQ29ubmVjdGlvblxuICAgICAgICBuYW1lPzogc3RyaW5nXG4gICAgICAgIG9iamVjdFBhdGg/OiBzdHJpbmdcbiAgICAgICAgZmxhZ3M/OiBHaW8uREJ1c1Byb3h5RmxhZ3NcbiAgICAgICAgdGltZW91dD86IG51bWJlclxuICAgIH0gPSB7fSk6IFByb21pc2U8dGhpcz4ge1xuICAgICAgICBjb25zdCBwcm94eSA9IG5ldyBHaW8uREJ1c1Byb3h5KHtcbiAgICAgICAgICAgIGdDb25uZWN0aW9uOiBidXMsXG4gICAgICAgICAgICBnSW50ZXJmYWNlTmFtZTogdGhpcy4jaW5mby5uYW1lLFxuICAgICAgICAgICAgZ0ludGVyZmFjZUluZm86IHRoaXMuI2luZm8sXG4gICAgICAgICAgICBnTmFtZTogbmFtZSxcbiAgICAgICAgICAgIGdGbGFnczogZmxhZ3MsXG4gICAgICAgICAgICBnT2JqZWN0UGF0aDogb2JqZWN0UGF0aCxcbiAgICAgICAgfSlcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2FuY2FsbGFibGUgPSBuZXcgR2lvLkNhbmNlbGxhYmxlKClcblxuICAgICAgICAgICAgbGV0IHNvdXJjZSA9XG4gICAgICAgICAgICAgICAgdGltZW91dCA+IDBcbiAgICAgICAgICAgICAgICAgICAgPyBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KEVycm9yKGBwcm94eSB0aW1lZCBvdXRgKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlID0gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5jYWxsYWJsZS5jYW5jZWwoKVxuICAgICAgICAgICAgICAgICAgICAgIH0sIHRpbWVvdXQpXG4gICAgICAgICAgICAgICAgICAgIDogbnVsbFxuXG4gICAgICAgICAgICBwcm94eS5pbml0X2FzeW5jKEdMaWIuUFJJT1JJVFlfREVGQVVMVCwgY2FuY2FsbGFibGUsIChfLCByZXMpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoc291cmNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlID0gbnVsbFxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcHJveHkuaW5pdF9maW5pc2gocmVzKVxuICAgICAgICAgICAgICAgICAgICB0aGlzW2ludGVybmFsc10ucHJveHkgPSBwcm94eVxuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlkcyA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3h5LmNvbm5lY3QoXCJnLXNpZ25hbFwiLCB0aGlzLiNoYW5kbGVTaWduYWwuYmluZCh0aGlzKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm94eS5jb25uZWN0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZy1wcm9wZXJ0aWVzLWNoYW5nZWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiNoYW5kbGVQcm9wZXJ0aWVzQ2hhbmdlZC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgXVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXNbaW50ZXJuYWxzXS5vblN0b3AuYWRkKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkcy5mb3JFYWNoKChpZCkgPT4gcHJveHkuZGlzY29ubmVjdChpZCkpXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpc1tpbnRlcm5hbHNdLnByb3h5XG4gICAgICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0aGlzKVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHN0b3AoKSB7XG4gICAgICAgIGNvbnN0IHsgb25TdG9wIH0gPSB0aGlzW2ludGVybmFsc11cbiAgICAgICAgZm9yIChjb25zdCBjYiBvZiBvblN0b3AudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIG9uU3RvcC5kZWxldGUoY2IpXG4gICAgICAgICAgICBjYigpXG4gICAgICAgIH1cbiAgICB9XG59XG5cbnR5cGUgSW50ZXJmYWNlTWV0YSA9IHtcbiAgICBkYnVzTWV0aG9kcz86IFJlY29yZDxcbiAgICAgICAgc3RyaW5nLFxuICAgICAgICBBcnJheTx7XG4gICAgICAgICAgICBuYW1lPzogc3RyaW5nXG4gICAgICAgICAgICB0eXBlOiBzdHJpbmdcbiAgICAgICAgICAgIGRpcmVjdGlvbjogXCJpblwiIHwgXCJvdXRcIlxuICAgICAgICB9PlxuICAgID5cbiAgICBkYnVzU2lnbmFscz86IFJlY29yZDxcbiAgICAgICAgc3RyaW5nLFxuICAgICAgICBBcnJheTx7XG4gICAgICAgICAgICBuYW1lPzogc3RyaW5nXG4gICAgICAgICAgICB0eXBlOiBzdHJpbmdcbiAgICAgICAgfT5cbiAgICA+XG4gICAgZGJ1c1Byb3BlcnRpZXM/OiBSZWNvcmQ8XG4gICAgICAgIHN0cmluZyxcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogc3RyaW5nXG4gICAgICAgICAgICB0eXBlOiBzdHJpbmdcbiAgICAgICAgICAgIHJlYWQ/OiB0cnVlXG4gICAgICAgICAgICB3cml0ZT86IHRydWVcbiAgICAgICAgfVxuICAgID5cbn1cblxuLyoqXG4gKiBSZWdpc3RlcnMgYSB7QGxpbmsgU2VydmljZX0gYXMgYSBkYnVzIGludGVyZmFjZS5cbiAqXG4gKiBAcGFyYW0gbmFtZSBJbnRlcmZhY2UgbmFtZSBvZiB0aGUgb2JqZWN0LiBGb3IgZXhhbXBsZSBcIm9yZy5nbm9tZS5TaGVsbC5TZWFyY2hQcm92aWRlcjJcIlxuICogQHBhcmFtIG9wdGlvbnMgb3B0aW9uYWwgcHJvcGVydGllcyB0byBwYXNzIHRvIHtAbGluayByZWdpc3Rlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlmYWNlKG5hbWU6IHN0cmluZywgb3B0aW9ucz86IFBhcmFtZXRlcnM8dHlwZW9mIHJlZ2lzdGVyPlswXSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoY2xzOiB7IG5ldyAoLi4uYXJnczogYW55W10pOiBTZXJ2aWNlIH0sIGN0eDogQ2xhc3NEZWNvcmF0b3JDb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSBjdHgubWV0YWRhdGFcbiAgICAgICAgaWYgKCFtZXRhKSB0aHJvdyBFcnJvcihgJHtjbHMubmFtZX0gaXMgbm90IGFuIGludGVyZmFjZWApXG5cbiAgICAgICAgY29uc3QgeyBkYnVzTWV0aG9kcyA9IHt9LCBkYnVzU2lnbmFscyA9IHt9LCBkYnVzUHJvcGVydGllcyA9IHt9IH0gPSBtZXRhIGFzIEludGVyZmFjZU1ldGFcblxuICAgICAgICBjb25zdCBpbmZvWG1sID0geG1sKHtcbiAgICAgICAgICAgIG5hbWU6IFwibm9kZVwiLFxuICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiaW50ZXJmYWNlXCIsXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHsgbmFtZSB9LFxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uT2JqZWN0LmVudHJpZXMoZGJ1c01ldGhvZHMpLm1hcCgoW25hbWUsIGFyZ3NdKSA9PiAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibWV0aG9kXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczogeyBuYW1lIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IGFyZ3MubWFwKChhcmcpID0+ICh7IG5hbWU6IFwiYXJnXCIsIGF0dHJpYnV0ZXM6IGFyZyB9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5PYmplY3QuZW50cmllcyhkYnVzU2lnbmFscykubWFwKChbbmFtZSwgYXJnc10pID0+ICh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJzaWduYWxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB7IG5hbWUgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogYXJncy5tYXAoKGFyZykgPT4gKHsgbmFtZTogXCJhcmdcIiwgYXR0cmlidXRlczogYXJnIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLk9iamVjdC52YWx1ZXMoZGJ1c1Byb3BlcnRpZXMpLm1hcCgoeyBuYW1lLCB0eXBlLCByZWFkLCB3cml0ZSB9KSA9PiAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwicHJvcGVydHlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLihuYW1lICYmIHsgbmFtZSB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzOiAocmVhZCA/IFwicmVhZFwiIDogXCJcIikgKyAod3JpdGUgPyBcIndyaXRlXCIgOiBcIlwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICB9KVxuXG4gICAgICAgIE9iamVjdC5hc3NpZ24oY2xzLCB7IFtpbmZvXTogR2lvLkRCdXNJbnRlcmZhY2VJbmZvLm5ld19mb3JfeG1sKGluZm9YbWwpIH0pXG4gICAgICAgIHJlZ2lzdGVyKG9wdGlvbnMpKGNscywgY3R4KVxuICAgIH1cbn1cblxudHlwZSBEQnVzVHlwZSA9IHN0cmluZyB8IHsgdHlwZTogc3RyaW5nOyBuYW1lOiBzdHJpbmcgfVxuXG50eXBlIEluZmVyVmFyaWFudFR5cGVzPFQgZXh0ZW5kcyBBcnJheTxEQnVzVHlwZT4+ID0ge1xuICAgIFtLIGluIGtleW9mIFRdOiBUW0tdIGV4dGVuZHMgc3RyaW5nXG4gICAgICAgID8gRGVlcEluZmVyPFRbS10+XG4gICAgICAgIDogVFtLXSBleHRlbmRzIHsgdHlwZTogaW5mZXIgUyB9XG4gICAgICAgICAgPyBTIGV4dGVuZHMgc3RyaW5nXG4gICAgICAgICAgICAgID8gRGVlcEluZmVyPFM+XG4gICAgICAgICAgICAgIDogbmV2ZXJcbiAgICAgICAgICA6IHVua25vd25cbn1cblxuZnVuY3Rpb24gaW5zdGFsbE1ldGhvZDxBcmdzIGV4dGVuZHMgQXJyYXk8REJ1c1R5cGU+PihcbiAgICBhcmdzOiBBcmdzIHwgW0FyZ3MsIEFyZ3M/XSxcbiAgICBtZXRob2Q6ICguLi5hcmdzOiBhbnlbXSkgPT4gdW5rbm93bixcbiAgICBjdHg6IENsYXNzTWV0aG9kRGVjb3JhdG9yQ29udGV4dDxTZXJ2aWNlLCB0eXBlb2YgbWV0aG9kPixcbikge1xuICAgIGNvbnN0IG5hbWUgPSBjdHgubmFtZVxuICAgIGNvbnN0IG1ldGEgPSBjdHgubWV0YWRhdGEhIGFzIEludGVyZmFjZU1ldGFcbiAgICBjb25zdCBtZXRob2RzID0gKG1ldGEuZGJ1c01ldGhvZHMgPz89IHt9KVxuXG4gICAgaWYgKHR5cGVvZiBuYW1lICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRocm93IEVycm9yKFwib25seSBzdHJpbmcgbmFtZWQgbWV0aG9kcyBhcmUgYWxsb3dlZFwiKVxuICAgIH1cblxuICAgIGNvbnN0IFtpbkFyZ3MsIG91dEFyZ3MgPSBbXV0gPSAoQXJyYXkuaXNBcnJheShhcmdzWzBdKSA/IGFyZ3MgOiBbYXJnc10pIGFzIFtBcmdzLCBBcmdzXVxuXG4gICAgbWV0aG9kc1tuYW1lXSA9IFtcbiAgICAgICAgLi4uaW5BcmdzLm1hcCgoYXJnKSA9PiAoe1xuICAgICAgICAgICAgZGlyZWN0aW9uOiBcImluXCIgYXMgY29uc3QsXG4gICAgICAgICAgICAuLi4odHlwZW9mIGFyZyA9PT0gXCJzdHJpbmdcIiA/IHsgdHlwZTogYXJnIH0gOiBhcmcpLFxuICAgICAgICB9KSksXG4gICAgICAgIC4uLm91dEFyZ3MubWFwKChhcmcpID0+ICh7XG4gICAgICAgICAgICBkaXJlY3Rpb246IFwib3V0XCIgYXMgY29uc3QsXG4gICAgICAgICAgICAuLi4odHlwZW9mIGFyZyA9PT0gXCJzdHJpbmdcIiA/IHsgdHlwZTogYXJnIH0gOiBhcmcpLFxuICAgICAgICB9KSksXG4gICAgXVxuXG4gICAgcmV0dXJuIG5hbWVcbn1cblxuZnVuY3Rpb24gaW5zdGFsbFByb3BlcnR5PFQgZXh0ZW5kcyBzdHJpbmc+KFxuICAgIHR5cGU6IFQsXG4gICAgY3R4OiBDbGFzc0ZpZWxkRGVjb3JhdG9yQ29udGV4dCB8IENsYXNzR2V0dGVyRGVjb3JhdG9yQ29udGV4dCB8IENsYXNzU2V0dGVyRGVjb3JhdG9yQ29udGV4dCxcbikge1xuICAgIGNvbnN0IGtpbmQgPSBjdHgua2luZFxuICAgIGNvbnN0IG5hbWUgPSBjdHgubmFtZVxuICAgIGNvbnN0IG1ldGEgPSBjdHgubWV0YWRhdGEhIGFzIEludGVyZmFjZU1ldGFcbiAgICBjb25zdCBwcm9wZXJ0aWVzID0gKG1ldGEuZGJ1c1Byb3BlcnRpZXMgPz89IHt9KVxuXG4gICAgaWYgKHR5cGVvZiBuYW1lICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRocm93IEVycm9yKFwib25seSBzdHJpbmcgbmFtZWQgcHJvcGVydGllcyBhcmUgYWxsb3dlZFwiKVxuICAgIH1cblxuICAgIGNvbnN0IHJlYWQgPSBraW5kID09PSBcImZpZWxkXCIgfHwga2luZCA9PT0gXCJnZXR0ZXJcIlxuICAgIGNvbnN0IHdyaXRlID0ga2luZCA9PT0gXCJmaWVsZFwiIHx8IGtpbmQgPT09IFwic2V0dGVyXCJcblxuICAgIGlmIChuYW1lIGluIHByb3BlcnRpZXMpIHtcbiAgICAgICAgaWYgKHdyaXRlKSBwcm9wZXJ0aWVzW25hbWVdLndyaXRlID0gdHJ1ZVxuICAgICAgICBpZiAocmVhZCkgcHJvcGVydGllc1tuYW1lXS5yZWFkID0gdHJ1ZVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHByb3BlcnRpZXNbbmFtZV0gPSB7XG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgIC4uLihyZWFkICYmIHsgcmVhZCB9KSxcbiAgICAgICAgICAgIC4uLih3cml0ZSAmJiB7IHdyaXRlIH0pLFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5hbWVcbn1cblxuZnVuY3Rpb24gaW5zdGFsbFNpZ25hbDxQYXJhbXMgZXh0ZW5kcyBBcnJheTxEQnVzVHlwZT4+KFxuICAgIHBhcmFtczogUGFyYW1zLFxuICAgIGN0eDogQ2xhc3NNZXRob2REZWNvcmF0b3JDb250ZXh0PFNlcnZpY2U+LFxuKSB7XG4gICAgY29uc3QgbmFtZSA9IGN0eC5uYW1lXG4gICAgY29uc3QgbWV0YSA9IGN0eC5tZXRhZGF0YSEgYXMgSW50ZXJmYWNlTWV0YVxuICAgIGNvbnN0IHNpZ25hbHMgPSAobWV0YS5kYnVzU2lnbmFscyA/Pz0ge30pXG5cbiAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3ltYm9sXCIpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJzeW1ib2xzIGFyZSBub3QgdmFsaWQgc2lnbmFsc1wiKVxuICAgIH1cblxuICAgIHNpZ25hbHNbbmFtZV0gPSBwYXJhbXMubWFwKChhcmcpID0+ICh0eXBlb2YgYXJnID09PSBcInN0cmluZ1wiID8geyB0eXBlOiBhcmcgfSA6IGFyZykpXG5cbiAgICByZXR1cm4gbmFtZVxufVxuXG5mdW5jdGlvbiBpbmZlckdUeXBlRnJvbVZhcmlhbnQodHlwZTogREJ1c1R5cGUpOiBHT2JqZWN0LkdUeXBlPGFueT4ge1xuICAgIGlmICh0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIikgcmV0dXJuIGluZmVyR1R5cGVGcm9tVmFyaWFudCh0eXBlLnR5cGUpXG5cbiAgICBpZiAodHlwZS5zdGFydHNXaXRoKFwiYVwiKSB8fCB0eXBlLnN0YXJ0c1dpdGgoXCIoXCIpKSB7XG4gICAgICAgIHJldHVybiBHT2JqZWN0LlRZUEVfSlNPQkpFQ1RcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBcInZcIjpcbiAgICAgICAgICAgIHJldHVybiBHT2JqZWN0LlRZUEVfVkFSSUFOVFxuICAgICAgICBjYXNlIFwiYlwiOlxuICAgICAgICAgICAgcmV0dXJuIEdPYmplY3QuVFlQRV9CT09MRUFOXG4gICAgICAgIGNhc2UgXCJ5XCI6XG4gICAgICAgICAgICByZXR1cm4gR09iamVjdC5UWVBFX1VJTlRcbiAgICAgICAgY2FzZSBcIm5cIjpcbiAgICAgICAgICAgIHJldHVybiBHT2JqZWN0LlRZUEVfSU5UXG4gICAgICAgIGNhc2UgXCJxXCI6XG4gICAgICAgICAgICByZXR1cm4gR09iamVjdC5UWVBFX1VJTlRcbiAgICAgICAgY2FzZSBcImlcIjpcbiAgICAgICAgICAgIHJldHVybiBHT2JqZWN0LlRZUEVfSU5UXG4gICAgICAgIGNhc2UgXCJ1XCI6XG4gICAgICAgICAgICByZXR1cm4gR09iamVjdC5UWVBFX1VJTlRcbiAgICAgICAgY2FzZSBcInhcIjpcbiAgICAgICAgICAgIHJldHVybiBHT2JqZWN0LlRZUEVfSU5UNjRcbiAgICAgICAgY2FzZSBcInRcIjpcbiAgICAgICAgICAgIHJldHVybiBHT2JqZWN0LlRZUEVfVUlOVDY0XG4gICAgICAgIGNhc2UgXCJoXCI6XG4gICAgICAgICAgICByZXR1cm4gR09iamVjdC5UWVBFX0lOVFxuICAgICAgICBjYXNlIFwiZFwiOlxuICAgICAgICAgICAgcmV0dXJuIEdPYmplY3QuVFlQRV9ET1VCTEVcbiAgICAgICAgY2FzZSBcInNcIjpcbiAgICAgICAgY2FzZSBcImdcIjpcbiAgICAgICAgY2FzZSBcIm9cIjpcbiAgICAgICAgICAgIHJldHVybiBHT2JqZWN0LlRZUEVfU1RSSU5HXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBicmVha1xuICAgIH1cblxuICAgIHRocm93IEVycm9yKGBjYW5ub3QgaW5mZXIgR1R5cGUgZnJvbSB2YXJpYW50IFwiJHt0eXBlfVwiYClcbn1cblxuLyoqXG4gKiBSZWdpc3RlcnMgYSBtZXRob2QuXG4gKiBZb3Ugc2hvdWxkIHByZWZlciB1c2luZyB7QGxpbmsgbWV0aG9kQXN5bmN9IHdoZW4gcHJveHlpbmcsIGR1ZSB0byBJTyBibG9ja2luZy5cbiAqIE5vdGUgdGhhdCB0aGlzIGlzIGZ1bmN0aW9uYWxseSB0aGUgc2FtZSBhcyB7QGxpbmsgbWV0aG9kQXN5bmN9IG9uIGV4cG9ydGVkIG9iamVjdHMuXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1ldGhvZDxjb25zdCBJbkFyZ3MgZXh0ZW5kcyBBcnJheTxEQnVzVHlwZT4sIGNvbnN0IE91dEFyZ3MgZXh0ZW5kcyBBcnJheTxEQnVzVHlwZT4+KFxuICAgIGluQXJnczogSW5BcmdzLFxuICAgIG91dEFyZ3M6IE91dEFyZ3MsXG4pOiAoXG4gICAgbWV0aG9kOiAodGhpczogU2VydmljZSwgLi4uYXJnczogYW55W10pID0+IEluZmVyVmFyaWFudFR5cGVzPE91dEFyZ3M+LFxuICAgIGN0eDogQ2xhc3NNZXRob2REZWNvcmF0b3JDb250ZXh0PFNlcnZpY2UsIHR5cGVvZiBtZXRob2Q+LFxuKSA9PiAodGhpczogU2VydmljZSwgLi4uYXJnczogSW5mZXJWYXJpYW50VHlwZXM8SW5BcmdzPikgPT4gYW55XG5cbi8qKlxuICogUmVnaXN0ZXJzIGEgbWV0aG9kLlxuICogWW91IHNob3VsZCBwcmVmZXIgdXNpbmcge0BsaW5rIG1ldGhvZEFzeW5jfSB3aGVuIHByb3h5aW5nLCBkdWUgdG8gSU8gYmxvY2tpbmcuXG4gKiBOb3RlIHRoYXQgdGhpcyBpcyBmdW5jdGlvbmFsbHkgdGhlIHNhbWUgYXMge0BsaW5rIG1ldGhvZEFzeW5jfSBvbiBleHBvcnRlZCBvYmplY3RzLlxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtZXRob2Q8Y29uc3QgSW5BcmdzIGV4dGVuZHMgQXJyYXk8REJ1c1R5cGU+PihcbiAgICAuLi5pbkFyZ3M6IEluQXJnc1xuKTogKFxuICAgIG1ldGhvZDogKHRoaXM6IFNlcnZpY2UsIC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkLFxuICAgIGN0eDogQ2xhc3NNZXRob2REZWNvcmF0b3JDb250ZXh0PFNlcnZpY2UsIHR5cGVvZiBtZXRob2Q+LFxuKSA9PiAodGhpczogU2VydmljZSwgLi4uYXJnczogSW5mZXJWYXJpYW50VHlwZXM8SW5BcmdzPikgPT4gdm9pZFxuXG5leHBvcnQgZnVuY3Rpb24gbWV0aG9kPGNvbnN0IEluQXJncyBleHRlbmRzIEFycmF5PERCdXNUeXBlPiwgY29uc3QgT3V0QXJncyBleHRlbmRzIEFycmF5PERCdXNUeXBlPj4oXG4gICAgLi4uYXJnczogSW5BcmdzIHwgW2luQXJnczogSW5BcmdzLCBvdXRBcmdzPzogT3V0QXJnc11cbikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoXG4gICAgICAgIG1ldGhvZDogKFxuICAgICAgICAgICAgdGhpczogU2VydmljZSxcbiAgICAgICAgICAgIC4uLmFyZ3M6IEluZmVyVmFyaWFudFR5cGVzPEluQXJncz5cbiAgICAgICAgKSA9PiBJbmZlclZhcmlhbnRUeXBlczxPdXRBcmdzPiB8IHZvaWQsXG4gICAgICAgIGN0eDogQ2xhc3NNZXRob2REZWNvcmF0b3JDb250ZXh0PFNlcnZpY2UsIHR5cGVvZiBtZXRob2Q+LFxuICAgICk6ICh0aGlzOiBTZXJ2aWNlLCAuLi5hcmdzOiBJbmZlclZhcmlhbnRUeXBlczxJbkFyZ3M+KSA9PiBhbnkge1xuICAgICAgICBjb25zdCBuYW1lID0gaW5zdGFsbE1ldGhvZChhcmdzLCBtZXRob2QsIGN0eClcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIGlmICh0aGlzW2ludGVybmFsc10ucHJveHkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXNbcmVtb3RlTWV0aG9kXShuYW1lLCBhcmdzKVxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5kZWVwVW5wYWNrPEluZmVyVmFyaWFudFR5cGVzPE91dEFyZ3M+PigpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBtZXRob2QuYXBwbHkodGhpcywgYXJncylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBSZWdpc3RlcnMgYSBtZXRob2QuXG4gKiBZb3Ugc2hvdWxkIHByZWZlciB1c2luZyB0aGlzIG92ZXIge0BsaW5rIG1ldGhvZH0gd2hlbiBwcm94eWluZywgc2luY2UgdGhpcyBkb2VzIG5vdCBibG9jayBJTy5cbiAqIE5vdGUgdGhhdCB0aGlzIGlzIGZ1bmN0aW9uYWxseSB0aGUgc2FtZSBhcyB7QGxpbmsgbWV0aG9kfSBvbiBleHBvcnRlZCBvYmplY3RzLlxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtZXRob2RBc3luYzxcbiAgICBjb25zdCBJbkFyZ3MgZXh0ZW5kcyBBcnJheTxEQnVzVHlwZT4sXG4gICAgY29uc3QgT3V0QXJncyBleHRlbmRzIEFycmF5PERCdXNUeXBlPixcbj4oXG4gICAgaW5BcmdzOiBJbkFyZ3MsXG4gICAgb3V0QXJnczogT3V0QXJncyxcbik6IChcbiAgICBtZXRob2Q6ICh0aGlzOiBTZXJ2aWNlLCAuLi5hcmdzOiBhbnlbXSkgPT4gUHJvbWlzZTxJbmZlclZhcmlhbnRUeXBlczxPdXRBcmdzPj4sXG4gICAgY3R4OiBDbGFzc01ldGhvZERlY29yYXRvckNvbnRleHQ8U2VydmljZSwgdHlwZW9mIG1ldGhvZD4sXG4pID0+ICh0aGlzOiBTZXJ2aWNlLCAuLi5hcmdzOiBJbmZlclZhcmlhbnRUeXBlczxJbkFyZ3M+KSA9PiBQcm9taXNlPGFueT5cblxuLyoqXG4gKiBSZWdpc3RlcnMgYSBtZXRob2QuXG4gKiBZb3Ugc2hvdWxkIHByZWZlciB1c2luZyB0aGlzIG92ZXIge0BsaW5rIG1ldGhvZH0gd2hlbiBwcm94eWluZywgc2luY2UgdGhpcyBkb2VzIG5vdCBibG9jayBJTy5cbiAqIE5vdGUgdGhhdCB0aGlzIGlzIGZ1bmN0aW9uYWxseSB0aGUgc2FtZSBhcyB7QGxpbmsgbWV0aG9kfSBvbiBleHBvcnRlZCBvYmplY3RzLlxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtZXRob2RBc3luYzxjb25zdCBJbkFyZ3MgZXh0ZW5kcyBBcnJheTxEQnVzVHlwZT4+KFxuICAgIC4uLmluQXJnczogSW5BcmdzXG4pOiAoXG4gICAgbWV0aG9kOiAodGhpczogU2VydmljZSwgLi4uYXJnczogYW55W10pID0+IFByb21pc2U8dm9pZD4sXG4gICAgY3R4OiBDbGFzc01ldGhvZERlY29yYXRvckNvbnRleHQ8U2VydmljZSwgdHlwZW9mIG1ldGhvZD4sXG4pID0+ICh0aGlzOiBTZXJ2aWNlLCAuLi5hcmdzOiBJbmZlclZhcmlhbnRUeXBlczxJbkFyZ3M+KSA9PiBQcm9taXNlPHZvaWQ+XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXRob2RBc3luYzxcbiAgICBjb25zdCBJbkFyZ3MgZXh0ZW5kcyBBcnJheTxEQnVzVHlwZT4sXG4gICAgY29uc3QgT3V0QXJncyBleHRlbmRzIEFycmF5PERCdXNUeXBlPixcbj4oLi4uYXJnczogSW5BcmdzIHwgW2luQXJnczogSW5BcmdzLCBvdXRBcmdzPzogT3V0QXJnc10pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKFxuICAgICAgICBtZXRob2Q6IChcbiAgICAgICAgICAgIHRoaXM6IFNlcnZpY2UsXG4gICAgICAgICAgICAuLi5hcmdzOiBJbmZlclZhcmlhbnRUeXBlczxJbkFyZ3M+XG4gICAgICAgICkgPT4gUHJvbWlzZTxJbmZlclZhcmlhbnRUeXBlczxPdXRBcmdzPiB8IHZvaWQ+LFxuICAgICAgICBjdHg6IENsYXNzTWV0aG9kRGVjb3JhdG9yQ29udGV4dDxTZXJ2aWNlLCB0eXBlb2YgbWV0aG9kPixcbiAgICApOiAodGhpczogU2VydmljZSwgLi4uYXJnczogSW5mZXJWYXJpYW50VHlwZXM8SW5BcmdzPikgPT4gUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgY29uc3QgbmFtZSA9IGluc3RhbGxNZXRob2QoYXJncywgbWV0aG9kLCBjdHgpXG5cbiAgICAgICAgcmV0dXJuIGFzeW5jIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgICAgICBpZiAodGhpc1tpbnRlcm5hbHNdLnByb3h5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBhd2FpdCB0aGlzW3JlbW90ZU1ldGhvZEFzeW5jXShuYW1lLCBhcmdzKVxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5kZWVwVW5wYWNrPEluZmVyVmFyaWFudFR5cGVzPE91dEFyZ3M+PigpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBtZXRob2QuYXBwbHkodGhpcywgYXJncylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBSZWdpc3RlcnMgYSByZWFkLXdyaXRlIHByb3BlcnR5LiBXaGVuIGEgbmV3IHZhbHVlIGlzIGFzc2lnbmVkIHRoZSBub3RpZnkgc2lnbmFsXG4gKiBpcyBhdXRvbWF0aWNhbGx5IGVtaXR0ZWQgb24gdGhlIGxvY2FsIGFuZCBleHBvcnRlZCBvYmplY3QuXG4gKlxuICogTm90ZSB0aGF0IG5ldyB2YWx1ZXMgYXJlIGNoZWNrZWQgYnkgcmVmZXJlbmNlIHNvIGFzc2lnbmluZyB0aGUgc2FtZSBvYmplY3Qgd2lsbFxuICogbm90IGVtaXQgdGhlIG5vdGlmeSBzaWduYWwuXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb3BlcnR5PFQgZXh0ZW5kcyBzdHJpbmc+KHR5cGU6IFQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKFxuICAgICAgICBfOiB2b2lkLFxuICAgICAgICBjdHg6IENsYXNzRmllbGREZWNvcmF0b3JDb250ZXh0PFNlcnZpY2UsIERlZXBJbmZlcjxUPj4sXG4gICAgKTogKHRoaXM6IFNlcnZpY2UsIGluaXQ6IERlZXBJbmZlcjxUPikgPT4gYW55IHtcbiAgICAgICAgY29uc3QgbmFtZSA9IGluc3RhbGxQcm9wZXJ0eSh0eXBlLCBjdHgpXG5cbiAgICAgICAgdm9pZCBncHJvcGVydHkoeyAkZ3R5cGU6IGluZmVyR1R5cGVGcm9tVmFyaWFudCh0eXBlKSB9KShcbiAgICAgICAgICAgIF8sXG4gICAgICAgICAgICBjdHggYXMgQ2xhc3NGaWVsZERlY29yYXRvckNvbnRleHQ8R09iamVjdC5PYmplY3Q+ICYgQ3R4LFxuICAgICAgICAgICAgeyBtZXRhT25seTogdHJ1ZSB9LFxuICAgICAgICApXG5cbiAgICAgICAgY3R4LmFkZEluaXRpYWxpemVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBuYW1lLCB7XG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNldCh2YWx1ZTogRGVlcEluZmVyPFQ+KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgcHJveHksIHByaXYgfSA9IHRoaXNbaW50ZXJuYWxzXVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm94eSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1tyZW1vdGVQcm9wZXJ0eVNldF0obmFtZSwgdmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcml2W25hbWVdICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJpdltuYW1lXSA9IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGlmeShuYW1lIGFzIEV4dHJhY3Q8a2V5b2YgU2VydmljZSwgc3RyaW5nPilcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0KCk6IERlZXBJbmZlcjxUPiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgcHJveHksIHByaXYgfSA9IHRoaXNbaW50ZXJuYWxzXVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm94eVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBwcm94eS5nZXRfY2FjaGVkX3Byb3BlcnR5KG5hbWUpIS5kZWVwVW5wYWNrPERlZXBJbmZlcjxUPj4oKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAocHJpdltuYW1lXSBhcyBEZWVwSW5mZXI8VD4pXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0gc2F0aXNmaWVzIFRoaXNUeXBlPFNlcnZpY2U+KVxuICAgICAgICB9KVxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoaW5pdCkge1xuICAgICAgICAgICAgY29uc3QgcHJpdiA9IHRoaXNbaW50ZXJuYWxzXS5wcml2XG4gICAgICAgICAgICBwcml2W25hbWVdID0gaW5pdFxuICAgICAgICAgICAgLy8gd2UgZG9uJ3QgbmVlZCB0byBzdG9yZSB0aGUgdmFsdWUgb24gdGhlIG9iamVjdCBpdHNlbGZcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBSZWdpc3RlcnMgYSByZWFkLW9ubHkgcHJvcGVydHkuIENhbiBiZSB1c2VkIGluIGNvbmp1Y3Rpb24gd2l0aCB7QGxpbmsgc2V0dGVyfSB0byBkZWZpbmVcbiAqIHJlYWQtd3JpdGUgcHJvcGVydGllcyBhcyBhY2Nlc3NvcnMuXG4gKlxuICogTm90ZSB0aGF0IHlvdSB3aWxsIG5lZWQgdG8gZXhwbGljaXRseSBlbWl0IHRoZSBub3RpZnkgc2lnbmFsLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0dGVyPFQgZXh0ZW5kcyBzdHJpbmc+KHR5cGU6IFQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKFxuICAgICAgICBtZXRob2Q6ICh0aGlzOiBTZXJ2aWNlKSA9PiBEZWVwSW5mZXI8VD4sXG4gICAgICAgIGN0eDogQ2xhc3NHZXR0ZXJEZWNvcmF0b3JDb250ZXh0PFNlcnZpY2UsIERlZXBJbmZlcjxUPj4sXG4gICAgKTogKHRoaXM6IFNlcnZpY2UpID0+IGFueSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBpbnN0YWxsUHJvcGVydHkodHlwZSwgY3R4KVxuXG4gICAgICAgIGN0eC5hZGRJbml0aWFsaXplcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eUdldHRlcih0aGlzLCBuYW1lIGFzIEV4dHJhY3Q8a2V5b2YgU2VydmljZSwgc3RyaW5nPilcbiAgICAgICAgfSlcblxuICAgICAgICB2b2lkIGdnZXR0ZXIoeyAkZ3R5cGU6IGluZmVyR1R5cGVGcm9tVmFyaWFudCh0eXBlKSB9KShcbiAgICAgICAgICAgICgpID0+IHt9LFxuICAgICAgICAgICAgY3R4IGFzIENsYXNzR2V0dGVyRGVjb3JhdG9yQ29udGV4dDxHT2JqZWN0Lk9iamVjdD4gJiBDdHgsXG4gICAgICAgIClcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gZ2V0KCk6IERlZXBJbmZlcjxUPiB7XG4gICAgICAgICAgICBjb25zdCB7IHByb3h5IH0gPSB0aGlzW2ludGVybmFsc11cbiAgICAgICAgICAgIHJldHVybiBwcm94eVxuICAgICAgICAgICAgICAgID8gcHJveHkuZ2V0X2NhY2hlZF9wcm9wZXJ0eShuYW1lKSEuZGVlcFVucGFjazxEZWVwSW5mZXI8VD4+KClcbiAgICAgICAgICAgICAgICA6IG1ldGhvZC5jYWxsKHRoaXMpXG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogUmVnaXN0ZXJzIGEgd3JpdGUtb25seSBwcm9wZXJ0eS4gQ2FuIGJlIHVzZWQgaW4gY29uanVjdGlvbiB3aXRoIHtAbGluayBnZXR0ZXJ9IHRvIGRlZmluZVxuICogcmVhZC13cml0ZSBwcm9wZXJ0aWVzIGFzIGFjY2Vzc29ycy5cbiAqXG4gKiBOb3RlIHRoYXQgeW91IHdpbGwgbmVlZCB0byBleHBsaWNpdGx5IGVtaXQgdGhlIG5vdGlmeSBzaWduYWwuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXR0ZXI8VCBleHRlbmRzIHN0cmluZz4odHlwZTogVCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoXG4gICAgICAgIHNldHRlcjogKHRoaXM6IFNlcnZpY2UsIHZhbHVlOiBhbnkpID0+IHZvaWQsXG4gICAgICAgIGN0eDogQ2xhc3NTZXR0ZXJEZWNvcmF0b3JDb250ZXh0PFNlcnZpY2UsIERlZXBJbmZlcjxUPj4sXG4gICAgKTogKHRoaXM6IFNlcnZpY2UsIHZhbHVlOiBEZWVwSW5mZXI8VD4pID0+IHZvaWQge1xuICAgICAgICBjb25zdCBuYW1lID0gaW5zdGFsbFByb3BlcnR5KHR5cGUsIGN0eClcblxuICAgICAgICB2b2lkIGdzZXR0ZXIoeyAkZ3R5cGU6IGluZmVyR1R5cGVGcm9tVmFyaWFudCh0eXBlKSB9KShcbiAgICAgICAgICAgICgpID0+IHt9LFxuICAgICAgICAgICAgY3R4IGFzIENsYXNzU2V0dGVyRGVjb3JhdG9yQ29udGV4dDxHT2JqZWN0Lk9iamVjdD4gJiBDdHgsXG4gICAgICAgIClcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlOiBEZWVwSW5mZXI8VD4pIHtcbiAgICAgICAgICAgIGNvbnN0IHsgcHJveHkgfSA9IHRoaXNbaW50ZXJuYWxzXVxuXG4gICAgICAgICAgICBpZiAocHJveHkpIHtcbiAgICAgICAgICAgICAgICB0aGlzW3JlbW90ZVByb3BlcnR5U2V0XShuYW1lLCB2YWx1ZSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0dGVyLmNhbGwodGhpcywgdmFsdWUpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogUmVnaXN0ZXJzIGEgc2lnbmFsIHdoaWNoIHdoZW4gaW52b2tlZCB3aWxsIGVtaXQgdGhlIHNpZ25hbFxuICogb24gdGhlIGxvY2FsIG9iamVjdCBhbmQgdGhlIGV4cG9ydGVkIG9iamVjdC5cbiAqXG4gKiAqKk5vdGUqKjogaXRzIG5vdCBwb3NzaWJsZSB0byBlbWl0IHNpZ25hbHMgb24gcmVtb3RlIG9iamVjdHMgdGhyb3VnaCBwcm94aWVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2lnbmFsPGNvbnN0IFBhcmFtcyBleHRlbmRzIEFycmF5PERCdXNUeXBlPj4oLi4ucGFyYW1zOiBQYXJhbXMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKFxuICAgICAgICBtZXRob2Q6ICh0aGlzOiBTZXJ2aWNlLCAuLi5wYXJhbXM6IGFueSkgPT4gdm9pZCxcbiAgICAgICAgY3R4OiBDbGFzc01ldGhvZERlY29yYXRvckNvbnRleHQ8U2VydmljZSwgdHlwZW9mIG1ldGhvZD4sXG4gICAgKTogKHRoaXM6IFNlcnZpY2UsIC4uLnBhcmFtczogSW5mZXJWYXJpYW50VHlwZXM8UGFyYW1zPikgPT4gdm9pZCB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBpbnN0YWxsU2lnbmFsKHBhcmFtcywgY3R4KVxuXG4gICAgICAgIHZvaWQgZ3NpZ25hbCguLi5wYXJhbXMubWFwKGluZmVyR1R5cGVGcm9tVmFyaWFudCkpKFxuICAgICAgICAgICAgKCkgPT4ge30sXG4gICAgICAgICAgICBjdHggYXMgQ2xhc3NNZXRob2REZWNvcmF0b3JDb250ZXh0PEdPYmplY3QuT2JqZWN0PiAmIEN0eCxcbiAgICAgICAgKVxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoLi4ucGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAodGhpc1tpbnRlcm5hbHNdLnByb3h5KSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBjYW5ub3QgZW1pdCBzaWduYWwgXCIke25hbWV9XCIgb24gcmVtb3RlIG9iamVjdGApXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzW2ludGVybmFsc10uZGJ1c09iamVjdCB8fCAhdGhpc1tpbnRlcm5hbHNdLnByb3h5KSB7XG4gICAgICAgICAgICAgICAgbWV0aG9kLmFwcGx5KHRoaXMsIHBhcmFtcylcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW1pdChuYW1lLCAuLi5wYXJhbXMpXG4gICAgICAgIH1cbiAgICB9XG59XG4iLCAiaW1wb3J0IHsgU2VydmljZSwgaWZhY2UsIG1ldGhvZEFzeW5jIH0gZnJvbSBcImduaW0vZGJ1c1wiXG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwREJ1c0ltcGwge1xuICAgIGluc2VjdG9yKCk6IHZvaWRcbiAgICB0b2dnbGVXaW5kb3cobmFtZTogc3RyaW5nKTogdm9pZFxuICAgIHF1aXQoKTogdm9pZFxuICAgIHJlcXVlc3QoYXJndjogc3RyaW5nW10pOiBQcm9taXNlPHN0cmluZz5cbn1cblxuQGlmYWNlKFwiaW8uQXN0YWwuQXBwbGljYXRpb25cIilcbmV4cG9ydCBjbGFzcyBBcHBEQnVzIGV4dGVuZHMgU2VydmljZSB7XG4gICAgcHJpdmF0ZSBpbXBsOiBBcHBEQnVzSW1wbFxuXG4gICAgQG1ldGhvZEFzeW5jKClcbiAgICBhc3luYyBJbnNwZWN0b3IoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5pbXBsLmluc2VjdG9yKCkpXG4gICAgfVxuXG4gICAgQG1ldGhvZEFzeW5jKFwic1wiKVxuICAgIGFzeW5jIFRvZ2dsZVdpbmRvdyhuYW1lOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLmltcGwudG9nZ2xlV2luZG93KG5hbWUpKVxuICAgIH1cblxuICAgIEBtZXRob2RBc3luYygpXG4gICAgYXN5bmMgUXVpdCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLmltcGwucXVpdCgpKVxuICAgIH1cblxuICAgIEBtZXRob2RBc3luYyhbXCJhc1wiXSwgW1wic1wiXSlcbiAgICBhc3luYyBSZXF1ZXN0KGFyZ3Y6IHN0cmluZ1tdKTogUHJvbWlzZTxbc3RyaW5nXT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5pbXBsLnJlcXVlc3QoYXJndikudGhlbigocmVzKSA9PiBbcmVzXSlcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihpbXBsOiBBcHBEQnVzSW1wbCkge1xuICAgICAgICBzdXBlcigpXG4gICAgICAgIHRoaXMuaW1wbCA9IGltcGxcbiAgICB9XG5cbiAgICBzdGF0aWMgcHJveHkoaW5zdGFuY2VOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgYXBwID0gbmV3IEFwcERCdXMoe1xuICAgICAgICAgICAgaW5zZWN0b3IoKSB7fSxcbiAgICAgICAgICAgIHRvZ2dsZVdpbmRvdygpIHt9LFxuICAgICAgICAgICAgcXVpdCgpIHt9LFxuICAgICAgICAgICAgcmVxdWVzdDogKCkgPT4gUHJvbWlzZS5yZWplY3QoKSxcbiAgICAgICAgfSlcblxuICAgICAgICByZXR1cm4gYXBwLnByb3h5KHtcbiAgICAgICAgICAgIG5hbWU6IFwiaW8uQXN0YWwuXCIgKyBpbnN0YW5jZU5hbWUsXG4gICAgICAgIH0pXG4gICAgfVxufVxuIiwgImltcG9ydCBHT2JqZWN0IGZyb20gXCJnaTovL0dPYmplY3RcIlxuaW1wb3J0IHsgRnJhZ21lbnQgfSBmcm9tIFwiLi9GcmFnbWVudC5qc1wiXG5pbXBvcnQgeyBBY2Nlc3NvciB9IGZyb20gXCIuL3N0YXRlLmpzXCJcbmltcG9ydCB7IHR5cGUgQ0MsIHR5cGUgRkMsIGVudiB9IGZyb20gXCIuL2Vudi5qc1wiXG5pbXBvcnQgeyBrZWJhYmlmeSwgdHlwZSBQYXNjYWxpZnksIHNldCB9IGZyb20gXCIuLi91dGlsLmpzXCJcbmltcG9ydCB7IG9uQ2xlYW51cCB9IGZyb20gXCIuL3Njb3BlLmpzXCJcblxuLyoqXG4gKiBSZXByZXNlbnRzIGFsbCBvZiB0aGUgdGhpbmdzIHRoYXQgY2FuIGJlIHBhc3NlZCBhcyBhIGNoaWxkIHRvIGNsYXNzIGNvbXBvbmVudHMuXG4gKi9cbmV4cG9ydCB0eXBlIE5vZGUgPVxuICAgIHwgQXJyYXk8R09iamVjdC5PYmplY3Q+XG4gICAgfCBHT2JqZWN0Lk9iamVjdFxuICAgIHwgbnVtYmVyXG4gICAgfCBzdHJpbmdcbiAgICB8IGJvb2xlYW5cbiAgICB8IG51bGxcbiAgICB8IHVuZGVmaW5lZFxuXG5leHBvcnQgY29uc3QgZ3RrVHlwZSA9IFN5bWJvbChcImd0ayBidWlsZGVyIHR5cGVcIilcblxuLyoqXG4gKiBTcGVjaWFsIHN5bWJvbCB3aGljaCBsZXRzIHlvdSBpbXBsZW1lbnQgaG93IHdpZGdldHMgYXJlIGFwcGVuZGVkIGluIEpTWC5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYHRzXG4gKiBjbGFzcyBNeUNvbXBvbmVudCBleHRlbmRzIEdPYmplY3QuT2JqZWN0IHtcbiAqICAgW2FwcGVuZENoaWxkXShjaGlsZDogR09iamVjdC5PYmplY3QsIHR5cGU6IHN0cmluZyB8IG51bGwpIHtcbiAqICAgICAvLyBpbXBsZW1lbnRcbiAqICAgfVxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBjb25zdCBhcHBlbmRDaGlsZCA9IFN5bWJvbChcIkpTWCBhZGQgY2hpbGQgbWV0aG9kXCIpXG5cbi8qKlxuICogU3BlY2lhbCBzeW1ib2wgd2hpY2ggbGV0cyB5b3UgaW1wbGVtZW50IGhvdyB3aWRnZXRzIGFyZSByZW1vdmVkIGluIEpTWC5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYHRzXG4gKiBjbGFzcyBNeUNvbXBvbmVudCBleHRlbmRzIEdPYmplY3QuT2JqZWN0IHtcbiAqICAgW3JlbW92ZUNoaWxkXShjaGlsZDogR09iamVjdC5PYmplY3QpIHtcbiAqICAgICAvLyBpbXBsZW1lbnRcbiAqICAgfVxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBjb25zdCByZW1vdmVDaGlsZCA9IFN5bWJvbChcIkpTWCBhZGQgcmVtb3ZlIG1ldGhvZFwiKVxuXG4vKipcbiAqIEdldCB0aGUgdHlwZSBvZiB0aGUgb2JqZWN0IHNwZWNpZmllZCB0aHJvdWdoIHRoZSBgJHR5cGVgIHByb3BlcnR5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRUeXBlKG9iamVjdDogR09iamVjdC5PYmplY3QpIHtcbiAgICByZXR1cm4gZ3RrVHlwZSBpbiBvYmplY3QgPyAob2JqZWN0W2d0a1R5cGVdIGFzIHN0cmluZykgOiBudWxsXG59XG5cbi8qKlxuICogRnVuY3Rpb24gQ29tcG9uZW50IFByb3BlcnRpZXNcbiAqL1xuZXhwb3J0IHR5cGUgRkNQcm9wczxTZWxmLCBQcm9wcz4gPSBQcm9wcyAmIHtcbiAgICAvKipcbiAgICAgKiBHdGsuQnVpbGRlciB0eXBlXG4gICAgICogaXRzIGNvbnN1bWVkIGludGVybmFsbHkgYW5kIG5vdCBhY3R1YWxseSBwYXNzZWQgYXMgYSBwYXJhbWV0ZXJzXG4gICAgICovXG4gICAgJHR5cGU/OiBzdHJpbmdcbiAgICAvKipcbiAgICAgKiBzZXR1cCBmdW5jdGlvblxuICAgICAqIGl0cyBjb25zdW1lZCBpbnRlcm5hbGx5IGFuZCBub3QgYWN0dWFsbHkgcGFzc2VkIGFzIGEgcGFyYW1ldGVyc1xuICAgICAqL1xuICAgICQ/KHNlbGY6IFNlbGYpOiB2b2lkXG59XG5cbi8qKlxuICogQ2xhc3MgQ29tcG9uZW50IFByb3BlcnRpZXNcbiAqL1xuZXhwb3J0IHR5cGUgQ0NQcm9wczxTZWxmIGV4dGVuZHMgR09iamVjdC5PYmplY3QsIFByb3BzPiA9IHtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWwgY2hpbGRyZW4gZWxlbWVudHNcbiAgICAgKiBpdHMgY29uc3VtZWQgaW50ZXJuYWxseSBhbmQgbm90IGFjdHVhbGx5IHBhc3NlZCB0byBjbGFzcyBjb21wb25lbnQgY29uc3RydWN0b3JzXG4gICAgICovXG4gICAgY2hpbGRyZW4/OiBBcnJheTxOb2RlPiB8IE5vZGVcbiAgICAvKipcbiAgICAgKiBHdGsuQnVpbGRlciB0eXBlXG4gICAgICogaXRzIGNvbnN1bWVkIGludGVybmFsbHkgYW5kIG5vdCBhY3R1YWxseSBwYXNzZWQgdG8gY2xhc3MgY29tcG9uZW50IGNvbnN0cnVjdG9yc1xuICAgICAqL1xuICAgICR0eXBlPzogc3RyaW5nXG4gICAgLyoqXG4gICAgICogZnVuY3Rpb24gdG8gdXNlIGFzIGEgY29uc3RydWN0b3IsXG4gICAgICogaXRzIGNvbnN1bWVkIGludGVybmFsbHkgYW5kIG5vdCBhY3R1YWxseSBwYXNzZWQgdG8gY2xhc3MgY29tcG9uZW50IGNvbnN0cnVjdG9yc1xuICAgICAqL1xuICAgICRjb25zdHJ1Y3Rvcj8ocHJvcHM6IFBhcnRpYWw8UHJvcHM+KTogU2VsZlxuICAgIC8qKlxuICAgICAqIHNldHVwIGZ1bmN0aW9uLFxuICAgICAqIGl0cyBjb25zdW1lZCBpbnRlcm5hbGx5IGFuZCBub3QgYWN0dWFsbHkgcGFzc2VkIHRvIGNsYXNzIGNvbXBvbmVudCBjb25zdHJ1Y3RvcnNcbiAgICAgKi9cbiAgICAkPyhzZWxmOiBTZWxmKTogdm9pZFxuICAgIC8qKlxuICAgICAqIENTUyBjbGFzcyBuYW1lc1xuICAgICAqL1xuICAgIGNsYXNzPzogc3RyaW5nIHwgQWNjZXNzb3I8c3RyaW5nPlxuICAgIC8qKlxuICAgICAqIGlubGluZSBDU1NcbiAgICAgKi9cbiAgICBjc3M/OiBzdHJpbmcgfCBBY2Nlc3NvcjxzdHJpbmc+XG59ICYge1xuICAgIFtLIGluIGtleW9mIFByb3BzXTogQWNjZXNzb3I8Tm9uTnVsbGFibGU8UHJvcHNbS10+PiB8IFByb3BzW0tdXG59ICYge1xuICAgIFtTIGluIGtleW9mIFNlbGZbXCIkc2lnbmFsc1wiXSBhcyBTIGV4dGVuZHMgYG5vdGlmeTo6JHtpbmZlciBQfWBcbiAgICAgICAgPyBgb25Ob3RpZnkke1Bhc2NhbGlmeTxQPn1gXG4gICAgICAgIDogUyBleHRlbmRzIGAke2luZmVyIEV9Ojoke2luZmVyIER9YFxuICAgICAgICAgID8gYG9uJHtQYXNjYWxpZnk8YCR7RX06JHtEfWA+fWBcbiAgICAgICAgICA6IFMgZXh0ZW5kcyBzdHJpbmdcbiAgICAgICAgICAgID8gYG9uJHtQYXNjYWxpZnk8Uz59YFxuICAgICAgICAgICAgOiBuZXZlcl0/OiBHT2JqZWN0LlNpZ25hbENhbGxiYWNrPFNlbGYsIFNlbGZbXCIkc2lnbmFsc1wiXVtTXT5cbn1cblxuLy8gcHJldHRpZXItaWdub3JlXG50eXBlIEpzeFByb3BzPEMsIFByb3BzPiA9XG4gICAgQyBleHRlbmRzIHR5cGVvZiBGcmFnbWVudCA/IChQcm9wcyAmIHt9KVxuICAgIC8vIGludHJpbnNpY0VsZW1lbnRzIGFsd2F5cyByZXNvbHZlIGFzIEZDXG4gICAgLy8gc28gd2UgY2FuJ3QgbmFycm93IGl0IGRvd24sIGFuZCBpbiBzb21lIGNhc2VzXG4gICAgLy8gdGhlIHNldHVwIGZ1bmN0aW9uIGlzIHR5cGVkIGFzIGEgdW5pb24gb2YgT2JqZWN0IGFuZCBhY3R1YWwgdHlwZVxuICAgIC8vIGFzIGEgZml4IHVzZXJzIGNhbiBhbmQgc2hvdWxkIHVzZSBGQ1Byb3BzXG4gICAgOiBDIGV4dGVuZHMgRkMgPyBQcm9wcyAmIE9taXQ8RkNQcm9wczxSZXR1cm5UeXBlPEM+LCBQcm9wcz4sIFwiJFwiPlxuICAgIDogQyBleHRlbmRzIENDID8gQ0NQcm9wczxJbnN0YW5jZVR5cGU8Qz4sIFByb3BzPlxuICAgIDogbmV2ZXJcblxuZnVuY3Rpb24gaXNHT2JqZWN0Q3RvcihjdG9yOiBhbnkpOiBjdG9yIGlzIENDIHtcbiAgICByZXR1cm4gY3Rvci5wcm90b3R5cGUgaW5zdGFuY2VvZiBHT2JqZWN0Lk9iamVjdFxufVxuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uQ3RvcihjdG9yOiBhbnkpOiBjdG9yIGlzIEZDIHtcbiAgICByZXR1cm4gdHlwZW9mIGN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiAhaXNHT2JqZWN0Q3RvcihjdG9yKVxufVxuXG4vLyBvbk5vdGlmeVByb3BOYW1lIC0+IG5vdGlmeTo6cHJvcC1uYW1lXG4vLyBvblBhc2NhbE5hbWU6ZGV0YWlsTmFtZSAtPiBwYXNjYWwtbmFtZTo6ZGV0YWlsLW5hbWVcbmV4cG9ydCBmdW5jdGlvbiBzaWduYWxOYW1lKGtleTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBbc2lnLCBkZXRhaWxdID0ga2ViYWJpZnkoa2V5LnNsaWNlKDIpKS5zcGxpdChcIjpcIilcblxuICAgIGlmIChzaWcuc3RhcnRzV2l0aChcIm5vdGlmeS1cIikpIHtcbiAgICAgICAgcmV0dXJuIGBub3RpZnk6OiR7c2lnLnNsaWNlKDcpfWBcbiAgICB9XG5cbiAgICByZXR1cm4gZGV0YWlsID8gYCR7c2lnfTo6JHtkZXRhaWx9YCA6IHNpZ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlKHBhcmVudDogR09iamVjdC5PYmplY3QsIGNoaWxkOiBHT2JqZWN0Lk9iamVjdCkge1xuICAgIGlmIChwYXJlbnQgaW5zdGFuY2VvZiBGcmFnbWVudCkge1xuICAgICAgICBwYXJlbnQucmVtb3ZlKGNoaWxkKVxuICAgICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAocmVtb3ZlQ2hpbGQgaW4gcGFyZW50ICYmIHR5cGVvZiBwYXJlbnRbcmVtb3ZlQ2hpbGRdID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcGFyZW50W3JlbW92ZUNoaWxkXShjaGlsZClcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZW52LnJlbW92ZUNoaWxkKHBhcmVudCwgY2hpbGQpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmQocGFyZW50OiBHT2JqZWN0Lk9iamVjdCwgY2hpbGQ6IEdPYmplY3QuT2JqZWN0KSB7XG4gICAgaWYgKHBhcmVudCBpbnN0YW5jZW9mIEZyYWdtZW50KSB7XG4gICAgICAgIHBhcmVudC5hcHBlbmQoY2hpbGQpXG4gICAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIEZyYWdtZW50KSB7XG4gICAgICAgIGZvciAoY29uc3QgY2ggb2YgY2hpbGQpIHtcbiAgICAgICAgICAgIGFwcGVuZChwYXJlbnQsIGNoKVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYXBwZW5kSGFuZGxlciA9IGNoaWxkLmNvbm5lY3QoXCJhcHBlbmRcIiwgKF8sIGNoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIShjaCBpbnN0YW5jZW9mIEdPYmplY3QuT2JqZWN0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKFR5cGVFcnJvcihgY2Fubm90IGFkZCAke2NofSB0byAke3BhcmVudH1gKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFwcGVuZChwYXJlbnQsIGNoKVxuICAgICAgICB9KVxuXG4gICAgICAgIGNvbnN0IHJlbW92ZUhhbmRsZXIgPSBjaGlsZC5jb25uZWN0KFwicmVtb3ZlXCIsIChfLCBjaCkgPT4ge1xuICAgICAgICAgICAgaWYgKCEoY2ggaW5zdGFuY2VvZiBHT2JqZWN0Lk9iamVjdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uc29sZS5lcnJvcihUeXBlRXJyb3IoYGNhbm5vdCByZW1vdmUgJHtjaH0gZnJvbSAke3BhcmVudH1gKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlbW92ZShwYXJlbnQsIGNoKVxuICAgICAgICB9KVxuXG4gICAgICAgIG9uQ2xlYW51cCgoKSA9PiB7XG4gICAgICAgICAgICBjaGlsZC5kaXNjb25uZWN0KGFwcGVuZEhhbmRsZXIpXG4gICAgICAgICAgICBjaGlsZC5kaXNjb25uZWN0KHJlbW92ZUhhbmRsZXIpXG4gICAgICAgIH0pXG5cbiAgICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGFwcGVuZENoaWxkIGluIHBhcmVudCAmJiB0eXBlb2YgcGFyZW50W2FwcGVuZENoaWxkXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHBhcmVudFthcHBlbmRDaGlsZF0oY2hpbGQsIGdldFR5cGUoY2hpbGQpKVxuICAgICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBlbnYuYXBwZW5kQ2hpbGQocGFyZW50LCBjaGlsZClcbn1cblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldFR5cGUob2JqZWN0OiBvYmplY3QsIHR5cGU6IHN0cmluZykge1xuICAgIGlmIChndGtUeXBlIGluIG9iamVjdCAmJiBvYmplY3RbZ3RrVHlwZV0gIT09IFwiXCIpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGB0eXBlIG92ZXJyaWRlbiBmcm9tICR7b2JqZWN0W2d0a1R5cGVdfSB0byAke3R5cGV9IG9uICR7b2JqZWN0fWApXG4gICAgfVxuXG4gICAgT2JqZWN0LmFzc2lnbihvYmplY3QsIHsgW2d0a1R5cGVdOiB0eXBlIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBqc3g8VCBleHRlbmRzIChwcm9wczogYW55KSA9PiBHT2JqZWN0Lk9iamVjdD4oXG4gICAgY3RvcjogVCxcbiAgICBwcm9wczogSnN4UHJvcHM8VCwgUGFyYW1ldGVyczxUPlswXT4sXG4pOiBSZXR1cm5UeXBlPFQ+XG5cbmV4cG9ydCBmdW5jdGlvbiBqc3g8VCBleHRlbmRzIG5ldyAocHJvcHM6IGFueSkgPT4gR09iamVjdC5PYmplY3Q+KFxuICAgIGN0b3I6IFQsXG4gICAgcHJvcHM6IEpzeFByb3BzPFQsIENvbnN0cnVjdG9yUGFyYW1ldGVyczxUPlswXT4sXG4pOiBJbnN0YW5jZVR5cGU8VD5cblxuZXhwb3J0IGZ1bmN0aW9uIGpzeDxUIGV4dGVuZHMgR09iamVjdC5PYmplY3Q+KFxuICAgIGN0b3I6IGtleW9mICh0eXBlb2YgZW52KVtcImludHJpbnNpY0VsZW1lbnRzXCJdIHwgKG5ldyAocHJvcHM6IGFueSkgPT4gVCkgfCAoKHByb3BzOiBhbnkpID0+IFQpLFxuICAgIGlucHJvcHM6IGFueSxcbiAgICAvLyBrZXkgaXMgYSBzcGVjaWFsIHByb3AgaW4ganN4IHdoaWNoIGlzIHBhc3NlZCBhcyBhIHRoaXJkIGFyZ3VtZW50IGFuZCBub3QgaW4gcHJvcHNcbiAgICBrZXk/OiBzdHJpbmcsXG4pOiBUIHtcbiAgICBjb25zdCB7ICQsICR0eXBlLCAkY29uc3RydWN0b3IsIGNoaWxkcmVuLCAuLi5yZXN0IH0gPSBpbnByb3BzIGFzIENDUHJvcHM8VCwgYW55PlxuICAgIGNvbnN0IHByb3BzID0gcmVzdCBhcyBSZWNvcmQ8c3RyaW5nLCBhbnk+XG5cbiAgICBpZiAoa2V5KSBPYmplY3QuYXNzaWduKHByb3BzLCB7IGtleSB9KVxuXG4gICAgY29uc3QgZGVmZXJQcm9wcyA9IGVudi5pbml0UHJvcHMoY3RvciwgcHJvcHMpID8/IFtdXG4gICAgY29uc3QgZGVmZXJyZWRQcm9wczogUmVjb3JkPHN0cmluZywgdW5rbm93bj4gPSB7fVxuXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocHJvcHMpKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBkZWxldGUgcHJvcHNba2V5XVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRlZmVyUHJvcHMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgZGVmZXJyZWRQcm9wc1trZXldID0gcHJvcHNba2V5XVxuICAgICAgICAgICAgZGVsZXRlIHByb3BzW2tleV1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY3RvciA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBpZiAoY3RvciBpbiBlbnYuaW50cmluc2ljRWxlbWVudHMpIHtcbiAgICAgICAgICAgIGN0b3IgPSBlbnYuaW50cmluc2ljRWxlbWVudHNbY3Rvcl0gYXMgRkM8VD4gfCBDQzxUPlxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYHVua25vd24gaW50cmluc2ljIGVsZW1lbnQgXCIke2N0b3J9XCJgKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzRnVuY3Rpb25DdG9yKGN0b3IpKSB7XG4gICAgICAgIGNvbnN0IG9iamVjdCA9IGN0b3IoeyBjaGlsZHJlbiwgLi4ucHJvcHMgfSlcbiAgICAgICAgaWYgKCR0eXBlKSBzZXRUeXBlKG9iamVjdCwgJHR5cGUpXG4gICAgICAgICQ/LihvYmplY3QpXG4gICAgICAgIHJldHVybiBvYmplY3RcbiAgICB9XG5cbiAgICAvLyBjb2xsZWN0IGNzcyBhbmQgY2xhc3NOYW1lXG4gICAgY29uc3QgeyBjc3MsIGNsYXNzOiBjbGFzc05hbWUgfSA9IHByb3BzXG4gICAgZGVsZXRlIHByb3BzLmNzc1xuICAgIGRlbGV0ZSBwcm9wcy5jbGFzc1xuXG4gICAgY29uc3Qgc2lnbmFsczogQXJyYXk8W3N0cmluZywgKC4uLnByb3BzOiB1bmtub3duW10pID0+IHVua25vd25dPiA9IFtdXG4gICAgY29uc3QgYmluZGluZ3M6IEFycmF5PFtzdHJpbmcsIEFjY2Vzc29yPHVua25vd24+XT4gPSBbXVxuXG4gICAgLy8gY29sbGVjdCBzaWduYWxzIGFuZCBiaW5kaW5nc1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHByb3BzKSkge1xuICAgICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoXCJvblwiKSkge1xuICAgICAgICAgICAgc2lnbmFscy5wdXNoKFtrZXksIHZhbHVlIGFzICgpID0+IHVua25vd25dKVxuICAgICAgICAgICAgZGVsZXRlIHByb3BzW2tleV1cbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBY2Nlc3Nvcikge1xuICAgICAgICAgICAgYmluZGluZ3MucHVzaChba2V5LCB2YWx1ZV0pXG4gICAgICAgICAgICBwcm9wc1trZXldID0gdmFsdWUuZ2V0KClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNvbnN0cnVjdFxuICAgIGNvbnN0IG9iamVjdCA9ICRjb25zdHJ1Y3RvciA/ICRjb25zdHJ1Y3Rvcihwcm9wcykgOiBuZXcgKGN0b3IgYXMgQ0M8VD4pKHByb3BzKVxuICAgIGlmICgkY29uc3RydWN0b3IpIE9iamVjdC5hc3NpZ24ob2JqZWN0LCBwcm9wcylcbiAgICBpZiAoJHR5cGUpIHNldFR5cGUob2JqZWN0LCAkdHlwZSlcblxuICAgIGlmIChjc3MpIGVudi5zZXRDc3Mob2JqZWN0LCBjc3MpXG4gICAgaWYgKGNsYXNzTmFtZSkgZW52LnNldENsYXNzKG9iamVjdCwgY2xhc3NOYW1lKVxuXG4gICAgLy8gYWRkIGNoaWxkcmVuXG4gICAgZm9yIChsZXQgY2hpbGQgb2YgQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlbiA6IFtjaGlsZHJlbl0pIHtcbiAgICAgICAgaWYgKGNoaWxkID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oRXJyb3IoXCJUcnlpbmcgdG8gYWRkIGJvb2xlYW4gdmFsdWUgb2YgYHRydWVgIGFzIGEgY2hpbGQuXCIpKVxuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkKSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBjaCBvZiBjaGlsZCkge1xuICAgICAgICAgICAgICAgIGFwcGVuZChvYmplY3QsIGNoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGNoaWxkKSB7XG4gICAgICAgICAgICBpZiAoIShjaGlsZCBpbnN0YW5jZW9mIEdPYmplY3QuT2JqZWN0KSkge1xuICAgICAgICAgICAgICAgIGNoaWxkID0gZW52LnRleHROb2RlKGNoaWxkKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXBwZW5kKG9iamVjdCwgY2hpbGQpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBoYW5kbGUgc2lnbmFsc1xuICAgIGNvbnN0IGRpc3Bvc2VIYW5kbGVycyA9IHNpZ25hbHMubWFwKChbc2lnLCBoYW5kbGVyXSkgPT4ge1xuICAgICAgICBjb25zdCBpZCA9IG9iamVjdC5jb25uZWN0KHNpZ25hbE5hbWUoc2lnKSwgaGFuZGxlcilcbiAgICAgICAgcmV0dXJuICgpID0+IG9iamVjdC5kaXNjb25uZWN0KGlkKVxuICAgIH0pXG5cbiAgICAvLyBkZWZlcnJlZCBwcm9wc1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGRlZmVycmVkUHJvcHMpKSB7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFjY2Vzc29yKSB7XG4gICAgICAgICAgICBiaW5kaW5ncy5wdXNoKFtrZXksIHZhbHVlXSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ob2JqZWN0LCB7IFtrZXldOiB2YWx1ZSB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gaGFuZGxlIGJpbmRpbmdzXG4gICAgY29uc3QgZGlzcG9zZUJpbmRpbmdzID0gYmluZGluZ3MubWFwKChbcHJvcCwgYmluZGluZ10pID0+IHtcbiAgICAgICAgY29uc3QgZGlzcG9zZSA9IGJpbmRpbmcuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgIHNldChvYmplY3QsIHByb3AsIGJpbmRpbmcuZ2V0KCkpXG4gICAgICAgIH0pXG4gICAgICAgIHNldChvYmplY3QsIHByb3AsIGJpbmRpbmcuZ2V0KCkpXG4gICAgICAgIHJldHVybiBkaXNwb3NlXG4gICAgfSlcblxuICAgIC8vIGNsZWFudXBcbiAgICBpZiAoZGlzcG9zZUJpbmRpbmdzLmxlbmd0aCA+IDAgfHwgZGlzcG9zZUhhbmRsZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgb25DbGVhbnVwKCgpID0+IHtcbiAgICAgICAgICAgIGRpc3Bvc2VIYW5kbGVycy5mb3JFYWNoKChjYikgPT4gY2IoKSlcbiAgICAgICAgICAgIGRpc3Bvc2VCaW5kaW5ncy5mb3JFYWNoKChjYikgPT4gY2IoKSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAkPy4ob2JqZWN0KVxuICAgIHJldHVybiBvYmplY3Rcbn1cblxuLy8gVE9ETzogbWFrZSB1c2Ugb2YganN4c1xuZXhwb3J0IGNvbnN0IGpzeHMgPSBqc3hcblxuZGVjbGFyZSBnbG9iYWwge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG4gICAgbmFtZXNwYWNlIEpTWCB7XG4gICAgICAgIHR5cGUgRWxlbWVudFR5cGUgPSBrZXlvZiBJbnRyaW5zaWNFbGVtZW50cyB8IEZDIHwgQ0NcbiAgICAgICAgdHlwZSBFbGVtZW50ID0gR09iamVjdC5PYmplY3RcbiAgICAgICAgdHlwZSBFbGVtZW50Q2xhc3MgPSBHT2JqZWN0Lk9iamVjdFxuXG4gICAgICAgIHR5cGUgTGlicmFyeU1hbmFnZWRBdHRyaWJ1dGVzPEMsIFByb3BzPiA9IEpzeFByb3BzPEMsIFByb3BzPiAmIHtcbiAgICAgICAgICAgIC8vIEZJWE1FOiB3aHkgZG9lcyBhbiBpbnRyaW5zaWMgZWxlbWVudCBhbHdheXMgcmVzb2x2ZSBhcyBGQz9cbiAgICAgICAgICAgIC8vIF9fdHlwZT86IEMgZXh0ZW5kcyBDQyA/IFwiQ0NcIiA6IEMgZXh0ZW5kcyBGQyA/IFwiRkNcIiA6IG5ldmVyXG4gICAgICAgIH1cblxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LW9iamVjdC10eXBlXG4gICAgICAgIGludGVyZmFjZSBJbnRyaW5zaWNFbGVtZW50cyB7XG4gICAgICAgICAgICAvLyBjYzogQ0NQcm9wczxHdGsuQm94LCBHdGsuQm94LkNvbnN0cnVjdG9yUHJvcHMsIEd0ay5Cb3guU2lnbmFsU2lnbmF0dXJlcz5cbiAgICAgICAgICAgIC8vIGZjOiBGQ1Byb3BzPEd0ay5XaWRnZXQsIEZuUHJvcHM+XG4gICAgICAgIH1cblxuICAgICAgICBpbnRlcmZhY2UgRWxlbWVudENoaWxkcmVuQXR0cmlidXRlIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktb2JqZWN0LXR5cGVcbiAgICAgICAgICAgIGNoaWxkcmVuOiB7fVxuICAgICAgICB9XG4gICAgfVxufVxuIiwgImltcG9ydCBHT2JqZWN0IGZyb20gXCJnaTovL0dPYmplY3RcIlxuXG5pbnRlcmZhY2UgRnJhZ21lbnRTaWduYWxzPFQ+IGV4dGVuZHMgR09iamVjdC5PYmplY3QuU2lnbmFsU2lnbmF0dXJlcyB7XG4gICAgYXBwZW5kOiAoY2hpbGQ6IFQpID0+IHZvaWRcbiAgICByZW1vdmU6IChjaGlsZDogVCkgPT4gdm9pZFxufVxuXG5leHBvcnQgY2xhc3MgRnJhZ21lbnQ8VCA9IGFueT4gZXh0ZW5kcyBHT2JqZWN0Lk9iamVjdCB7XG4gICAgZGVjbGFyZSAkc2lnbmFsczogRnJhZ21lbnRTaWduYWxzPFQ+XG5cbiAgICBzdGF0aWMgW0dPYmplY3Quc2lnbmFsc10gPSB7XG4gICAgICAgIGFwcGVuZDogeyBwYXJhbV90eXBlczogW0dPYmplY3QuVFlQRV9PQkpFQ1RdIH0sXG4gICAgICAgIHJlbW92ZTogeyBwYXJhbV90eXBlczogW0dPYmplY3QuVFlQRV9PQkpFQ1RdIH0sXG4gICAgfVxuXG4gICAgc3RhdGljIFtHT2JqZWN0LnByb3BlcnRpZXNdID0ge1xuICAgICAgICBjaGlsZHJlbjogR09iamVjdC5QYXJhbVNwZWMuanNvYmplY3QoXCJjaGlsZHJlblwiLCBcIlwiLCBcIlwiLCBHT2JqZWN0LlBhcmFtRmxhZ3MuUkVBREFCTEUpLFxuICAgIH1cblxuICAgIHN0YXRpYyB7XG4gICAgICAgIEdPYmplY3QucmVnaXN0ZXJDbGFzcyh0aGlzKVxuICAgIH1cblxuICAgICpbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICAgICAgeWllbGQqIHRoaXMuX2NoaWxkcmVuXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfY2hpbGRyZW46IEFycmF5PFQ+XG5cbiAgICBhcHBlbmQoY2hpbGQ6IFQpOiB2b2lkIHtcbiAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgRnJhZ21lbnQpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBuZXN0aW5nIEZyYWdtZW50cyBhcmUgbm90IHlldCBzdXBwb3J0ZWRgKVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fY2hpbGRyZW4ucHVzaChjaGlsZClcbiAgICAgICAgdGhpcy5lbWl0KFwiYXBwZW5kXCIsIGNoaWxkKVxuICAgICAgICB0aGlzLm5vdGlmeShcImNoaWxkcmVuXCIpXG4gICAgfVxuXG4gICAgcmVtb3ZlKGNoaWxkOiBUKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fY2hpbGRyZW4uZmluZEluZGV4KChpKSA9PiBpID09PSBjaGlsZClcbiAgICAgICAgdGhpcy5fY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKVxuXG4gICAgICAgIHRoaXMuZW1pdChcInJlbW92ZVwiLCBjaGlsZClcbiAgICAgICAgdGhpcy5ub3RpZnkoXCJjaGlsZHJlblwiKVxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHsgY2hpbGRyZW4gPSBbXSB9OiBQYXJ0aWFsPHsgY2hpbGRyZW46IEFycmF5PFQ+IHwgVCB9PiA9IHt9KSB7XG4gICAgICAgIHN1cGVyKClcbiAgICAgICAgdGhpcy5fY2hpbGRyZW4gPSBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSA/IGNoaWxkcmVuIDogW2NoaWxkcmVuXVxuICAgIH1cblxuICAgIGNvbm5lY3Q8UyBleHRlbmRzIGtleW9mIEZyYWdtZW50U2lnbmFsczxUPj4oXG4gICAgICAgIHNpZ25hbDogUyxcbiAgICAgICAgY2FsbGJhY2s6IEdPYmplY3QuU2lnbmFsQ2FsbGJhY2s8dGhpcywgRnJhZ21lbnRTaWduYWxzPFQ+W1NdPixcbiAgICApOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gc3VwZXIuY29ubmVjdChzaWduYWwsIGNhbGxiYWNrKVxuICAgIH1cbn1cbiIsICJpbXBvcnQgR09iamVjdCBmcm9tIFwiZ2k6Ly9HT2JqZWN0XCJcbmltcG9ydCBHaW8gZnJvbSBcImdpOi8vR2lvXCJcbmltcG9ydCBHTGliIGZyb20gXCJnaTovL0dMaWJcIlxuaW1wb3J0IHsgdHlwZSBQYXNjYWxpZnksIGNhbWVsaWZ5LCBrZWJhYmlmeSB9IGZyb20gXCIuLi91dGlsLmpzXCJcbmltcG9ydCB0eXBlIHsgRGVlcEluZmVyLCBSZWN1cnNpdmVJbmZlciB9IGZyb20gXCIuLi92YXJpYW50LmpzXCJcblxudHlwZSBTdWJzY3JpYmVDYWxsYmFjayA9ICgpID0+IHZvaWRcbnR5cGUgRGlzcG9zZUZ1bmN0aW9uID0gKCkgPT4gdm9pZFxudHlwZSBTdWJzY3JpYmVGdW5jdGlvbiA9IChjYWxsYmFjazogU3Vic2NyaWJlQ2FsbGJhY2spID0+IERpc3Bvc2VGdW5jdGlvblxuXG5leHBvcnQgdHlwZSBBY2Nlc3NlZDxUPiA9IFQgZXh0ZW5kcyBBY2Nlc3NvcjxpbmZlciBWPiA/IFYgOiBuZXZlclxuXG5jb25zdCBlbXB0eSA9IFN5bWJvbChcImVtcHR5IGNvbXB1dGVkIHZhbHVlXCIpXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWRlY2xhcmF0aW9uLW1lcmdpbmdcbmV4cG9ydCBjbGFzcyBBY2Nlc3NvcjxUID0gdW5rbm93bj4gZXh0ZW5kcyBGdW5jdGlvbiB7XG4gICAgc3RhdGljICRndHlwZSA9IEdPYmplY3QuVFlQRV9KU09CSkVDVCBhcyB1bmtub3duIGFzIEdPYmplY3QuR1R5cGU8QWNjZXNzb3I+XG5cbiAgICAjZ2V0OiAoKSA9PiBUXG4gICAgI3N1YnNjcmliZTogU3Vic2NyaWJlRnVuY3Rpb25cblxuICAgIGNvbnN0cnVjdG9yKGdldDogKCkgPT4gVCwgc3Vic2NyaWJlPzogU3Vic2NyaWJlRnVuY3Rpb24pIHtcbiAgICAgICAgc3VwZXIoXCJyZXR1cm4gYXJndW1lbnRzLmNhbGxlZS5fY2FsbC5hcHBseShhcmd1bWVudHMuY2FsbGVlLCBhcmd1bWVudHMpXCIpXG4gICAgICAgIHRoaXMuI3N1YnNjcmliZSA9IHN1YnNjcmliZSA/PyAoKCkgPT4gKCkgPT4gdm9pZCAwKVxuICAgICAgICB0aGlzLiNnZXQgPSBnZXRcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdWJzY3JpYmUgZm9yIHZhbHVlIGNoYW5nZXMuXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBydW4gd2hlbiB0aGUgY3VycmVudCB2YWx1ZSBjaGFuZ2VzLlxuICAgICAqIEByZXR1cm5zIFVuc3Vic2NyaWJlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIHN1YnNjcmliZShjYWxsYmFjazogU3Vic2NyaWJlQ2FsbGJhY2spOiBEaXNwb3NlRnVuY3Rpb24ge1xuICAgICAgICByZXR1cm4gdGhpcy4jc3Vic2NyaWJlKGNhbGxiYWNrKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIFRoZSBjdXJyZW50IHZhbHVlLlxuICAgICAqL1xuICAgIGdldCgpOiBUIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI2dldCgpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGBBY2Nlc3NvcmAgdGhhdCBhcHBsaWVzIGEgdHJhbnNmb3JtYXRpb24gb24gaXRzIHZhbHVlLlxuICAgICAqIEBwYXJhbSB0cmFuc2Zvcm0gVGhlIHRyYW5zZm9ybWF0aW9uIHRvIGFwcGx5LiBTaG91bGQgYmUgYSBwdXJlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGFzPFIgPSBUPih0cmFuc2Zvcm06ICh2YWx1ZTogVCkgPT4gUik6IEFjY2Vzc29yPFI+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBBY2Nlc3NvcigoKSA9PiB0cmFuc2Zvcm0odGhpcy4jZ2V0KCkpLCB0aGlzLiNzdWJzY3JpYmUpXG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9jYWxsPFIgPSBUPih0cmFuc2Zvcm06ICh2YWx1ZTogVCkgPT4gUik6IEFjY2Vzc29yPFI+IHtcbiAgICAgICAgbGV0IHZhbHVlOiB0eXBlb2YgZW1wdHkgfCBSID0gZW1wdHlcbiAgICAgICAgbGV0IHVuc3ViOiBEaXNwb3NlRnVuY3Rpb25cblxuICAgICAgICBjb25zdCBzdWJzY3JpYmVycyA9IG5ldyBTZXQ8U3Vic2NyaWJlQ2FsbGJhY2s+KClcblxuICAgICAgICBjb25zdCBzdWJzY3JpYmU6IFN1YnNjcmliZUZ1bmN0aW9uID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICBpZiAoc3Vic2NyaWJlcnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHVuc3ViID0gdGhpcy5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IHRyYW5zZm9ybSh0aGlzLmdldCgpKVxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG5ld1ZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5mcm9tKHN1YnNjcmliZXJzKS5mb3JFYWNoKChjYikgPT4gY2IoKSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN1YnNjcmliZXJzLmFkZChjYWxsYmFjaylcblxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVycy5kZWxldGUoY2FsbGJhY2spXG4gICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZXJzLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBlbXB0eVxuICAgICAgICAgICAgICAgICAgICB1bnN1YigpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZ2V0ID0gKCk6IFIgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlICE9PSBlbXB0eSA/IHZhbHVlIDogdHJhbnNmb3JtKHRoaXMuZ2V0KCkpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IEFjY2Vzc29yKGdldCwgc3Vic2NyaWJlKVxuICAgIH1cblxuICAgIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBgQWNjZXNzb3I8JHt0aGlzLmdldCgpfT5gXG4gICAgfVxuXG4gICAgW1N5bWJvbC50b1ByaW1pdGl2ZV0oKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIkFjY2Vzc29yIGltcGxpY2l0bHkgY29udmVydGVkIHRvIGEgcHJpbWl0aXZlIHZhbHVlLlwiKVxuICAgICAgICByZXR1cm4gdGhpcy50b1N0cmluZygpXG4gICAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFjY2Vzc29yPFQ+IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBjb21wdXRlZCBgQWNjZXNzb3JgIHRoYXQgY2FjaGVzIGl0cyB0cmFuc2Zvcm1lZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0gdHJhbnNmb3JtIFRoZSB0cmFuc2Zvcm1hdGlvbiB0byBhcHBseS4gU2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbi5cbiAgICAgKiBzZWUge0BsaW5rIGNyZWF0ZUNvbXB1dGVkfSBhbmQge0BsaW5rIGNyZWF0ZUNvbXB1dGVkUHJvZHVjZXJ9XG4gICAgICovXG4gICAgPFIgPSBUPih0cmFuc2Zvcm06ICh2YWx1ZTogVCkgPT4gUik6IEFjY2Vzc29yPFI+XG59XG5cbmV4cG9ydCB0eXBlIFNldHRlcjxUPiA9IHtcbiAgICAodmFsdWU6IFQpOiB2b2lkXG4gICAgKHZhbHVlOiAocHJldjogVCkgPT4gVCk6IHZvaWRcbn1cblxuZXhwb3J0IHR5cGUgU3RhdGU8VD4gPSBbQWNjZXNzb3I8VD4sIFNldHRlcjxUPl1cblxuLyoqXG4gKiBDcmVhdGUgYSB3cml0YWJsZSBzaWduYWwuXG4gKlxuICogQHBhcmFtIGluaXQgVGhlIGludGlhbCB2YWx1ZSBvZiB0aGUgc2lnbmFsXG4gKiBAcmV0dXJucyBBbiBgQWNjZXNzb3JgIGFuZCBhIHNldHRlciBmdW5jdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3RhdGU8VD4oaW5pdDogVCk6IFN0YXRlPFQ+IHtcbiAgICBsZXQgY3VycmVudFZhbHVlID0gaW5pdFxuICAgIGNvbnN0IHN1YnNjcmliZXJzID0gbmV3IFNldDxTdWJzY3JpYmVDYWxsYmFjaz4oKVxuXG4gICAgY29uc3Qgc3Vic2NyaWJlOiBTdWJzY3JpYmVGdW5jdGlvbiA9IChjYWxsYmFjaykgPT4ge1xuICAgICAgICBzdWJzY3JpYmVycy5hZGQoY2FsbGJhY2spXG4gICAgICAgIHJldHVybiAoKSA9PiBzdWJzY3JpYmVycy5kZWxldGUoY2FsbGJhY2spXG4gICAgfVxuXG4gICAgY29uc3Qgc2V0ID0gKG5ld1ZhbHVlOiB1bmtub3duKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlOiBUID0gdHlwZW9mIG5ld1ZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBuZXdWYWx1ZShjdXJyZW50VmFsdWUpIDogbmV3VmFsdWVcbiAgICAgICAgaWYgKGN1cnJlbnRWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IHZhbHVlXG4gICAgICAgICAgICAvLyBydW5uaW5nIGNhbGxiYWNrcyBtaWdodCBtdXRhdGUgc3Vic2NyaWJlcnNcbiAgICAgICAgICAgIEFycmF5LmZyb20oc3Vic2NyaWJlcnMpLmZvckVhY2goKGNiKSA9PiBjYigpKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFtuZXcgQWNjZXNzb3IoKCkgPT4gY3VycmVudFZhbHVlLCBzdWJzY3JpYmUpLCBzZXQgYXMgU2V0dGVyPFQ+XVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wdXRlZFByb2R1Y2VyPFQ+KGZuOiAodHJhY2s6IDxWPihzaWduYWw6IEFjY2Vzc29yPFY+KSA9PiBWKSA9PiBUKTogQWNjZXNzb3I8VD4ge1xuICAgIGxldCB2YWx1ZTogdHlwZW9mIGVtcHR5IHwgVCA9IGVtcHR5XG4gICAgbGV0IHByZXZEZXBzID0gbmV3IE1hcDxBY2Nlc3NvciwgRGlzcG9zZUZ1bmN0aW9uPigpXG5cbiAgICBjb25zdCBzdWJzY3JpYmVycyA9IG5ldyBTZXQ8U3Vic2NyaWJlQ2FsbGJhY2s+KClcbiAgICBjb25zdCBjYWNoZSA9IG5ldyBNYXA8QWNjZXNzb3IsIHVua25vd24+KClcblxuICAgIGNvbnN0IGVmZmVjdCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgZGVwcyA9IG5ldyBTZXQ8QWNjZXNzb3I+KClcbiAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBmbigodikgPT4ge1xuICAgICAgICAgICAgZGVwcy5hZGQodilcbiAgICAgICAgICAgIHJldHVybiAoY2FjaGUuZ2V0KHYpIGFzIGFueSkgfHwgdi5nZXQoKVxuICAgICAgICB9KVxuXG4gICAgICAgIGNvbnN0IGRpZENoYW5nZSA9IHZhbHVlICE9PSBuZXdWYWx1ZVxuICAgICAgICB2YWx1ZSA9IG5ld1ZhbHVlXG5cbiAgICAgICAgY29uc3QgbmV3RGVwcyA9IG5ldyBNYXA8QWNjZXNzb3IsIERpc3Bvc2VGdW5jdGlvbj4oKVxuXG4gICAgICAgIGZvciAoY29uc3QgW2RlcCwgdW5zdWJdIG9mIHByZXZEZXBzKSB7XG4gICAgICAgICAgICBpZiAoIWRlcHMuaGFzKGRlcCkpIHtcbiAgICAgICAgICAgICAgICB1bnN1YigpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5ld0RlcHMuc2V0KGRlcCwgdW5zdWIpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGNvbnN0IGRlcCBvZiBkZXBzKSB7XG4gICAgICAgICAgICBpZiAoIW5ld0RlcHMuaGFzKGRlcCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXNwb3NlID0gZGVwLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZGVwLmdldCgpXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYWNoZS5nZXQoZGVwKSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLnNldChkZXAsIHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgZWZmZWN0KClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgbmV3RGVwcy5zZXQoZGVwLCBkaXNwb3NlKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJldkRlcHMgPSBuZXdEZXBzXG4gICAgICAgIGlmIChkaWRDaGFuZ2UpIHtcbiAgICAgICAgICAgIEFycmF5LmZyb20oc3Vic2NyaWJlcnMpLmZvckVhY2goKGNiKSA9PiBjYigpKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgc3Vic2NyaWJlOiBTdWJzY3JpYmVGdW5jdGlvbiA9IChjYWxsYmFjaykgPT4ge1xuICAgICAgICBpZiAoc3Vic2NyaWJlcnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgZWZmZWN0KClcbiAgICAgICAgfVxuXG4gICAgICAgIHN1YnNjcmliZXJzLmFkZChjYWxsYmFjaylcblxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgc3Vic2NyaWJlcnMuZGVsZXRlKGNhbGxiYWNrKVxuICAgICAgICAgICAgaWYgKHN1YnNjcmliZXJzLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGVtcHR5XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBbLCB1bnN1Yl0gb2YgcHJldkRlcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5zdWIoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGdldCA9ICgpOiBUID0+IHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9PSBlbXB0eSA/IHZhbHVlIDogZm4oKHYpID0+IHYuZ2V0KCkpXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBBY2Nlc3NvcihnZXQsIHN1YnNjcmliZSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcHV0ZWRBcmdzPFxuICAgIGNvbnN0IERlcHMgZXh0ZW5kcyBBcnJheTxBY2Nlc3Nvcjxhbnk+PixcbiAgICBBcmdzIGV4dGVuZHMgeyBbSyBpbiBrZXlvZiBEZXBzXTogQWNjZXNzZWQ8RGVwc1tLXT4gfSxcbiAgICBWID0gQXJncyxcbj4oZGVwczogRGVwcywgdHJhbnNmb3JtPzogKC4uLmFyZ3M6IEFyZ3MpID0+IFYpOiBBY2Nlc3NvcjxWPiB7XG4gICAgbGV0IGRpc3Bvc2U6IEFycmF5PERpc3Bvc2VGdW5jdGlvbj5cbiAgICBsZXQgdmFsdWU6IHR5cGVvZiBlbXB0eSB8IFYgPSBlbXB0eVxuXG4gICAgY29uc3Qgc3Vic2NyaWJlcnMgPSBuZXcgU2V0PFN1YnNjcmliZUNhbGxiYWNrPigpXG4gICAgY29uc3QgY2FjaGUgPSBuZXcgQXJyYXk8dW5rbm93bj4oZGVwcy5sZW5ndGgpXG5cbiAgICBjb25zdCBjb21wdXRlID0gKCk6IFYgPT4ge1xuICAgICAgICBjb25zdCBhcmdzID0gZGVwcy5tYXAoKGRlcCwgaSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFjYWNoZVtpXSkge1xuICAgICAgICAgICAgICAgIGNhY2hlW2ldID0gZGVwLmdldCgpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBjYWNoZVtpXVxuICAgICAgICB9KVxuXG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm0gPyB0cmFuc2Zvcm0oLi4uKGFyZ3MgYXMgQXJncykpIDogKGFyZ3MgYXMgVilcbiAgICB9XG5cbiAgICBjb25zdCBzdWJzY3JpYmU6IFN1YnNjcmliZUZ1bmN0aW9uID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIGlmIChzdWJzY3JpYmVycy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICBkaXNwb3NlID0gZGVwcy5tYXAoKGRlcCwgaSkgPT5cbiAgICAgICAgICAgICAgICBkZXAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3RGVwVmFsdWUgPSBkZXAuZ2V0KClcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhY2hlW2ldICE9PSBuZXdEZXBWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVbaV0gPSBuZXdEZXBWYWx1ZVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IGNvbXB1dGUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbmV3VmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5mcm9tKHN1YnNjcmliZXJzKS5mb3JFYWNoKChjYikgPT4gY2IoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgKVxuICAgICAgICB9XG5cbiAgICAgICAgc3Vic2NyaWJlcnMuYWRkKGNhbGxiYWNrKVxuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBzdWJzY3JpYmVycy5kZWxldGUoY2FsbGJhY2spXG4gICAgICAgICAgICBpZiAoc3Vic2NyaWJlcnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gZW1wdHlcbiAgICAgICAgICAgICAgICBkaXNwb3NlLm1hcCgoY2IpID0+IGNiKCkpXG4gICAgICAgICAgICAgICAgZGlzcG9zZS5sZW5ndGggPSAwXG4gICAgICAgICAgICAgICAgY2FjaGUubGVuZ3RoID0gMFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgZ2V0ID0gKCk6IFYgPT4ge1xuICAgICAgICByZXR1cm4gdmFsdWUgIT09IGVtcHR5ID8gdmFsdWUgOiBjb21wdXRlKClcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEFjY2Vzc29yKGdldCwgc3Vic2NyaWJlKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhbiBgQWNjZXNzb3JgIGZyb20gYSBwcm9kdWNlciBmdW5jdGlvbiB0aGF0IHRyYWNrcyBpdHMgZGVwZW5kZW5jaWVzLlxuICpcbiAqIGBgYHRzIEV4YW1wbGVcbiAqIGxldCBhOiBBY2Nlc3NvcjxudW1iZXI+XG4gKiBsZXQgYjogQWNjZXNzb3I8bnVtYmVyPlxuICogY29uc3QgYzogQWNjZXNzb3I8bnVtYmVyPiA9IGNyZWF0ZUNvbXB1dGVkKChnZXQpID0+IGdldChhKSArIGdldChiKSlcbiAqIGBgYFxuICpcbiAqIEBleHBlcmltZW50YWxcbiAqIEBwYXJhbSBwcm9kdWNlciBUaGUgcHJvZHVjZXIgZnVuY3Rpb24gd2hpY2ggbGV0J3MgeW91IHRyYWNrIGRlcGVuZGVuY2llc1xuICogQHJldHVybnMgVGhlIGNvbXB1dGVkIGBBY2Nlc3NvcmAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb21wdXRlZDxUPihcbiAgICBwcm9kdWNlcjogKHRyYWNrOiA8Vj4oc2lnbmFsOiBBY2Nlc3NvcjxWPikgPT4gVikgPT4gVCxcbik6IEFjY2Vzc29yPFQ+XG5cbi8qKlxuICogQ3JlYXRlIGFuIGBBY2Nlc3NvcmAgd2hpY2ggaXMgY29tcHV0ZWQgZnJvbSBhIGxpc3Qgb2YgZ2l2ZW4gYEFjY2Vzc29yYHMuXG4gKlxuICogYGBgdHMgRXhhbXBsZVxuICogbGV0IGE6IEFjY2Vzc29yPG51bWJlcj5cbiAqIGxldCBiOiBBY2Nlc3NvcjxzdHJpbmc+XG4gKiBjb25zdCBjOiBBY2Nlc3NvcjxbbnVtYmVyLCBzdHJpbmddPiA9IGNyZWF0ZUNvbXB1dGVkKFthLCBiXSlcbiAqIGNvbnN0IGQ6IEFjY2Vzc29yPHN0cmluZz4gPSBjcmVhdGVDb21wdXRlZChbYSwgYl0sIChhOiBudW1iZXIsIGI6IHN0cmluZykgPT4gYCR7YX0gJHtifWApXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gZGVwcyBMaXN0IG9mIGBBY2Nlc3NvcnNgLlxuICogQHBhcmFtIHRyYW5zZm9ybSBBbiBvcHRpb25hbCB0cmFuc2Zvcm0gZnVuY3Rpb24uXG4gKiBAcmV0dXJucyBUaGUgY29tcHV0ZWQgYEFjY2Vzc29yYC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbXB1dGVkPFxuICAgIGNvbnN0IERlcHMgZXh0ZW5kcyBBcnJheTxBY2Nlc3Nvcjxhbnk+PixcbiAgICBBcmdzIGV4dGVuZHMgeyBbSyBpbiBrZXlvZiBEZXBzXTogQWNjZXNzZWQ8RGVwc1tLXT4gfSxcbiAgICBUID0gQXJncyxcbj4oZGVwczogRGVwcywgdHJhbnNmb3JtPzogKC4uLmFyZ3M6IEFyZ3MpID0+IFQpOiBBY2Nlc3NvcjxUPlxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29tcHV0ZWQoXG4gICAgLi4uYXJnczpcbiAgICAgICAgfCBbcHJvZHVjZXI6ICh0cmFjazogPFY+KHNpZ25hbDogQWNjZXNzb3I8Vj4pID0+IFYpID0+IHVua25vd25dXG4gICAgICAgIHwgW2RlcHM6IEFycmF5PEFjY2Vzc29yPiwgdHJhbnNmb3JtPzogKC4uLmFyZ3M6IHVua25vd25bXSkgPT4gdW5rbm93bl1cbikge1xuICAgIGNvbnN0IFtkZXBzT3JQcm9kdWNlciwgdHJhbnNmb3JtXSA9IGFyZ3NcbiAgICBpZiAodHlwZW9mIGRlcHNPclByb2R1Y2VyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUNvbXB1dGVkUHJvZHVjZXIoZGVwc09yUHJvZHVjZXIpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUNvbXB1dGVkQXJncyhkZXBzT3JQcm9kdWNlciwgdHJhbnNmb3JtKVxuICAgIH1cbn1cblxuLyoqXG4gKiBDcmVhdGUgYW4gYEFjY2Vzc29yYCBvbiBhIGBHT2JqZWN0Lk9iamVjdGAncyBgcHJvcGVydHlgLlxuICpcbiAqIEBwYXJhbSBvYmplY3QgVGhlIGBHT2JqZWN0Lk9iamVjdGAgdG8gY3JlYXRlIHRoZSBgQWNjZXNzb3JgIG9uLlxuICogQHBhcmFtIHByb3BlcnR5IE9uZSBvZiBpdHMgcmVnaXN0ZXJlZCBwcm9wZXJ0aWVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQmluZGluZzxUIGV4dGVuZHMgR09iamVjdC5PYmplY3QsIFAgZXh0ZW5kcyBrZXlvZiBUPihcbiAgICBvYmplY3Q6IFQsXG4gICAgcHJvcGVydHk6IEV4dHJhY3Q8UCwgc3RyaW5nPixcbik6IEFjY2Vzc29yPFRbUF0+XG5cbi8vIFRPRE86IHN1cHBvcnQgbmVzdGVkIGJpbmRpbmdzXG4vLyBleHBvcnQgZnVuY3Rpb24gY3JlYXRlQmluZGluZzxcbi8vICAgICBUIGV4dGVuZHMgR09iamVjdC5PYmplY3QsXG4vLyAgICAgUDEgZXh0ZW5kcyBrZXlvZiBULFxuLy8gICAgIFAyIGV4dGVuZHMga2V5b2YgTm9uTnVsbGFibGU8VFtQMV0+LFxuLy8gPihcbi8vICAgICBvYmplY3Q6IFQsXG4vLyAgICAgcHJvcGVydHkxOiBFeHRyYWN0PFAxLCBzdHJpbmc+LFxuLy8gICAgIHByb3BlcnR5MjogRXh0cmFjdDxQMiwgc3RyaW5nPixcbi8vICk6IEFjY2Vzc29yPE5vbk51bGxhYmxlPFRbUDFdPltQMl0+XG5cbi8qKlxuICogQ3JlYXRlIGFuIGBBY2Nlc3NvcmAgb24gYSBgR2lvLlNldHRpbmdzYCdzIGBrZXlgLlxuICogVmFsdWVzIGFyZSByZWN1cnNpdmVseSB1bnBhY2tlZC5cbiAqXG4gKiBAZGVwcmVjYXRlZCBwcmVmZXIgdXNpbmcge0BsaW5rIGNyZWF0ZVNldHRpbmdzfS5cbiAqIEBwYXJhbSBvYmplY3QgVGhlIGBHaW8uU2V0dGluZ3NgIHRvIGNyZWF0ZSB0aGUgYEFjY2Vzc29yYCBvbi5cbiAqIEBwYXJhbSBrZXkgVGhlIHNldHRpbmdzIGtleVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQmluZGluZzxUPihzZXR0aW5nczogR2lvLlNldHRpbmdzLCBrZXk6IHN0cmluZyk6IEFjY2Vzc29yPFQ+XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVCaW5kaW5nPFQ+KG9iamVjdDogR09iamVjdC5PYmplY3QgfCBHaW8uU2V0dGluZ3MsIGtleTogc3RyaW5nKTogQWNjZXNzb3I8VD4ge1xuICAgIGNvbnN0IHByb3AgPSBrZWJhYmlmeShrZXkpIGFzIGtleW9mIHR5cGVvZiBvYmplY3RcblxuICAgIGNvbnN0IHN1YnNjcmliZTogU3Vic2NyaWJlRnVuY3Rpb24gPSAoY2FsbGJhY2spID0+IHtcbiAgICAgICAgY29uc3Qgc2lnID0gb2JqZWN0IGluc3RhbmNlb2YgR2lvLlNldHRpbmdzID8gXCJjaGFuZ2VkXCIgOiBcIm5vdGlmeVwiXG4gICAgICAgIGNvbnN0IGlkID0gb2JqZWN0LmNvbm5lY3QoYCR7c2lnfTo6JHtwcm9wfWAsICgpID0+IGNhbGxiYWNrKCkpXG4gICAgICAgIHJldHVybiAoKSA9PiBvYmplY3QuZGlzY29ubmVjdChpZClcbiAgICB9XG5cbiAgICBjb25zdCBnZXQgPSAoKTogVCA9PiB7XG4gICAgICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBHaW8uU2V0dGluZ3MpIHtcbiAgICAgICAgICAgIHJldHVybiBvYmplY3QuZ2V0X3ZhbHVlKGtleSkucmVjdXJzaXZlVW5wYWNrKCkgYXMgVFxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIEdPYmplY3QuT2JqZWN0KSB7XG4gICAgICAgICAgICBjb25zdCBnZXR0ZXIgPSBgZ2V0XyR7cHJvcC5yZXBsYWNlQWxsKFwiLVwiLCBcIl9cIil9YCBhcyBrZXlvZiB0eXBlb2Ygb2JqZWN0XG5cbiAgICAgICAgICAgIGlmIChnZXR0ZXIgaW4gb2JqZWN0ICYmIHR5cGVvZiBvYmplY3RbZ2V0dGVyXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChvYmplY3RbZ2V0dGVyXSBhcyAoKSA9PiB1bmtub3duKSgpIGFzIFRcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHByb3AgaW4gb2JqZWN0KSByZXR1cm4gb2JqZWN0W3Byb3BdIGFzIFRcbiAgICAgICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSByZXR1cm4gb2JqZWN0W2tleSBhcyBrZXlvZiB0eXBlb2Ygb2JqZWN0XSBhcyBUXG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBFcnJvcihgY2Fubm90IGdldCBwcm9wZXJ0eSBcIiR7a2V5fVwiIG9uIFwiJHtvYmplY3R9XCJgKVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgQWNjZXNzb3IoZ2V0LCBzdWJzY3JpYmUpXG59XG5cbnR5cGUgQ29ubmVjdGlvbkhhbmRsZXI8XG4gICAgTyBleHRlbmRzIEdPYmplY3QuT2JqZWN0LFxuICAgIFMgZXh0ZW5kcyBrZXlvZiBPW1wiJHNpZ25hbHNcIl0sXG4gICAgVCxcbj4gPSBPW1wiJHNpZ25hbHNcIl1bU10gZXh0ZW5kcyAoLi4uYXJnczogYW55W10pID0+IGluZmVyIFJcbiAgICA/IHZvaWQgZXh0ZW5kcyBSXG4gICAgICAgID8gKC4uLmFyZ3M6IFsuLi5QYXJhbWV0ZXJzPE9bXCIkc2lnbmFsc1wiXVtTXT4sIGN1cnJlbnRWYWx1ZTogVF0pID0+IFRcbiAgICAgICAgOiBuZXZlclxuICAgIDogbmV2ZXJcblxuLyoqXG4gKiBDcmVhdGUgYW4gYEFjY2Vzc29yYCB3aGljaCBzZXRzIHVwIGEgbGlzdCBvZiBgR09iamVjdC5PYmplY3RgIHNpZ25hbCBjb25uZWN0aW9ucy5cbiAqXG4gKiBgYGB0cyBFeGFtcGxlXG4gKiBjb25zdCB2YWx1ZTogQWNjZXNzb3I8c3RyaW5nPiA9IGNyZWF0ZUNvbm5lY3Rpb24oXG4gKiAgIFwiaW5pdGlhbCB2YWx1ZVwiLFxuICogICBbb2JqMSwgXCJzaWctbmFtZVwiLCAoLi4uYXJncykgPT4gXCJzdHJcIl0sXG4gKiAgIFtvYmoyLCBcInNpZy1uYW1lXCIsICguLi5hcmdzKSA9PiBcInN0clwiXVxuICogKVxuICogYGBgXG4gKlxuICogQHBhcmFtIGluaXQgVGhlIGluaXRpYWwgdmFsdWVcbiAqIEBwYXJhbSBzaWduYWxzIEEgbGlzdCBvZiBgR09iamVjdC5PYmplY3RgLCBzaWduYWwgbmFtZSBhbmQgY2FsbGJhY2sgcGFpcnMgdG8gY29ubmVjdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbm5lY3Rpb248XG4gICAgVCxcbiAgICBPMSBleHRlbmRzIEdPYmplY3QuT2JqZWN0LFxuICAgIFMxIGV4dGVuZHMga2V5b2YgTzFbXCIkc2lnbmFsc1wiXSxcbiAgICBPMiBleHRlbmRzIEdPYmplY3QuT2JqZWN0LFxuICAgIFMyIGV4dGVuZHMga2V5b2YgTzJbXCIkc2lnbmFsc1wiXSxcbiAgICBPMyBleHRlbmRzIEdPYmplY3QuT2JqZWN0LFxuICAgIFMzIGV4dGVuZHMga2V5b2YgTzNbXCIkc2lnbmFsc1wiXSxcbiAgICBPNCBleHRlbmRzIEdPYmplY3QuT2JqZWN0LFxuICAgIFM0IGV4dGVuZHMga2V5b2YgTzRbXCIkc2lnbmFsc1wiXSxcbiAgICBPNSBleHRlbmRzIEdPYmplY3QuT2JqZWN0LFxuICAgIFM1IGV4dGVuZHMga2V5b2YgTzVbXCIkc2lnbmFsc1wiXSxcbiAgICBPNiBleHRlbmRzIEdPYmplY3QuT2JqZWN0LFxuICAgIFM2IGV4dGVuZHMga2V5b2YgTzZbXCIkc2lnbmFsc1wiXSxcbiAgICBPNyBleHRlbmRzIEdPYmplY3QuT2JqZWN0LFxuICAgIFM3IGV4dGVuZHMga2V5b2YgTzdbXCIkc2lnbmFsc1wiXSxcbiAgICBPOCBleHRlbmRzIEdPYmplY3QuT2JqZWN0LFxuICAgIFM4IGV4dGVuZHMga2V5b2YgTzhbXCIkc2lnbmFsc1wiXSxcbiAgICBPOSBleHRlbmRzIEdPYmplY3QuT2JqZWN0LFxuICAgIFM5IGV4dGVuZHMga2V5b2YgTzlbXCIkc2lnbmFsc1wiXSxcbj4oXG4gICAgaW5pdDogVCxcbiAgICBoMTogW08xLCBTMSwgQ29ubmVjdGlvbkhhbmRsZXI8TzEsIFMxLCBUPl0sXG4gICAgaDI/OiBbTzIsIFMyLCBDb25uZWN0aW9uSGFuZGxlcjxPMiwgUzIsIFQ+XSxcbiAgICBoMz86IFtPMywgUzMsIENvbm5lY3Rpb25IYW5kbGVyPE8zLCBTMywgVD5dLFxuICAgIGg0PzogW080LCBTNCwgQ29ubmVjdGlvbkhhbmRsZXI8TzQsIFM0LCBUPl0sXG4gICAgaDU/OiBbTzUsIFM1LCBDb25uZWN0aW9uSGFuZGxlcjxPNSwgUzUsIFQ+XSxcbiAgICBoNj86IFtPNiwgUzYsIENvbm5lY3Rpb25IYW5kbGVyPE82LCBTNiwgVD5dLFxuICAgIGg3PzogW083LCBTNywgQ29ubmVjdGlvbkhhbmRsZXI8TzcsIFM3LCBUPl0sXG4gICAgaDg/OiBbTzgsIFM4LCBDb25uZWN0aW9uSGFuZGxlcjxPOCwgUzgsIFQ+XSxcbiAgICBoOT86IFtPOSwgUzksIENvbm5lY3Rpb25IYW5kbGVyPE85LCBTOSwgVD5dLFxuKSB7XG4gICAgbGV0IHZhbHVlID0gaW5pdFxuICAgIGxldCBkaXNwb3NlOiBBcnJheTxEaXNwb3NlRnVuY3Rpb24+XG4gICAgY29uc3Qgc3Vic2NyaWJlcnMgPSBuZXcgU2V0PFN1YnNjcmliZUNhbGxiYWNrPigpXG4gICAgY29uc3Qgc2lnbmFscyA9IFtoMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBoNywgaDgsIGg5XS5maWx0ZXIoKGgpID0+IGggIT09IHVuZGVmaW5lZClcblxuICAgIGNvbnN0IHN1YnNjcmliZTogU3Vic2NyaWJlRnVuY3Rpb24gPSAoY2FsbGJhY2spID0+IHtcbiAgICAgICAgaWYgKHN1YnNjcmliZXJzLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgIGRpc3Bvc2UgPSBzaWduYWxzLm1hcCgoW29iamVjdCwgc2lnbmFsLCBjYWxsYmFja10pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpZCA9IEdPYmplY3QuT2JqZWN0LnByb3RvdHlwZS5jb25uZWN0LmNhbGwoXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdCxcbiAgICAgICAgICAgICAgICAgICAgc2lnbmFsIGFzIHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgKF8sIC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gY2FsbGJhY2soLi4uYXJncywgdmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBuZXdWYWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5LmZyb20oc3Vic2NyaWJlcnMpLmZvckVhY2goKGNiKSA9PiBjYigpKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIClcblxuICAgICAgICAgICAgICAgIHJldHVybiAoKSA9PiBHT2JqZWN0Lk9iamVjdC5wcm90b3R5cGUuZGlzY29ubmVjdC5jYWxsKG9iamVjdCwgaWQpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgc3Vic2NyaWJlcnMuYWRkKGNhbGxiYWNrKVxuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBzdWJzY3JpYmVycy5kZWxldGUoY2FsbGJhY2spXG4gICAgICAgICAgICBpZiAoc3Vic2NyaWJlcnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGRpc3Bvc2UubWFwKChjYikgPT4gY2IoKSlcbiAgICAgICAgICAgICAgICBkaXNwb3NlLmxlbmd0aCA9IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgQWNjZXNzb3IoKCkgPT4gdmFsdWUsIHN1YnNjcmliZSlcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBzaWduYWwgZnJvbSBhIHByb3ZpZXIgZnVuY3Rpb24uXG4gKiBUaGUgcHJvdmlkZXIgaXMgY2FsbGVkIHdoZW4gdGhlIGZpcnN0IHN1YnNjcmliZXIgYXBwZWFycyBhbmQgdGhlIHJldHVybmVkIGRpc3Bvc2VcbiAqIGZ1bmN0aW9uIGZyb20gdGhlIHByb3ZpZGVyIHdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIG51bWJlciBvZiBzdWJzY3JpYmVycyBkcm9wIHRvIHplcm8uXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGB0c1xuICogY29uc3QgdmFsdWUgPSBjcmVhdGVFeHRlcm5hbCgwLCAoc2V0KSA9PiB7XG4gKiAgIGNvbnN0IGludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4gc2V0KCh2KSA9PiB2ICsgMSkpXG4gKiAgIHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKGludGVydmFsKVxuICogfSlcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBpbml0IFRoZSBpbml0aWFsIHZhbHVlXG4gKiBAcGFyYW0gcHJvZHVjZXIgVGhlIHByb2R1Y2VyIGZ1bmN0aW9uIHdoaWNoIHNob3VsZCByZXR1cm4gYSBjbGVhbnVwIGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFeHRlcm5hbDxUPihcbiAgICBpbml0OiBULFxuICAgIHByb2R1Y2VyOiAoc2V0OiBTZXR0ZXI8VD4pID0+IERpc3Bvc2VGdW5jdGlvbixcbik6IEFjY2Vzc29yPFQ+IHtcbiAgICBsZXQgY3VycmVudFZhbHVlID0gaW5pdFxuICAgIGxldCBkaXNwb3NlOiBEaXNwb3NlRnVuY3Rpb25cbiAgICBjb25zdCBzdWJzY3JpYmVycyA9IG5ldyBTZXQ8U3Vic2NyaWJlQ2FsbGJhY2s+KClcblxuICAgIGNvbnN0IHN1YnNjcmliZTogU3Vic2NyaWJlRnVuY3Rpb24gPSAoY2FsbGJhY2spID0+IHtcbiAgICAgICAgaWYgKHN1YnNjcmliZXJzLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgIGRpc3Bvc2UgPSBwcm9kdWNlcigodjogdW5rbm93bikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlOiBUID0gdHlwZW9mIHYgPT09IFwiZnVuY3Rpb25cIiA/IHYoY3VycmVudFZhbHVlKSA6IHZcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IGN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50VmFsdWUgPSBuZXdWYWx1ZVxuICAgICAgICAgICAgICAgICAgICBBcnJheS5mcm9tKHN1YnNjcmliZXJzKS5mb3JFYWNoKChjYikgPT4gY2IoKSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgc3Vic2NyaWJlcnMuYWRkKGNhbGxiYWNrKVxuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBzdWJzY3JpYmVycy5kZWxldGUoY2FsbGJhY2spXG4gICAgICAgICAgICBpZiAoc3Vic2NyaWJlcnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGRpc3Bvc2UoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBBY2Nlc3NvcigoKSA9PiBjdXJyZW50VmFsdWUsIHN1YnNjcmliZSlcbn1cblxuLyoqIEBleHBlcmltZW50YWwgKi9cbnR5cGUgU2V0dGluZ3M8VCBleHRlbmRzIFJlY29yZDxzdHJpbmcsIHN0cmluZz4+ID0ge1xuICAgIFtLIGluIGtleW9mIFQgYXMgVW5jYXBpdGFsaXplPFBhc2NhbGlmeTxLPj5dOiBBY2Nlc3NvcjxSZWN1cnNpdmVJbmZlcjxUW0tdPj5cbn0gJiB7XG4gICAgW0sgaW4ga2V5b2YgVCBhcyBgc2V0JHtQYXNjYWxpZnk8Sz59YF06IFNldHRlcjxEZWVwSW5mZXI8VFtLXT4+XG59XG5cbi8qKlxuICogQGV4cGVyaW1lbnRhbFxuICpcbiAqIFdyYXAgYSB7QGxpbmsgR2lvLlNldHRpbmdzfSBpbnRvIGEgY29sbGVjdGlvbiBvZiBzZXR0ZXJzIGFuZCBhY2Nlc3NvcnMuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGB0c1xuICogY29uc3QgcyA9IGNyZWF0ZVNldHRpbmdzKHNldHRpbmdzLCB7XG4gKiAgIFwiY29tcGxleC1rZXlcIjogXCJhe3Nhe3NzfX1cIixcbiAqICAgXCJzaW1wbGUta2V5XCI6IFwic1wiLFxuICogfSlcbiAqXG4gKiBzLmNvbXBsZXhLZXkuc3Vic2NyaWJlKCgpID0+IHtcbiAqICAgcHJpbnQocy5jb21wbGV4S2V5LmdldCgpKVxuICogfSlcbiAqXG4gKiBzLnNldENvbXBsZXhLZXkoKHByZXYpID0+ICh7XG4gKiAgIC4uLnByZXYsXG4gKiAgIGtleTogeyBuZXN0ZWQ6IFwiXCIgfSxcbiAqIH0pKVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZXR0aW5nczxjb25zdCBUIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgc3RyaW5nPj4oXG4gICAgc2V0dGluZ3M6IEdpby5TZXR0aW5ncyxcbiAgICBrZXlzOiBULFxuKTogU2V0dGluZ3M8VD4ge1xuICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgICAgIE9iamVjdC5lbnRyaWVzKGtleXMpLmZsYXRNYXAoKFtrZXksIHR5cGVdKSA9PiBbXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgY2FtZWxpZnkoa2V5KSxcbiAgICAgICAgICAgICAgICBuZXcgQWNjZXNzb3IoXG4gICAgICAgICAgICAgICAgICAgICgpID0+IHNldHRpbmdzLmdldF92YWx1ZShrZXkpLnJlY3Vyc2l2ZVVucGFjaygpLFxuICAgICAgICAgICAgICAgICAgICAoY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gc2V0dGluZ3MuY29ubmVjdChgY2hhbmdlZDo6JHtrZXl9YCwgY2FsbGJhY2spXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4gc2V0dGluZ3MuZGlzY29ubmVjdChpZClcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBgc2V0JHtrZXlbMF0udG9VcHBlckNhc2UoKSArIGNhbWVsaWZ5KGtleSkuc2xpY2UoMSl9YCxcbiAgICAgICAgICAgICAgICAodjogdW5rbm93bikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5zZXRfdmFsdWUoXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgR0xpYi5WYXJpYW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHYgPT09IFwiZnVuY3Rpb25cIiA/IHYoc2V0dGluZ3MuZ2V0X3ZhbHVlKGtleSkuZGVlcFVucGFjaygpKSA6IHYsXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIF0pLFxuICAgIClcbn1cbiIsICJpbXBvcnQgdHlwZSBHT2JqZWN0IGZyb20gXCJnaTovL0dPYmplY3RcIlxuaW1wb3J0IHsgdHlwZSBBY2Nlc3NvciB9IGZyb20gXCIuL3N0YXRlLmpzXCJcblxudHlwZSBHT2JqID0gR09iamVjdC5PYmplY3RcbmV4cG9ydCB0eXBlIENDPFQgZXh0ZW5kcyBHT2JqID0gR09iaj4gPSB7IG5ldyAocHJvcHM6IGFueSk6IFQgfVxuZXhwb3J0IHR5cGUgRkM8VCBleHRlbmRzIEdPYmogPSBHT2JqPiA9IChwcm9wczogYW55KSA9PiBUXG5cbnR5cGUgQ3NzU2V0dGVyID0gKG9iamVjdDogR09iaiwgY3NzOiBzdHJpbmcgfCBBY2Nlc3NvcjxzdHJpbmc+KSA9PiB2b2lkXG5cbmV4cG9ydCBmdW5jdGlvbiBjb25maWd1ZShjb25mOiBQYXJ0aWFsPEpzeEVudj4pIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihlbnYsIGNvbmYpXG59XG5cbnR5cGUgSnN4RW52ID0ge1xuICAgIGludHJpbnNpY0VsZW1lbnRzOiBSZWNvcmQ8c3RyaW5nLCBDQyB8IEZDPlxuICAgIHRleHROb2RlKG5vZGU6IHN0cmluZyB8IG51bWJlcik6IEdPYmpcbiAgICBhcHBlbmRDaGlsZChwYXJlbnQ6IEdPYmosIGNoaWxkOiBHT2JqKTogdm9pZFxuICAgIHJlbW92ZUNoaWxkKHBhcmVudDogR09iaiwgY2hpbGQ6IEdPYmopOiB2b2lkXG4gICAgc2V0Q3NzOiBDc3NTZXR0ZXJcbiAgICBzZXRDbGFzczogQ3NzU2V0dGVyXG4gICAgLy8gc3RyaW5nW10gY2FuIGJlIHVzZSB0byBkZWxheSBzZXR0aW5nIHByb3BzIGFmdGVyIGNoaWxkcmVuXG4gICAgLy8gZS5nIEd0ay5TdGFja1tcInZpc2libGVDaGlsZE5hbWVcIl0gZGVwZW5kcyBvbiBjaGlsZHJlblxuICAgIGluaXRQcm9wcyhjdG9yOiB1bmtub3duLCBwcm9wczogYW55KTogdm9pZCB8IHN0cmluZ1tdXG4gICAgZGVmYXVsdENsZWFudXAob2JqZWN0OiBHT2JqKTogdm9pZFxufVxuXG5mdW5jdGlvbiBtaXNzaW5nSW1wbCgpOiBhbnkge1xuICAgIHRocm93IEVycm9yKFwibWlzc2luZyBpbXBsXCIpXG59XG5cbmV4cG9ydCBjb25zdCBlbnY6IEpzeEVudiA9IHtcbiAgICBpbnRyaW5zaWNFbGVtZW50czoge30sXG4gICAgdGV4dE5vZGU6IG1pc3NpbmdJbXBsLFxuICAgIGFwcGVuZENoaWxkOiBtaXNzaW5nSW1wbCxcbiAgICByZW1vdmVDaGlsZDogbWlzc2luZ0ltcGwsXG4gICAgc2V0Q3NzOiBtaXNzaW5nSW1wbCxcbiAgICBzZXRDbGFzczogbWlzc2luZ0ltcGwsXG4gICAgaW5pdFByb3BzOiAoKSA9PiB2b2lkIDAsXG4gICAgZGVmYXVsdENsZWFudXA6ICgpID0+IHZvaWQgMCxcbn1cbiIsICJleHBvcnQgY2xhc3MgU2NvcGUge1xuICAgIHN0YXRpYyBjdXJyZW50PzogU2NvcGUgfCBudWxsXG5cbiAgICBwYXJlbnQ/OiBTY29wZSB8IG51bGxcbiAgICBjb250ZXh0cyA9IG5ldyBNYXA8Q29udGV4dCwgdW5rbm93bj4oKVxuXG4gICAgcHJpdmF0ZSBjbGVhbnVwcyA9IG5ldyBTZXQ8KCkgPT4gdm9pZD4oKVxuICAgIHByaXZhdGUgbW91bnRzID0gbmV3IFNldDwoKSA9PiB2b2lkPigpXG4gICAgcHJpdmF0ZSBtb3VudGVkID0gZmFsc2VcblxuICAgIGNvbnN0cnVjdG9yKHBhcmVudD86IFNjb3BlIHwgbnVsbCkge1xuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudFxuICAgIH1cblxuICAgIG9uQ2xlYW51cChjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLmNsZWFudXBzPy5hZGQoY2FsbGJhY2spXG4gICAgfVxuXG4gICAgb25Nb3VudChjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgICAgICBpZiAodGhpcy5wYXJlbnQgJiYgIXRoaXMucGFyZW50Lm1vdW50ZWQpIHtcbiAgICAgICAgICAgIHRoaXMucGFyZW50Lm9uTW91bnQoY2FsbGJhY2spXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1vdW50cy5hZGQoY2FsbGJhY2spXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBydW48VD4oZm46ICgpID0+IFQpIHtcbiAgICAgICAgY29uc3QgcHJldiA9IFNjb3BlLmN1cnJlbnRcbiAgICAgICAgU2NvcGUuY3VycmVudCA9IHRoaXNcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGZuKClcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMubW91bnRzLmZvckVhY2goKGNiKSA9PiBjYigpKVxuICAgICAgICAgICAgdGhpcy5tb3VudHMuY2xlYXIoKVxuICAgICAgICAgICAgdGhpcy5tb3VudGVkID0gdHJ1ZVxuICAgICAgICAgICAgU2NvcGUuY3VycmVudCA9IHByZXZcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHRoaXMuY2xlYW51cHMuZm9yRWFjaCgoY2IpID0+IGNiKCkpXG4gICAgICAgIHRoaXMuY2xlYW51cHMuY2xlYXIoKVxuICAgICAgICB0aGlzLmNvbnRleHRzLmNsZWFyKClcbiAgICAgICAgZGVsZXRlIHRoaXMucGFyZW50XG4gICAgfVxufVxuXG5leHBvcnQgdHlwZSBDb250ZXh0PFQgPSBhbnk+ID0ge1xuICAgIHVzZSgpOiBUXG4gICAgcHJvdmlkZTxSPih2YWx1ZTogVCwgZm46ICgpID0+IFIpOiBSXG4gICAgKHByb3BzOiB7IHZhbHVlOiBUOyBjaGlsZHJlbjogKCkgPT4gSlNYLkVsZW1lbnQgfSk6IEpTWC5FbGVtZW50XG59XG5cbi8qKlxuICogRXhhbXBsZSBVc2FnZTpcbiAqIGBgYHRzeFxuICogY29uc3QgTXlDb250ZXh0ID0gY3JlYXRlQ29udGV4dChcImZhbGxiYWNrLXZhbHVlXCIpXG4gKlxuICogZnVuY3Rpb24gQ29uc3VtZXJDb21wb25lbnQoKSB7XG4gKiAgIGNvbnN0IHZhbHVlID0gTXlDb250ZXh0LnVzZSgpXG4gKlxuICogICByZXR1cm4gPEd0ay5MYWJlbCBsYWJlbD17dmFsdWV9IC8+XG4gKiB9XG4gKlxuICogZnVuY3Rpb24gUHJvdmlkZXJDb21wb25lbnQoKSB7XG4gKiAgIHJldHVybiAoXG4gKiAgICAgPEd0ay5Cb3g+XG4gKiAgICAgICA8TXlDb250ZXh0IHZhbHVlPVwibXktdmFsdWVcIj5cbiAqICAgICAgICAgeygpID0+IDxDb25zdW1lckNvbXBvbmVudCAvPn1cbiAqICAgICAgIDwvTXlDb250ZXh0PlxuICogICAgIDwvR3RrLkJveD5cbiAqICAgKVxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb250ZXh0PFQ+KGRlZmF1bHRWYWx1ZTogVCk6IENvbnRleHQ8VD4ge1xuICAgIGxldCBjdHg6IENvbnRleHQ8VD5cblxuICAgIGZ1bmN0aW9uIHByb3ZpZGU8Uj4odmFsdWU6IFQsIGZuOiAoKSA9PiBSKTogUiB7XG4gICAgICAgIGNvbnN0IHNjb3BlID0gZ2V0U2NvcGUoKVxuICAgICAgICBzY29wZS5jb250ZXh0cy5zZXQoY3R4LCB2YWx1ZSlcbiAgICAgICAgcmV0dXJuIHNjb3BlLnJ1bihmbilcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1c2UoKTogVCB7XG4gICAgICAgIGxldCBzY29wZSA9IFNjb3BlLmN1cnJlbnRcbiAgICAgICAgd2hpbGUgKHNjb3BlKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHNjb3BlLmNvbnRleHRzLmdldChjdHgpXG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkgcmV0dXJuIHZhbHVlIGFzIFRcbiAgICAgICAgICAgIHNjb3BlID0gc2NvcGUucGFyZW50XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbnRleHQoeyB2YWx1ZSwgY2hpbGRyZW4gfTogeyB2YWx1ZTogVDsgY2hpbGRyZW46ICgpID0+IEpTWC5FbGVtZW50IH0pIHtcbiAgICAgICAgcmV0dXJuIHByb3ZpZGUodmFsdWUsIGNoaWxkcmVuKVxuICAgIH1cblxuICAgIHJldHVybiAoY3R4ID0gT2JqZWN0LmFzc2lnbihjb250ZXh0LCB7XG4gICAgICAgIHByb3ZpZGUsXG4gICAgICAgIHVzZSxcbiAgICB9KSlcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBzY29wZSB0aGF0IG93bnMgdGhlIGN1cnJlbnRseSBydW5uaW5nIGNvZGUuXG4gKlxuICogRXhhbXBsZTpcbiAqIGBgYHRzXG4gKiBjb25zdCBzY29wZSA9IGdldFNjb3BlKClcbiAqIHNldFRpbWVvdXQoKCkgPT4ge1xuICogICAvLyBUaGlzIGNhbGxiYWNrIGdldHMgcnVuIHdpdGhvdXQgYW4gb3duZXIgc2NvcGUuXG4gKiAgIC8vIFJlc3RvcmUgb3duZXIgdmlhIHNjb3BlLnJ1bjpcbiAqICAgc2NvcGUucnVuKCgpID0+IHtcbiAqICAgICBjb25zdCBmb28gPSBGb29Db250ZXh0LnVzZSgpXG4gKiAgICAgb25DbGVhbnVwKCgpID0+IHtcbiAqICAgICAgIHByaW50KFwic29tZSBjbGVhbnVwXCIpXG4gKiAgICAgfSlcbiAqICAgfSlcbiAqIH0sIDEwMDApXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNjb3BlKCk6IFNjb3BlIHtcbiAgICBjb25zdCBzY29wZSA9IFNjb3BlLmN1cnJlbnRcbiAgICBpZiAoIXNjb3BlKSB7XG4gICAgICAgIHRocm93IEVycm9yKFwiY2Fubm90IGdldCBzY29wZTogb3V0IG9mIHRyYWNraW5nIGNvbnRleHRcIilcbiAgICB9XG5cbiAgICByZXR1cm4gc2NvcGVcbn1cblxuLyoqXG4gKiBBdHRhY2ggYSBjbGVhbnVwIGNhbGxiYWNrIHRvIHRoZSBjdXJyZW50IHtAbGluayBTY29wZX0uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvbkNsZWFudXAoY2xlYW51cDogKCkgPT4gdm9pZCkge1xuICAgIGlmICghU2NvcGUuY3VycmVudCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKEVycm9yKFwib3V0IG9mIHRyYWNraW5nIGNvbnRleHQ6IHdpbGwgbm90IGJlIGFibGUgdG8gY2xlYW51cFwiKSlcbiAgICB9XG5cbiAgICBTY29wZS5jdXJyZW50Py5vbkNsZWFudXAoY2xlYW51cClcbn1cblxuLyoqXG4gKiBBdHRhY2ggYSBjYWxsYmFjayB0byBydW4gd2hlbiB0aGUgY3VycmVudGx5IHJ1bm5pbmcge0BsaW5rIFNjb3BlfSByZXR1cm5zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gb25Nb3VudChjbGVhbnVwOiAoKSA9PiB2b2lkKSB7XG4gICAgaWYgKCFTY29wZS5jdXJyZW50KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoRXJyb3IoXCJjYW5ub3QgYXR0YWNoIG9uTW91bnQ6IG91dCBvZiB0cmFja2luZyBjb250ZXh0XCIpKVxuICAgIH1cblxuICAgIFNjb3BlLmN1cnJlbnQ/Lm9uTW91bnQoY2xlYW51cClcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgcm9vdCB7QGxpbmsgU2NvcGV9IHRoYXQgd2hlbiBkaXNwb3NlZCB3aWxsIHJlbW92ZVxuICogYW55IGNoaWxkIHNpZ25hbCBoYW5kbGVyIG9yIHN0YXRlIHN1YnNjcmliZXIuXG4gKlxuICogRXhhbXBsZTpcbiAqIGBgYHRzeFxuICogY3JlYXRlUm9vdCgoZGlzcG9zZSkgPT4ge1xuICogICBsZXQgcm9vdDogR3RrLldpbmRvd1xuICpcbiAqICAgY29uc3QgW3N0YXRlXSA9IGNyZWF0ZVN0YXRlKFwidmFsdWVcIilcbiAqXG4gKiAgIGNvbnN0IHJlbW92ZSA9ICgpID0+IHtcbiAqICAgICByb290LmRlc3Ryb3koKVxuICogICAgIGRpc3Bvc2UoKVxuICogICB9XG4gKlxuICogICByZXR1cm4gKFxuICogICAgIDxHdGsuV2luZG93ICQ9eyhzZWxmKSA9PiAocm9vdCA9IHNlbGYpfT5cbiAqICAgICAgIDxHdGsuQm94PlxuICogICAgICAgICA8R3RrLkxhYmVsIGxhYmVsPXtzdGF0ZX0gLz5cbiAqICAgICAgICAgPEd0ay5CdXR0b24gJGNsaWNrZWQ9e3JlbW92ZX0gLz5cbiAqICAgICAgIDwvR3RrLkJveD5cbiAqICAgICA8L0d0ay5XaW5kb3c+XG4gKiAgIClcbiAqIH0pXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJvb3Q8VD4oZm46IChkaXNwb3NlOiAoKSA9PiB2b2lkKSA9PiBUKSB7XG4gICAgY29uc3Qgc2NvcGUgPSBuZXcgU2NvcGUobnVsbClcbiAgICByZXR1cm4gc2NvcGUucnVuKCgpID0+IGZuKCgpID0+IHNjb3BlLmRpc3Bvc2UoKSkpXG59XG4iLCAiaW1wb3J0IHsgRnJhZ21lbnQgfSBmcm9tIFwiLi9GcmFnbWVudC5qc1wiXG5pbXBvcnQgeyBBY2Nlc3NvciwgdHlwZSBTdGF0ZSwgY3JlYXRlU3RhdGUgfSBmcm9tIFwiLi9zdGF0ZS5qc1wiXG5pbXBvcnQgeyBlbnYgfSBmcm9tIFwiLi9lbnYuanNcIlxuaW1wb3J0IHsgZ2V0U2NvcGUsIG9uQ2xlYW51cCwgU2NvcGUgfSBmcm9tIFwiLi9zY29wZS5qc1wiXG5cbmludGVyZmFjZSBGb3JQcm9wczxJdGVtLCBFbCBleHRlbmRzIEpTWC5FbGVtZW50LCBLZXk+IHtcbiAgICBlYWNoOiBBY2Nlc3NvcjxJdGVyYWJsZTxJdGVtPj5cbiAgICBjaGlsZHJlbjogKGl0ZW06IEl0ZW0sIGluZGV4OiBBY2Nlc3NvcjxudW1iZXI+KSA9PiBFbFxuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdG8gcnVuIGZvciBlYWNoIHJlbW92ZWQgZWxlbWVudC5cbiAgICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBkZXBlbmRzIG9uIHRoZSBlbnZpcm9ubWVudDpcbiAgICAgKlxuICAgICAqIC0gKipHdGs0Kio6IG51bGxcbiAgICAgKiAtICoqR3RrMyoqOiBHdGsuV2lkZ2V0LnByb3RvdHlwZS5kZXN0cm95XG4gICAgICogLSAqKkdub21lKio6IENsdXR0ZXIuQWN0b3IucHJvdG90eXBlLmRlc3Ryb3lcbiAgICAgKi9cbiAgICBjbGVhbnVwPzogbnVsbCB8ICgoZWxlbWVudDogRWwsIGl0ZW06IEl0ZW0sIGluZGV4OiBudW1iZXIpID0+IHZvaWQpXG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB0aGF0IGdlbmVyYXRlcyB0aGUga2V5IGZvciBlYWNoIGl0ZW0uXG4gICAgICpcbiAgICAgKiBCeSBkZWZhdWx0IGl0ZW1zIGFyZSBtYXBwZWQgYnk6XG4gICAgICogLSB2YWx1ZSBpbiBjYXNlIG9mIHByaW1pdGl2ZSB2YWx1ZXNcbiAgICAgKiAtIHJlZmVyZW5jZSBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBpZD86IChpdGVtOiBJdGVtKSA9PiBLZXkgfCBJdGVtXG59XG5cbi8vIFRPRE86IHN1cHBvcnQgR2lvLkxpc3RNb2RlbFxuXG5leHBvcnQgZnVuY3Rpb24gRm9yPEl0ZW0sIEVsIGV4dGVuZHMgSlNYLkVsZW1lbnQsIEtleT4oe1xuICAgIGVhY2gsXG4gICAgY2hpbGRyZW46IG1rQ2hpbGQsXG4gICAgY2xlYW51cCxcbiAgICBpZCA9IChpdGVtOiBJdGVtKSA9PiBpdGVtLFxufTogRm9yUHJvcHM8SXRlbSwgRWwsIEtleT4pOiBGcmFnbWVudDxFbD4ge1xuICAgIHR5cGUgTWFwSXRlbSA9IHsgaXRlbTogSXRlbTsgY2hpbGQ6IEVsOyBpbmRleDogU3RhdGU8bnVtYmVyPjsgc2NvcGU6IFNjb3BlIH1cblxuICAgIGNvbnN0IGN1cnJlbnRTY29wZSA9IGdldFNjb3BlKClcbiAgICBjb25zdCBtYXAgPSBuZXcgTWFwPEl0ZW0gfCBLZXksIE1hcEl0ZW0+KClcbiAgICBjb25zdCBmcmFnbWVudCA9IG5ldyBGcmFnbWVudDxFbD4oKVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlKHsgaXRlbSwgY2hpbGQsIGluZGV4OiBbaW5kZXhdLCBzY29wZSB9OiBNYXBJdGVtKSB7XG4gICAgICAgIHNjb3BlLmRpc3Bvc2UoKVxuICAgICAgICBpZiAodHlwZW9mIGNsZWFudXAgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgY2xlYW51cChjaGlsZCwgaXRlbSwgaW5kZXguZ2V0KCkpXG4gICAgICAgIH0gZWxzZSBpZiAoY2xlYW51cCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgZW52LmRlZmF1bHRDbGVhbnVwKGNoaWxkKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FsbGJhY2soaXRhcmVhYmxlOiBJdGVyYWJsZTxJdGVtPikge1xuICAgICAgICBjb25zdCBpdGVtcyA9IFsuLi5pdGFyZWFibGVdXG4gICAgICAgIGNvbnN0IGlkcyA9IGl0ZW1zLm1hcChpZClcbiAgICAgICAgY29uc3QgaWRTZXQgPSBuZXcgU2V0KGlkcylcblxuICAgICAgICAvLyBjbGVhbnVwIGNoaWxkcmVuIG1pc3NpbmcgZnJvbSBhcnJcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgbWFwLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgLy8gdGhlcmUgaXMgbm8gZ2VuZXJpYyB3YXkgdG8gaW5zZXJ0IGNoaWxkIGF0IGluZGV4XG4gICAgICAgICAgICAvLyBzbyB3ZSBzb3J0IGJ5IHJlbW92aW5nIGV2ZXJ5IGNoaWxkIGFuZCByZWFwcGVuZGluZyBpbiBvcmRlclxuICAgICAgICAgICAgZnJhZ21lbnQucmVtb3ZlKHZhbHVlLmNoaWxkKVxuXG4gICAgICAgICAgICBpZiAoIWlkU2V0LmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlKHZhbHVlKVxuICAgICAgICAgICAgICAgIG1hcC5kZWxldGUoa2V5KVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRlIGluZGV4IGFuZCBhZGQgbmV3IGl0ZW1zXG4gICAgICAgIGl0ZW1zLm1hcCgoaXRlbSwgaSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gaWRzW2ldXG4gICAgICAgICAgICBpZiAobWFwLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgICAgICBpbmRleDogWywgc2V0SW5kZXhdLFxuICAgICAgICAgICAgICAgICAgICBjaGlsZCxcbiAgICAgICAgICAgICAgICB9ID0gbWFwLmdldChrZXkpIVxuICAgICAgICAgICAgICAgIHNldEluZGV4KGkpXG4gICAgICAgICAgICAgICAgaWYgKFsuLi5mcmFnbWVudF0uc29tZSgoY2gpID0+IGNoID09PSBjaGlsZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBkdXBsaWNhdGUga2V5cyBmb3VuZDogJHtrZXl9YClcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmcmFnbWVudC5hcHBlbmQoY2hpbGQpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBbaW5kZXgsIHNldEluZGV4XSA9IGNyZWF0ZVN0YXRlKGkpXG4gICAgICAgICAgICAgICAgY29uc3Qgc2NvcGUgPSBuZXcgU2NvcGUoY3VycmVudFNjb3BlKVxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gc2NvcGUucnVuKCgpID0+IG1rQ2hpbGQoaXRlbSwgaW5kZXgpKVxuICAgICAgICAgICAgICAgIG1hcC5zZXQoa2V5LCB7IGl0ZW0sIGNoaWxkLCBpbmRleDogW2luZGV4LCBzZXRJbmRleF0sIHNjb3BlIH0pXG4gICAgICAgICAgICAgICAgZnJhZ21lbnQuYXBwZW5kKGNoaWxkKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGRpc3Bvc2UgPSBlYWNoLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIGNhbGxiYWNrKGVhY2guZ2V0KCkpXG4gICAgfSlcbiAgICBjYWxsYmFjayhlYWNoLmdldCgpKVxuXG4gICAgb25DbGVhbnVwKCgpID0+IHtcbiAgICAgICAgZGlzcG9zZSgpXG5cbiAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiBtYXAudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIHJlbW92ZSh2YWx1ZSlcbiAgICAgICAgfVxuXG4gICAgICAgIG1hcC5jbGVhcigpXG4gICAgfSlcblxuICAgIHJldHVybiBmcmFnbWVudFxufVxuIiwgImltcG9ydCB7IEZyYWdtZW50IH0gZnJvbSBcIi4vRnJhZ21lbnQuanNcIlxuaW1wb3J0IHsgQWNjZXNzb3IgfSBmcm9tIFwiLi9zdGF0ZS5qc1wiXG5pbXBvcnQgeyBlbnYgfSBmcm9tIFwiLi9lbnYuanNcIlxuaW1wb3J0IHsgZ2V0U2NvcGUsIG9uQ2xlYW51cCwgU2NvcGUgfSBmcm9tIFwiLi9zY29wZS5qc1wiXG5cbmludGVyZmFjZSBXaXRoUHJvcHM8VCwgRSBleHRlbmRzIEpTWC5FbGVtZW50PiB7XG4gICAgdmFsdWU6IEFjY2Vzc29yPFQ+XG4gICAgY2hpbGRyZW46ICh2YWx1ZTogVCkgPT4gRSB8IFwiXCIgfCBmYWxzZSB8IG51bGwgfCB1bmRlZmluZWRcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHRvIHJ1biBmb3IgZWFjaCByZW1vdmVkIGVsZW1lbnQuXG4gICAgICogVGhlIGRlZmF1bHQgdmFsdWUgZGVwZW5kcyBvbiB0aGUgZW52aXJvbm1lbnQ6XG4gICAgICpcbiAgICAgKiAtICoqR3RrNCoqOiBudWxsXG4gICAgICogLSAqKkd0azMqKjogR3RrLldpZGdldC5wcm90b3R5cGUuZGVzdHJveVxuICAgICAqIC0gKipHbm9tZSoqOiBDbHV0dGVyLkFjdG9yLnByb3RvdHlwZS5kZXN0cm95XG4gICAgICovXG4gICAgY2xlYW51cD86IG51bGwgfCAoKGVsZW1lbnQ6IEUpID0+IHZvaWQpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBXaXRoPFQsIEUgZXh0ZW5kcyBKU1guRWxlbWVudD4oe1xuICAgIHZhbHVlLFxuICAgIGNoaWxkcmVuOiBta0NoaWxkLFxuICAgIGNsZWFudXAsXG59OiBXaXRoUHJvcHM8VCwgRT4pOiBGcmFnbWVudDxFPiB7XG4gICAgY29uc3QgY3VycmVudFNjb3BlID0gZ2V0U2NvcGUoKVxuICAgIGNvbnN0IGZyYWdtZW50ID0gbmV3IEZyYWdtZW50PEU+KClcblxuICAgIGxldCBjdXJyZW50VmFsdWU6IFRcbiAgICBsZXQgc2NvcGU6IFNjb3BlXG5cbiAgICBmdW5jdGlvbiByZW1vdmUoY2hpbGQ6IEUpIHtcbiAgICAgICAgZnJhZ21lbnQucmVtb3ZlKGNoaWxkKVxuICAgICAgICBpZiAoc2NvcGUpIHNjb3BlLmRpc3Bvc2UoKVxuXG4gICAgICAgIGlmICh0eXBlb2YgY2xlYW51cCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBjbGVhbnVwKGNoaWxkKVxuICAgICAgICB9IGVsc2UgaWYgKGNsZWFudXAgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGVudi5kZWZhdWx0Q2xlYW51cChjaGlsZClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbGxiYWNrKHY6IFQpIHtcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBmcmFnbWVudCkge1xuICAgICAgICAgICAgcmVtb3ZlKGNoaWxkKVxuICAgICAgICB9XG5cbiAgICAgICAgc2NvcGUgPSBuZXcgU2NvcGUoY3VycmVudFNjb3BlKVxuICAgICAgICBjb25zdCBjaCA9IHNjb3BlLnJ1bigoKSA9PiBta0NoaWxkKHYpKVxuICAgICAgICBpZiAoY2ggIT09IFwiXCIgJiYgY2ggIT09IGZhbHNlICYmIGNoICE9PSBudWxsICYmIGNoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGZyYWdtZW50LmFwcGVuZChjaClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGRpc3Bvc2UgPSB2YWx1ZS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IHZhbHVlLmdldCgpXG4gICAgICAgIGlmIChjdXJyZW50VmFsdWUgIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygoY3VycmVudFZhbHVlID0gbmV3VmFsdWUpKVxuICAgICAgICB9XG4gICAgfSlcblxuICAgIGN1cnJlbnRWYWx1ZSA9IHZhbHVlLmdldCgpXG4gICAgY2FsbGJhY2soY3VycmVudFZhbHVlKVxuXG4gICAgb25DbGVhbnVwKCgpID0+IHtcbiAgICAgICAgZGlzcG9zZSgpXG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgZnJhZ21lbnQpIHtcbiAgICAgICAgICAgIHJlbW92ZShjaGlsZClcbiAgICAgICAgfVxuICAgIH0pXG5cbiAgICByZXR1cm4gZnJhZ21lbnRcbn1cbiIsICJpbXBvcnQgR09iamVjdCBmcm9tIFwiZ2k6Ly9HT2JqZWN0XCJcbmltcG9ydCB7IGVudiB9IGZyb20gXCIuL2Vudi5qc1wiXG5pbXBvcnQgeyBBY2Nlc3NvciB9IGZyb20gXCIuL3N0YXRlLmpzXCJcbmltcG9ydCB7IHNldCB9IGZyb20gXCIuLi91dGlsLmpzXCJcbmltcG9ydCB7IG9uQ2xlYW51cCB9IGZyb20gXCIuL3Njb3BlLmpzXCJcbmltcG9ydCB7IGFwcGVuZCwgc2V0VHlwZSwgc2lnbmFsTmFtZSwgdHlwZSBDQ1Byb3BzIH0gZnJvbSBcIi4vanN4LmpzXCJcblxudHlwZSBUaGlzUHJvcHM8U2VsZiBleHRlbmRzIEdPYmplY3QuT2JqZWN0PiA9IFBhcnRpYWw8XG4gICAgT21pdDxDQ1Byb3BzPFNlbGYsIHsgW0sgaW4ga2V5b2YgU2VsZl06IFNlbGZbS10gfT4sIFwiJFwiIHwgXCIkY29uc3RydWN0b3JcIj5cbj4gJiB7XG4gICAgdGhpczogU2VsZlxufVxuXG4vKiogQGV4cGVyaW1lbnRhbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIFRoaXM8VCBleHRlbmRzIEdPYmplY3QuT2JqZWN0Pih7XG4gICAgdGhpczogc2VsZixcbiAgICBjaGlsZHJlbixcbiAgICAkdHlwZSxcbiAgICAuLi5wcm9wc1xufTogVGhpc1Byb3BzPFQ+KSB7XG4gICAgY29uc3QgY2xlYW51cCA9IG5ldyBBcnJheTwoKSA9PiB2b2lkPigpXG5cbiAgICBpZiAoJHR5cGUpIHNldFR5cGUoc2VsZiwgJHR5cGUpXG5cbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhwcm9wcykpIHtcbiAgICAgICAgaWYgKGtleSA9PT0gXCJjc3NcIikge1xuICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQWNjZXNzb3IpIHtcbiAgICAgICAgICAgICAgICBlbnYuc2V0Q3NzKHNlbGYsIHZhbHVlLmdldCgpKVxuICAgICAgICAgICAgICAgIGNsZWFudXAucHVzaCh2YWx1ZS5zdWJzY3JpYmUoKCkgPT4gZW52LnNldENzcyhzZWxmLCB2YWx1ZS5nZXQoKSkpKVxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBlbnYuc2V0Q3NzKHNlbGYsIHZhbHVlKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gXCJjbGFzc1wiKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBY2Nlc3Nvcikge1xuICAgICAgICAgICAgICAgIGVudi5zZXRDbGFzcyhzZWxmLCB2YWx1ZS5nZXQoKSlcbiAgICAgICAgICAgICAgICBjbGVhbnVwLnB1c2godmFsdWUuc3Vic2NyaWJlKCgpID0+IGVudi5zZXRDbGFzcyhzZWxmLCB2YWx1ZS5nZXQoKSkpKVxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBlbnYuc2V0Q2xhc3Moc2VsZiwgdmFsdWUpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5LnN0YXJ0c1dpdGgoXCJvblwiKSkge1xuICAgICAgICAgICAgY29uc3QgaWQgPSBzZWxmLmNvbm5lY3Qoc2lnbmFsTmFtZShrZXkpLCB2YWx1ZSlcbiAgICAgICAgICAgIGNsZWFudXAucHVzaCgoKSA9PiBzZWxmLmRpc2Nvbm5lY3QoaWQpKVxuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgQWNjZXNzb3IpIHtcbiAgICAgICAgICAgIGNvbnN0IGRpc3Bvc2UgPSB2YWx1ZS5zdWJzY3JpYmUoKCkgPT4gc2V0KHNlbGYsIGtleSwgdmFsdWUuZ2V0KCkpKVxuICAgICAgICAgICAgc2V0KHNlbGYsIGtleSwgdmFsdWUuZ2V0KCkpXG4gICAgICAgICAgICBjbGVhbnVwLnB1c2goZGlzcG9zZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldChzZWxmLCBrZXksIHZhbHVlKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChsZXQgY2hpbGQgb2YgQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlbiA6IFtjaGlsZHJlbl0pIHtcbiAgICAgICAgaWYgKGNoaWxkID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oRXJyb3IoXCJUcnlpbmcgdG8gYWRkIGJvb2xlYW4gdmFsdWUgb2YgYHRydWVgIGFzIGEgY2hpbGQuXCIpKVxuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkKSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBjaCBvZiBjaGlsZCkge1xuICAgICAgICAgICAgICAgIGFwcGVuZChzZWxmLCBjaClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChjaGlsZCkge1xuICAgICAgICAgICAgaWYgKCEoY2hpbGQgaW5zdGFuY2VvZiBHT2JqZWN0Lk9iamVjdCkpIHtcbiAgICAgICAgICAgICAgICBjaGlsZCA9IGVudi50ZXh0Tm9kZShjaGlsZClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFwcGVuZChzZWxmLCBjaGlsZClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjbGVhbnVwLmxlbmd0aCA+IDApIHtcbiAgICAgICAgb25DbGVhbnVwKCgpID0+IGNsZWFudXAuZm9yRWFjaCgoY2IpID0+IGNiKCkpKVxuICAgIH1cblxuICAgIHJldHVybiBzZWxmXG59XG4iLCAiLyogdGV4dCBjb2xvciBmb3IgZW50cmllcywgdmlld3MgYW5kIGNvbnRlbnQgaW4gZ2VuZXJhbCAqL1xuLyogd2lkZ2V0IGJhc2UgYmFja2dyb3VuZCBjb2xvciAqL1xuLyogdGV4dCB3aWRnZXRzIGFuZCB0aGUgbGlrZSBiYXNlIGJhY2tncm91bmQgY29sb3IgKi9cbi8qIGJhc2UgYmFja2dyb3VuZCBjb2xvciBvZiBzZWxlY3Rpb25zICovXG4vKiB0ZXh0L2ZvcmVncm91bmQgY29sb3Igb2Ygc2VsZWN0aW9ucyAqL1xuLyogYmFzZSBiYWNrZ3JvdW5kIGNvbG9yIG9mIGluc2Vuc2l0aXZlIHdpZGdldHMgKi9cbi8qIHRleHQgZm9yZWdyb3VuZCBjb2xvciBvZiBpbnNlbnNpdGl2ZSB3aWRnZXRzICovXG4vKiBpbnNlbnNpdGl2ZSB0ZXh0IHdpZGdldHMgYW5kIHRoZSBsaWtlIGJhc2UgYmFja2dyb3VuZCBjb2xvciAqL1xuLyogd2lkZ2V0IHRleHQvZm9yZWdyb3VuZCBjb2xvciBvbiBiYWNrZHJvcCB3aW5kb3dzICovXG4vKiB0ZXh0IGNvbG9yIGZvciBlbnRyaWVzLCB2aWV3cyBhbmQgY29udGVudCBpbiBnZW5lcmFsIG9uIGJhY2tkcm9wIHdpbmRvd3MgKi9cbi8qIHdpZGdldCBiYXNlIGJhY2tncm91bmQgY29sb3Igb24gYmFja2Ryb3Agd2luZG93cyAqL1xuLyogdGV4dCB3aWRnZXRzIGFuZCB0aGUgbGlrZSBiYXNlIGJhY2tncm91bmQgY29sb3Igb24gYmFja2Ryb3Agd2luZG93cyAqL1xuLyogYmFzZSBiYWNrZ3JvdW5kIGNvbG9yIG9mIHNlbGVjdGlvbnMgb24gYmFja2Ryb3Agd2luZG93cyAqL1xuLyogdGV4dC9mb3JlZ3JvdW5kIGNvbG9yIG9mIHNlbGVjdGlvbnMgb24gYmFja2Ryb3Agd2luZG93cyAqL1xuLyogaW5zZW5zaXRpdmUgY29sb3Igb24gYmFja2Ryb3Agd2luZG93cyAqL1xuLyogd2lkZ2V0cyBtYWluIGJvcmRlcnMgY29sb3IgKi9cbi8qIHdpZGdldHMgbWFpbiBib3JkZXJzIGNvbG9yIG9uIGJhY2tkcm9wIHdpbmRvd3MgKi9cbi8qIHRoZXNlIGNvbG9ycyBhcmUgZXhwb3J0ZWQgZm9yIHRoZSB3aW5kb3cgbWFuYWdlciBhbmQgc2hvdWxkbid0IGJlIHVzZWQgaW4gYXBwbGljYXRpb25zLFxucmVhZCBpZiB5b3UgdXNlZCB0aG9zZSBhbmQgc29tZXRoaW5nIGJyZWFrIHdpdGggYSB2ZXJzaW9uIHVwZ3JhZGUgeW91J3JlIG9uIHlvdXIgb3duLi4uICovXG4vKiBGSVhNRSB0aGlzIGlzIHJlYWxseSBhbiBBUEkgKi9cbi8qIFZlcnkgY29udHJhc3R5IGJhY2tncm91bmQgZm9yIHRleHQgdmlld3MgKEB0aGVtZV90ZXh0X2NvbG9yIGZvcmVncm91bmQpICovXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEJhciAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFZlcnRpY2FsIHNlcGFyYXRvciAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4uQmFyIHtcbiAgbWluLWhlaWdodDogMzZweDtcbiAgYm94LXNoYWRvdzogbm9uZTtcbiAgcGFkZGluZzogMHB4IDBweDtcbiAgbWFyZ2luOiAwcHg7XG59XG4uQmFyIC5BdWRpb0ljb25CdXR0b24ge1xuICBtYXJnaW46IDBweDtcbn1cbi5CYXIgLkJyaWdodG5lc3NJY29uQnV0dG9uIHtcbiAgbWFyZ2luOiAwcHg7XG59XG5cbi5iYXItbXVzaWMtaWNvbiB7XG4gIGNvbG9yOiB3aGl0ZTtcbiAgcGFkZGluZzogMnB4O1xufVxuXG4uQmFyIC5ib3gtY29udGFpbmVyIHtcbiAgdHJhbnNpdGlvbjogMC4zcyBiYWNrZ3JvdW5kLWNvbG9yO1xufVxuLkJhciAucmlnaHQge1xuICBwYWRkaW5nOiAwcHggMTJweDtcbiAgYm9yZGVyLXJhZGl1czogMHB4IDBweCAwcHggMThweDtcbn1cbi5CYXIgLnZlcnRpY2FsLXNlcGFyYXRvci1ib3gge1xuICBtaW4td2lkdGg6IDJweDtcbiAgcGFkZGluZzogOHB4IDhweDtcbn1cbi5CYXIgLnZlcnRpY2FsLXNlcGFyYXRvciB7XG4gIGJvcmRlcjogbm9uZTtcbiAgYm9yZGVyLWxlZnQ6IDJweCBzb2xpZCBAdW5mb2N1c2VkX2JvcmRlcnM7XG59XG5cbndpbmRvdy5CYXIge1xuICBib3JkZXI6IG5vbmU7XG4gIGJveC1zaGFkb3c6IG5vbmU7XG4gIGNvbG9yOiAjZjFmMWYxO1xuICBmb250LXNpemU6IDEuMWVtO1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgYmFja2dyb3VuZC1jb2xvcjogQHRoZW1lX2JnX2NvbG9yO1xufVxud2luZG93LkJhciBsYWJlbCB7XG4gIG1hcmdpbjogMHB4IDRweDtcbn1cbndpbmRvdy5CYXIgY2VudGVyYm94IHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIGJvcmRlcjogbm9uZTtcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgcGFkZGluZzogMHB4IDEwcHg7XG59XG53aW5kb3cuQmFyIGJ1dHRvbiB7XG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICBib3JkZXI6IG5vbmU7XG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIHBhZGRpbmc6IDBweCA4cHg7XG4gIG1hcmdpbjogNHB4IDBweDtcbn1cbndpbmRvdy5CYXIgYnV0dG9uOmhvdmVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNDEsIDI0MSwgMjQxLCAwLjE2KTtcbiAgYm9yZGVyLWNvbG9yOiByZ2JhKDU1LCAxNDEsIDI0NywgMC4yKTtcbn1cbndpbmRvdy5CYXIgLlN5c1RyYXkge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgYm9yZGVyOiBub25lO1xuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xuICBwYWRkaW5nOiAwcHg7XG4gIG1hcmdpbjogMHB4O1xufVxud2luZG93LkJhciAuU3lzVHJheSBidXR0b24ge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgYm9yZGVyOiBub25lO1xuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xuICBwYWRkaW5nOiA0cHg7XG4gIG1hcmdpbjogMHB4O1xufVxud2luZG93LkJhciAuU3lzVHJheSBidXR0b246aG92ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI0MSwgMjQxLCAyNDEsIDAuMTYpO1xuICBib3JkZXItY29sb3I6IHJnYmEoNTUsIDE0MSwgMjQ3LCAwLjIpO1xufVxud2luZG93LkJhciAuU3lzVHJheSBzZXBhcmF0b3Ige1xuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgbWFyZ2luOiAwcHg7XG4gIHBhZGRpbmc6IDBweDtcbn1cbndpbmRvdy5CYXIgLldvcmtzcGFjZXMgYnV0dG9uIHtcbiAgYWxsOiB1bnNldDtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG59XG53aW5kb3cuQmFyIC5Xb3Jrc3BhY2VzIGJ1dHRvbjpob3ZlciBsYWJlbCB7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjQxLCAyNDEsIDI0MSwgMC4xNik7XG4gIGJvcmRlci1jb2xvcjogcmdiYSg1NSwgMTQxLCAyNDcsIDAuMik7XG59XG53aW5kb3cuQmFyIC5Xb3Jrc3BhY2VzIGJ1dHRvbjphY3RpdmUgbGFiZWwge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI0MSwgMjQxLCAyNDEsIDAuMik7XG59XG53aW5kb3cuQmFyIC5Xb3Jrc3BhY2VzIGxhYmVsIHtcbiAgdHJhbnNpdGlvbjogMjAwbXM7XG4gIHBhZGRpbmc6IDBweCA4cHg7XG4gIG1hcmdpbjogMnB4O1xuICBib3JkZXItcmFkaXVzOiAxOHB4O1xuICBib3JkZXI6IDFwdCBzb2xpZCB0cmFuc3BhcmVudDtcbn1cbndpbmRvdy5CYXIgLldvcmtzcGFjZXMgLmZvY3VzZWQgbGFiZWwge1xuICBjb2xvcjogIzM3OERGNztcbiAgYm9yZGVyLWNvbG9yOiAjMzc4REY3O1xufVxud2luZG93LkJhciAuRm9jdXNlZENsaWVudCB7XG4gIGNvbG9yOiAjMzc4REY3O1xufVxud2luZG93LkJhciAuTWVkaWEgLkNvdmVyIHtcbiAgbWluLWhlaWdodDogNTBweDtcbiAgbWluLXdpZHRoOiA1MHB4O1xuICBib3JkZXItcmFkaXVzOiAxOHB4O1xuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7XG4gIGJhY2tncm91bmQtc2l6ZTogY29udGFpbjtcbn1cbndpbmRvdy5CYXIgLk1lZGlhIC5JbmZvICoge1xuICBwYWRkaW5nOiAycHggNHB4O1xufVxud2luZG93LkJhciAuTWVkaWEgLkluZm8gbGFiZWwge1xuICBmb250LXNpemU6IDE2cHg7XG59XG53aW5kb3cuQmFyIC5NZWRpYSAuSW5mbyAuVGl0bGUge1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cbndpbmRvdy5CYXIgLk1lZGlhIC5JbmZvIC5EZXNjcmlwdGlvbiB7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG59XG53aW5kb3cuQmFyIC5CYXR0ZXJ5IGxhYmVsIHtcbiAgcGFkZGluZy1sZWZ0OiAwcHg7XG4gIG1hcmdpbi1sZWZ0OiAwcHg7XG59XG53aW5kb3cuQmFyIC5QbGF5UGF1c2VCdG4ge1xuICBwYWRkaW5nOiAwcHg7XG4gIG1hcmdpbjogMHB4O1xuICBwYWRkaW5nLXJpZ2h0OiAzcHg7XG59XG5cbi5Ob3RpZmljYXRpb25zV2luZG93IHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIHBhZGRpbmc6IDEycHg7XG4gIG1pbi1oZWlnaHQ6IDBweDtcbiAgbWFyZ2luLXRvcDogMjRweDtcbn1cblxuLm5vdGlmaWNhdGlvbi1ib3ggKiB7XG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICBjb2xvcjogdHJhbnNwYXJlbnQ7XG4gIG1pbi1oZWlnaHQ6IDBweDtcbn1cblxuLk5vdGlmaWNhdGlvbiB7XG4gIG1hcmdpbjogMnB4O1xuICBwYWRkaW5nOiAxMnB4O1xuICBib3JkZXItcmFkaXVzOiA4cHg7XG4gIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xuICBtaW4td2lkdGg6IDMwMHB4O1xufVxuLk5vdGlmaWNhdGlvbiAuaGVhZGVyIHtcbiAgbWFyZ2luLWJvdHRvbTogNHB4O1xufVxuLk5vdGlmaWNhdGlvbiAuaGVhZGVyICoge1xuICBjb2xvcjogd2hpdGU7XG4gIGZvbnQtc2l6ZTogMTJweDtcbiAgZm9udC13ZWlnaHQ6IGxpZ2h0ZXI7XG59XG4uTm90aWZpY2F0aW9uIC5oZWFkZXIgLmFwcC1uYW1lIHtcbiAgb3BhY2l0eTogMC40O1xuICBwYWRkaW5nLXRvcDogNHB4O1xufVxuLk5vdGlmaWNhdGlvbiAuaGVhZGVyIC50aW1lIHtcbiAgb3BhY2l0eTogMC40O1xuICBwYWRkaW5nLXRvcDogNHB4O1xufVxuLk5vdGlmaWNhdGlvbiAuaGVhZGVyIC5jbG9zZSB7XG4gIGZvbnQtZmFtaWx5OiBNYXRlcmlhbDtcbiAgYm9yZGVyOiBub25lO1xuICBwYWRkaW5nOiA0cHggMnB4O1xuICBtYXJnaW4tdG9wOiAwcHg7XG4gIG1hcmdpbi1ib3R0b206IDBweDtcbiAgbWFyZ2luLXJpZ2h0OiAwcHg7XG4gIG1hcmdpbi1sZWZ0OiA2cHg7XG59XG4uTm90aWZpY2F0aW9uIC5zZXBhcmF0b3Ige1xuICBtaW4taGVpZ2h0OiA4cHg7XG59XG4uTm90aWZpY2F0aW9uIC5pbWFnZSB7XG4gIG1pbi1oZWlnaHQ6IDUwcHg7XG4gIG1pbi13aWR0aDogNTBweDtcbiAgbWFyZ2luLXJpZ2h0OiA4cHg7XG59XG4uTm90aWZpY2F0aW9uIC5zdW1tYXJ5IHtcbiAgZm9udC1zaXplOiAxNnB4O1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBtYXJnaW4tdG9wOiA4cHg7XG59XG4uTm90aWZpY2F0aW9uIC5ib2R5IHtcbiAgZm9udC1zaXplOiAxMnB4O1xuICBsaW5lLWhlaWdodDogMThweDtcbiAgZm9udC13ZWlnaHQ6IGxpZ2h0ZXI7XG59XG5cbi5kYXJrLXRoZW1lIC5Ob3RpZmljYXRpb24ge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBAZGFya180O1xuICBib3JkZXItY29sb3I6IEBkYXJrXzM7XG59XG4uZGFyay10aGVtZSAuTm90aWZpY2F0aW9uIC5oZWFkZXIgKiB7XG4gIGNvbG9yOiBAbGlnaHRfNDtcbn1cbi5kYXJrLXRoZW1lIC5Ob3RpZmljYXRpb24gLmhlYWRlciAuY2xvc2U6aG92ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBAZGFya180O1xufVxuLmRhcmstdGhlbWUgLk5vdGlmaWNhdGlvbiAuc3VtbWFyeSB7XG4gIGNvbG9yOiBAbGlnaHRfNDtcbn1cbi5kYXJrLXRoZW1lIC5Ob3RpZmljYXRpb24gLmJvZHkge1xuICBjb2xvcjogQGxpZ2h0XzQ7XG59XG5cbi5saWdodC10aGVtZSAuTm90aWZpY2F0aW9uIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogQGxpZ2h0XzQ7XG4gIGJvcmRlci1jb2xvcjogQGxpZ2h0XzU7XG59XG4ubGlnaHQtdGhlbWUgLk5vdGlmaWNhdGlvbiAuaGVhZGVyICoge1xuICBjb2xvcjogQGRhcmtfNDtcbn1cbi5saWdodC10aGVtZSAuTm90aWZpY2F0aW9uIC5oZWFkZXIgLmNsb3NlOmhvdmVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogQGxpZ2h0XzQ7XG59XG4ubGlnaHQtdGhlbWUgLk5vdGlmaWNhdGlvbiAuc3VtbWFyeSB7XG4gIGNvbG9yOiBAZGFya180O1xufVxuLmxpZ2h0LXRoZW1lIC5Ob3RpZmljYXRpb24gLmJvZHkge1xuICBjb2xvcjogQGRhcmtfNDtcbn1cblxuLlBsYXllcldpbmRvdyB7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG59XG5cbi5QbGF5ZXJQb3BvdmVyV3JhcHBlciB7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG59XG5cbi5QbGF5ZXJDb250YWluZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjMyMTM2O1xuICBtYXJnaW46IDI0cHg7XG4gIHBhZGRpbmc6IDQ4cHg7XG4gIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgYm9yZGVyOiAxcHggc29saWQgIzU2NTI2ZTtcbn1cbi5QbGF5ZXJDb250YWluZXIgKiB7XG4gIG1hcmdpbjogMHB4O1xuICBwYWRkaW5nOiAwcHg7XG59XG4uUGxheWVyQ29udGFpbmVyIC5wbGF5ZXItY292ZXItY29udGFpbmVyIHtcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xufVxuLlBsYXllckNvbnRhaW5lciAucGxheWVyLWNvdmVyIHtcbiAgbWluLWhlaWdodDogMjAwcHg7XG4gIG1pbi13aWR0aDogMjAwcHg7XG59XG4uUGxheWVyQ29udGFpbmVyIC5wbGF5ZXItYXJ0aXN0IHtcbiAgbWFyZ2luLXRvcDogMjRweDtcbiAgZm9udC1zaXplOiAyMHB4O1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cbi5QbGF5ZXJDb250YWluZXIgLnBsYXllci10aXRsZSB7XG4gIG1hcmdpbi10b3A6IDRweDtcbiAgZm9udC1zaXplOiAxNnB4O1xuICBmb250LXdlaWdodDogbm9ybWFsO1xufVxuLlBsYXllckNvbnRhaW5lciAucGxheWVyLWJ1dHRvbnMtY29udGFpbmVyIHtcbiAgbWFyZ2luLXRvcDogMjhweDtcbn1cbi5QbGF5ZXJDb250YWluZXIgLnBsYXllci1idXR0b24ge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMmEyNzNmO1xuICBib3JkZXItY29sb3I6ICM0NDQxNWE7XG4gIGJvcmRlci1yYWRpdXM6IDEwMCU7XG4gIG1hcmdpbi1sZWZ0OiA4cHg7XG4gIG1hcmdpbi1yaWdodDogOHB4O1xufVxuLlBsYXllckNvbnRhaW5lciAucGxheWVyLWJ1dHRvbjpob3ZlciB7XG4gIGJhY2tncm91bmQtY29sb3I6ICM0NDQxNWE7XG59XG4uUGxheWVyQ29udGFpbmVyIC5wbGF5ZXItb3RoZXItYnV0dG9uIHtcbiAgbWluLWhlaWdodDogNDhweDtcbiAgbWluLXdpZHRoOiA0OHB4O1xufVxuLlBsYXllckNvbnRhaW5lciAucGxheS1idXR0b24ge1xuICBtaW4taGVpZ2h0OiA0OHB4O1xuICBtaW4td2lkdGg6IDQ4cHg7XG59XG5cbi5vc2Qge1xuICBtYXJnaW46IDIwcHg7XG4gIHBhZGRpbmc6IDBweDtcbn1cbi5vc2QgLm9zZC1wb3B1cC12aWV3IHtcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMkMyQzMzO1xuICBwYWRkaW5nOiAyMHB4O1xufVxuLm9zZCBpbWFnZSB7XG4gIHBhZGRpbmctcmlnaHQ6IDhweDtcbn1cbi5vc2QgbGFiZWwge1xuICBmb250LXNpemU6IDI0cHg7XG59XG4ub3NkIGxldmVsYmFyIHRyb3VnaCB7XG4gIG1hcmdpbjogNHB4O1xufVxuLm9zZCBsZXZlbGJhciBibG9jayB7XG4gIG1pbi1oZWlnaHQ6IDNweDtcbn1cblxuLmNvbmt5LXdpZGdldCAuY29ua3kge1xuICBtYXJnaW4tYm90dG9tOiA5MHB4O1xuICBtYXJnaW4tbGVmdDogNzBweDtcbn1cbi5jb25reS13aWRnZXQgLmNvbmt5ICoge1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG59XG5cbi53ZWF0aGVyICoge1xuICBmb250LXNpemU6IDE0cHg7XG4gIGNvbG9yOiAjZmZmZmZmO1xuICBmb250LWZhbWlseTogRmlubGFuZGljYSwgc2Fucy1zZXJpZjtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xufVxuXG4udGltZS1jb25reSAqIHtcbiAgY29sb3I6ICNmZmZmZmY7XG4gIGZvbnQtZmFtaWx5OiBGaW5sYW5kaWNhLCBzYW5zLXNlcmlmO1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG59XG4udGltZS1jb25reSAudGltZSB7XG4gIGZvbnQtc2l6ZTogODBweDtcbn1cbi50aW1lLWNvbmt5IC5kYXRlIHtcbiAgZm9udC1zaXplOiAyOHB4O1xufVxuLnRpbWUtY29ua3kgLndlZWstZGF5IHtcbiAgbWFyZ2luLXRvcDogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTJweDtcbiAgZm9udC1mYW1pbHk6IE1hdGVyaWFsLCBzYW5zLXNlcmlmO1xuICBmb250LXNpemU6IDEycHg7XG59XG5cbioge1xuICBmb250LWZhbWlseTogXCJGaXJhIENvZGVcIiwgXCJTRiBQcm8gRGlzcGxheVwiLCBzYW5zLXNlcmlmO1xuICBmb250LXNpemU6IDE0cHg7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGNvbG9yOiB3aGl0ZTtcbn1cblxucG9wb3ZlciBhcnJvdyB7XG4gIGJhY2tncm91bmQ6IG5vbmU7XG4gIGJvcmRlcjogbm9uZTtcbiAgcGFkZGluZzogMDtcbiAgbWFyZ2luOiAwO1xufVxucG9wb3ZlciBjb250ZW50cyB7XG4gIGJhY2tncm91bmQtY29sb3I6ICMyQzJDMzM7XG59XG5cbi5UaW1lIHtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgZm9udC1zaXplOiAxMnB4O1xuICBwYWRkaW5nOiA4cHggMTBweDtcbn1cbi5UaW1lIENhbGVuZGFyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzJDMkMzMztcbn1cblxuLlN5c1RyYXkge1xuICBtYXJnaW46IDBweCA4cHg7XG4gIG1hcmdpbi1yaWdodDogMHB4O1xuICBtYXJnaW4tdG9wOiAtMnB4O1xufVxuXG4uV2lmaSB7XG4gIGNvbG9yOiB3aGl0ZTtcbiAgYm9yZGVyLXJhZGl1czogMTVweDtcbiAgbWFyZ2luOiAwcHggOHB4O1xuICBtYXJnaW4tdG9wOiAtMnB4O1xuICBwYWRkaW5nOiAycHg7XG4gIGZvbnQtc2l6ZTogMTZweDtcbn1cblxuLkljb25CdXR0b24ge1xuICBjb2xvcjogd2hpdGU7XG4gIGJvcmRlci1yYWRpdXM6IDE1cHg7XG4gIG1hcmdpbjogMHB4IDhweDtcbiAgbWFyZ2luLXRvcDogLTNweDtcbiAgZm9udC1zaXplOiAyMHB4O1xufVxuLkljb25CdXR0b24gdHJvdWdoIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpO1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG4gIG1pbi1oZWlnaHQ6IDhweDtcbn1cbi5JY29uQnV0dG9uIGhpZ2hsaWdodCB7XG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG59XG5cbi5TbGlkZXIge1xuICBtaW4td2lkdGg6IDE0MHB4O1xufVxuLlNsaWRlciBzbGlkZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xuICBtaW4taGVpZ2h0OiAxMnB4O1xuICBtaW4td2lkdGg6IDEycHg7XG4gIG1hcmdpbjogLTJweDtcbn1cblxuLkJhdHRlcnkge1xuICBjb2xvcjogd2hpdGU7XG4gIGJvcmRlci1yYWRpdXM6IDE1cHg7XG4gIG1hcmdpbjogMHB4IDhweDtcbiAgbWFyZ2luLXRvcDogLTJweDtcbiAgcGFkZGluZzogMnB4O1xuICBmb250LXNpemU6IDE2cHg7XG59XG5cbi5CcmlnaHRuZXNzIHtcbiAgY29sb3I6IHdoaXRlO1xuICBib3JkZXItcmFkaXVzOiAxNXB4O1xuICBtYXJnaW46IDBweCA4cHg7XG4gIG1hcmdpbi10b3A6IC0ycHg7XG4gIHBhZGRpbmc6IDJweDtcbiAgZm9udC1zaXplOiAxNnB4O1xufVxuXG4uQmx1ZXRvb3RoIHtcbiAgY29sb3I6IHdoaXRlO1xuICBib3JkZXItcmFkaXVzOiAxNXB4O1xuICBtYXJnaW46IDBweCA4cHg7XG4gIG1hcmdpbi10b3A6IC0ycHg7XG4gIHBhZGRpbmc6IDJweDtcbiAgZm9udC1zaXplOiAxNnB4O1xufVxuXG50b29sdGlwIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjgpO1xuICBib3JkZXItcmFkaXVzOiA4cHg7XG59XG5cbm1lbnVpdGVtOmhvdmVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpO1xufVxuXG5tZW51YmFyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjkpO1xuICBjb2xvcjogd2hpdGU7XG59XG5cbm1lbnUge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuOSk7XG4gIGNvbG9yOiB3aGl0ZTtcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xuICBwYWRkaW5nOiA0cHg7XG59XG5cbm1lbnVpdGVtIHtcbiAgcGFkZGluZzogNHB4IDhweDtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xuICBtYXJnaW46IDBweDtcbn1cblxubWVudWl0ZW06aG92ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG59XG5cbi5iYXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBibHVlO1xuICBtaW4td2lkdGg6IDIwcHg7XG59IiwgImltcG9ydCBHaW8gZnJvbSBcImdpOi8vR2lvP3ZlcnNpb249Mi4wXCJcbmltcG9ydCBHTGliIGZyb20gXCJnaTovL0dMaWI/dmVyc2lvbj0yLjBcIlxuaW1wb3J0IEdPYmplY3QsIHsgcmVnaXN0ZXIsIHNpZ25hbCB9IGZyb20gXCJnbmltL2dvYmplY3RcIlxuaW1wb3J0IHsgQWNjZXNzb3IgfSBmcm9tIFwiZ25pbVwiXG5cbmNvbnN0IGVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKVxuXG5leHBvcnQgbmFtZXNwYWNlIFByb2Nlc3Mge1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgU2lnbmFsU2lnbmF0dXJlcyBleHRlbmRzIEdPYmplY3QuT2JqZWN0LlNpZ25hbFNpZ25hdHVyZXMge1xuICAgICAgICBzdGRvdXQ6IFByb2Nlc3NbXCJzdGRvdXRcIl1cbiAgICAgICAgc3RkZXJyOiBQcm9jZXNzW1wic3RkZXJyXCJdXG4gICAgICAgIGV4aXQ6IFByb2Nlc3NbXCJleGl0XCJdXG4gICAgfVxuICAgIGV4cG9ydCBpbnRlcmZhY2UgQ29uc3RydWN0b3JQcm9wcyBleHRlbmRzIEdPYmplY3QuT2JqZWN0LkNvbnN0cnVjdG9yUHJvcHMge1xuICAgICAgICBhcmd2OiBzdHJpbmdbXVxuICAgIH1cbn1cblxuQHJlZ2lzdGVyKClcbmV4cG9ydCBjbGFzcyBQcm9jZXNzIGV4dGVuZHMgR09iamVjdC5PYmplY3Qge1xuICAgIEBzaWduYWwoU3RyaW5nKVxuICAgIHByb3RlY3RlZCBzdGRvdXQob3V0OiBzdHJpbmcpIHtcbiAgICAgICAgdm9pZCBvdXRcbiAgICB9XG5cbiAgICBAc2lnbmFsKFN0cmluZylcbiAgICBwcm90ZWN0ZWQgc3RkZXJyKGVycjogc3RyaW5nKSB7XG4gICAgICAgIHZvaWQgZXJyXG4gICAgfVxuXG4gICAgQHNpZ25hbChOdW1iZXIsIEJvb2xlYW4pXG4gICAgcHJvdGVjdGVkIGV4aXQoY29kZTogbnVtYmVyLCBzaWduYWxlZDogYm9vbGVhbikge1xuICAgICAgICB2b2lkIFtjb2RlLCBzaWduYWxlZF1cbiAgICB9XG5cbiAgICAjZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpXG4gICAgI291dFN0cmVhbTogR2lvLkRhdGFJbnB1dFN0cmVhbVxuICAgICNlcnJTdHJlYW06IEdpby5EYXRhSW5wdXRTdHJlYW1cbiAgICAjaW5TdHJlYW06IEdpby5EYXRhT3V0cHV0U3RyZWFtXG4gICAgI3Byb2Nlc3M6IEdpby5TdWJwcm9jZXNzXG5cbiAgICAjcmVhZFN0cmVhbShzdHJlYW06IEdpby5EYXRhSW5wdXRTdHJlYW0pIHtcbiAgICAgICAgc3RyZWFtLnJlYWRfbGluZV9hc3luYyhHTGliLlBSSU9SSVRZX0RFRkFVTFQsIG51bGwsIChfLCByZXMpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgW291dHB1dF0gPSBzdHJlYW0ucmVhZF9saW5lX2ZpbmlzaF91dGY4KHJlcylcbiAgICAgICAgICAgICAgICBpZiAob3V0cHV0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdHJlYW0gPT09IHRoaXMuI2VyclN0cmVhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGRlcnIob3V0cHV0LnRyaW0oKSlcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3Rkb3V0KG91dHB1dC50cmltKCkpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jcmVhZFN0cmVhbShzdHJlYW0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGNvbm5lY3Q8UyBleHRlbmRzIGtleW9mIFByb2Nlc3MuU2lnbmFsU2lnbmF0dXJlcz4oXG4gICAgICAgIHNpZ25hbDogUyxcbiAgICAgICAgY2FsbGJhY2s6IEdPYmplY3QuU2lnbmFsQ2FsbGJhY2s8dGhpcywgUHJvY2Vzcy5TaWduYWxTaWduYXR1cmVzW1NdPixcbiAgICApOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gc3VwZXIuY29ubmVjdChzaWduYWwsIGNhbGxiYWNrKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZvcmNlIHF1aXQgdGhlIHN1YnByb2Nlc3MuXG4gICAgICovXG4gICAga2lsbCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy4jcHJvY2Vzcy5mb3JjZV9leGl0KClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZW5kIGEgc2lnbmFsIHRvIHRoZSBzdWJwcm9jZXNzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNpZ25hbCBTaWduYWwgbnVtYmVyIHRvIGJlIHNlbnRcbiAgICAgKi9cbiAgICBzaWduYWwoc2lnbmFsOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy4jcHJvY2Vzcy5zZW5kX3NpZ25hbChzaWduYWwpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV3JpdGUgYSBsaW5lIHRvIHRoZSBzdWJwcm9jZXNzJyBzdGRpbiBzeW5jaHJvbm91c2x5LlxuICAgICAqIFNlZSB7QGxpbmsgR2lvLkRhdGFPdXRwdXRTdHJlYW0ucHJvdG90eXBlLndyaXRlX2J5dGVzX2FzeW5jfVxuICAgICAqXG4gICAgICogQHBhcmFtIHN0ciBTdHJpbmcgdG8gYmUgd3JpdHRlbiB0byBzdGRpblxuICAgICAqL1xuICAgIHdyaXRlKHN0cjogc3RyaW5nKTogUHJvbWlzZTxbYm9vbGVhbiwgbnVtYmVyXT4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy4jaW5TdHJlYW0ud3JpdGVfYnl0ZXNfYXN5bmMoXG4gICAgICAgICAgICAgICAgZW5jb2Rlci5lbmNvZGUoc3RyKSxcbiAgICAgICAgICAgICAgICBHTGliLlBSSU9SSVRZX0RFRkFVTFQsXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAoXywgcmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRoaXMuI2luU3RyZWFtLndyaXRlX2FsbF9maW5pc2gocmVzKSlcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV3JpdGUgYSBsaW5lIHRvIHRoZSBzdWJwcm9jZXNzJyBzdGRpbiBhc3luY2hyb25vdXNseS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzdHIgU3RyaW5nIHRvIGJlIHdyaXR0ZW4gdG8gc3RkaW5cbiAgICAgKi9cbiAgICBhc3luYyB3cml0ZUFzeW5jKHN0cjogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLiNpblN0cmVhbS53cml0ZV9hbGxfYXN5bmMoXG4gICAgICAgICAgICAgICAgdGhpcy4jZW5jb2Rlci5lbmNvZGUoc3RyKSxcbiAgICAgICAgICAgICAgICBHTGliLlBSSU9SSVRZX0RFRkFVTFQsXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAoXywgcmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHZvaWQgdGhpcy4jaW5TdHJlYW0ud3JpdGVfYWxsX2ZpbmlzaChyZXMpKVxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIClcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcih7IGFyZ3YgfTogUHJvY2Vzcy5Db25zdHJ1Y3RvclByb3BzKSB7XG4gICAgICAgIHN1cGVyKClcbiAgICAgICAgY29uc3QgcHJvY2VzcyA9ICh0aGlzLiNwcm9jZXNzID0gR2lvLlN1YnByb2Nlc3MubmV3KFxuICAgICAgICAgICAgYXJndixcbiAgICAgICAgICAgIEdpby5TdWJwcm9jZXNzRmxhZ3MuU1RESU5fUElQRSB8XG4gICAgICAgICAgICAgICAgR2lvLlN1YnByb2Nlc3NGbGFncy5TVERPVVRfUElQRSB8XG4gICAgICAgICAgICAgICAgR2lvLlN1YnByb2Nlc3NGbGFncy5TVERFUlJfUElQRSxcbiAgICAgICAgKSlcblxuICAgICAgICB0aGlzLiNpblN0cmVhbSA9IEdpby5EYXRhT3V0cHV0U3RyZWFtLm5ldyhwcm9jZXNzLmdldF9zdGRpbl9waXBlKCkhKVxuICAgICAgICB0aGlzLiNvdXRTdHJlYW0gPSBHaW8uRGF0YUlucHV0U3RyZWFtLm5ldyhwcm9jZXNzLmdldF9zdGRvdXRfcGlwZSgpISlcbiAgICAgICAgdGhpcy4jZXJyU3RyZWFtID0gR2lvLkRhdGFJbnB1dFN0cmVhbS5uZXcocHJvY2Vzcy5nZXRfc3RkZXJyX3BpcGUoKSEpXG5cbiAgICAgICAgdGhpcy4jcmVhZFN0cmVhbSh0aGlzLiNvdXRTdHJlYW0pXG4gICAgICAgIHRoaXMuI3JlYWRTdHJlYW0odGhpcy4jZXJyU3RyZWFtKVxuXG4gICAgICAgIHByb2Nlc3Mud2FpdF9hc3luYyhudWxsLCAoXywgcmVzKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHByb2Nlc3Mud2FpdF9maW5pc2gocmVzKVxuICAgICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICAgICAgLy8gaWdub3JlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmdldF9pZl9leGl0ZWQoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZXhpdChwcm9jZXNzLmdldF9leGl0X3N0YXR1cygpLCBmYWxzZSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZ2V0X2lmX3NpZ25hbGVkKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmV4aXQocHJvY2Vzcy5nZXRfdGVybV9zaWcoKSwgdHJ1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdGFydCBhIG5ldyBzdWJwcm9jZXNzIHdpdGggdGhlIGdpdmVuIGNvbW1hbmQuXG4gICAgICogVGhlIGZpcnN0IGVsZW1lbnQgb2YgdGhlIHZlY3RvciBpcyBleGVjdXRlZCB3aXRoIHRoZSByZW1haW5pbmdcbiAgICAgKiBlbGVtZW50cyBhcyB0aGUgYXJndW1lbnQgbGlzdC5cbiAgICAgKi9cbiAgICBzdGF0aWMgc3VicHJvY2Vzc3YoY21kOiBzdHJpbmdbXSkge1xuICAgICAgICByZXR1cm4gbmV3IFByb2Nlc3MoeyBhcmd2OiBjbWQgfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdGFydCBhIG5ldyBzdWJwcm9jZXNzIHdpdGggdGhlIGdpdmVuIGNvbW1hbmRcbiAgICAgKiB3aGljaCBpcyBwYXJzZWQgdXNpbmcge0BsaW5rIEdMaWIuc2hlbGxfcGFyc2VfYXJndn0uXG4gICAgICovXG4gICAgc3RhdGljIHN1YnByb2Nlc3MoY21kOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgWywgYXJndl0gPSBHTGliLnNoZWxsX3BhcnNlX2FyZ3YoY21kKVxuICAgICAgICByZXR1cm4gUHJvY2Vzcy5zdWJwcm9jZXNzdihhcmd2ISlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIGEgY29tbWFuZCBzeW5jaHJvbm91c2x5LlxuICAgICAqIFRoZSBmaXJzdCBlbGVtZW50IG9mIHRoZSB2ZWN0b3IgaXMgZXhlY3V0ZWQgd2l0aCB0aGUgcmVtYWluaW5nXG4gICAgICogZWxlbWVudHMgYXMgdGhlIGFyZ3VtZW50IGxpc3QuXG4gICAgICpcbiAgICAgKiBAdGhyb3dzIHN0ZGVyclxuICAgICAqIEByZXR1cm4gc3Rkb3V0IG9mIHRoZSBzdWJwcm9jZXNzXG4gICAgICovXG4gICAgc3RhdGljIGV4ZWN2KGNtZDogc3RyaW5nW10pIHtcbiAgICAgICAgY29uc3QgcHJvY2VzcyA9IEdpby5TdWJwcm9jZXNzLm5ldyhcbiAgICAgICAgICAgIGNtZCxcbiAgICAgICAgICAgIEdpby5TdWJwcm9jZXNzRmxhZ3MuU1RERVJSX1BJUEUgfCBHaW8uU3VicHJvY2Vzc0ZsYWdzLlNURE9VVF9QSVBFLFxuICAgICAgICApXG5cbiAgICAgICAgY29uc3QgWywgb3V0LCBlcnJdID0gcHJvY2Vzcy5jb21tdW5pY2F0ZV91dGY4KG51bGwsIG51bGwpXG4gICAgICAgIGlmIChwcm9jZXNzLmdldF9zdWNjZXNzZnVsKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBvdXQudHJpbSgpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZSBhIGNvbW1hbmQgc3luY2hyb25vdXNseS5cbiAgICAgKiBUaGUgY29tbWFuZCBpcyBwYXJzZWQgdXNpbmcge0BsaW5rIEdMaWIuc2hlbGxfcGFyc2VfYXJndn0uXG4gICAgICpcbiAgICAgKiBAdGhyb3dzIHN0ZGVyclxuICAgICAqIEByZXR1cm4gc3Rkb3V0IG9mIHRoZSBzdWJwcm9jZXNzXG4gICAgICovXG4gICAgc3RhdGljIGV4ZWMoY21kOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgWywgYXJndl0gPSBHTGliLnNoZWxsX3BhcnNlX2FyZ3YoY21kKVxuICAgICAgICByZXR1cm4gUHJvY2Vzcy5leGVjdihhcmd2ISlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIGEgY29tbWFuZCBhc3luY2hyb25vdXNseS5cbiAgICAgKiBUaGUgZmlyc3QgZWxlbWVudCBvZiB0aGUgdmVjdG9yIGlzIGV4ZWN1dGVkIHdpdGggdGhlIHJlbWFpbmluZ1xuICAgICAqIGVsZW1lbnRzIGFzIHRoZSBhcmd1bWVudCBsaXN0LlxuICAgICAqXG4gICAgICogQHRocm93cyBzdGRlcnJcbiAgICAgKiBAcmV0dXJuIHN0ZG91dCBvZiB0aGUgc3VicHJvY2Vzc1xuICAgICAqL1xuICAgIHN0YXRpYyBleGVjQXN5bmN2KGNtZDogc3RyaW5nW10pOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBjb25zdCBwcm9jZXNzID0gR2lvLlN1YnByb2Nlc3MubmV3KFxuICAgICAgICAgICAgY21kLFxuICAgICAgICAgICAgR2lvLlN1YnByb2Nlc3NGbGFncy5TVERFUlJfUElQRSB8IEdpby5TdWJwcm9jZXNzRmxhZ3MuU1RET1VUX1BJUEUsXG4gICAgICAgIClcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgcHJvY2Vzcy5jb21tdW5pY2F0ZV91dGY4X2FzeW5jKG51bGwsIG51bGwsIChfLCByZXMpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBbLCBvdXQsIGVycl0gPSBwcm9jZXNzLmNvbW11bmljYXRlX3V0ZjhfZmluaXNoKHJlcylcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZ2V0X3N1Y2Nlc3NmdWwoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUob3V0LnRyaW0oKSlcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoZXJyLnRyaW0oKSkpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIGEgY29tbWFuZCBhc3luY2hyb25vdXNseS5cbiAgICAgKiBUaGUgY29tbWFuZCBpcyBwYXJzZWQgdXNpbmcge0BsaW5rIEdMaWIuc2hlbGxfcGFyc2VfYXJndn0uXG4gICAgICpcbiAgICAgKiBAdGhyb3dzIHN0ZGVyclxuICAgICAqIEByZXR1cm4gc3Rkb3V0IG9mIHRoZSBzdWJwcm9jZXNzXG4gICAgICovXG4gICAgc3RhdGljIGV4ZWNBc3luYyhjbWQ6IHN0cmluZykge1xuICAgICAgICBjb25zdCBbLCBhcmd2XSA9IEdMaWIuc2hlbGxfcGFyc2VfYXJndihjbWQpXG4gICAgICAgIHJldHVybiBQcm9jZXNzLmV4ZWNBc3luY3YoYXJndiEpXG4gICAgfVxufVxuXG50eXBlIEFyZ3MgPSB7XG4gICAgY21kOiBzdHJpbmcgfCBzdHJpbmdbXVxuICAgIG91dD86IChzdGRvdXQ6IHN0cmluZykgPT4gdm9pZFxuICAgIGVycj86IChzdGRlcnI6IHN0cmluZykgPT4gdm9pZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gc3VicHJvY2VzcyhhcmdzOiBBcmdzKTogUHJvY2Vzc1xuXG5leHBvcnQgZnVuY3Rpb24gc3VicHJvY2VzcyhcbiAgICBjbWQ6IHN0cmluZyB8IHN0cmluZ1tdLFxuICAgIG9uT3V0PzogKHN0ZG91dDogc3RyaW5nKSA9PiB2b2lkLFxuICAgIG9uRXJyPzogKHN0ZGVycjogc3RyaW5nKSA9PiB2b2lkLFxuKTogUHJvY2Vzc1xuXG5leHBvcnQgZnVuY3Rpb24gc3VicHJvY2VzcyhcbiAgICBhcmdzT3JDbWQ6IEFyZ3MgfCBzdHJpbmcgfCBzdHJpbmdbXSxcbiAgICBvbk91dDogKHN0ZG91dDogc3RyaW5nKSA9PiB2b2lkID0gcHJpbnQsXG4gICAgb25FcnI6IChzdGRlcnI6IHN0cmluZykgPT4gdm9pZCA9IHByaW50ZXJyLFxuKSB7XG4gICAgY29uc3QgYXJncyA9IEFycmF5LmlzQXJyYXkoYXJnc09yQ21kKSB8fCB0eXBlb2YgYXJnc09yQ21kID09PSBcInN0cmluZ1wiXG4gICAgY29uc3QgeyBjbWQsIGVyciwgb3V0IH0gPSB7XG4gICAgICAgIGNtZDogYXJncyA/IGFyZ3NPckNtZCA6IGFyZ3NPckNtZC5jbWQsXG4gICAgICAgIGVycjogYXJncyA/IG9uRXJyIDogYXJnc09yQ21kLmVyciB8fCBvbkVycixcbiAgICAgICAgb3V0OiBhcmdzID8gb25PdXQgOiBhcmdzT3JDbWQub3V0IHx8IG9uT3V0LFxuICAgIH1cblxuICAgIGNvbnN0IHByb2MgPSBBcnJheS5pc0FycmF5KGNtZCkgPyBQcm9jZXNzLnN1YnByb2Nlc3N2KGNtZCkgOiBQcm9jZXNzLnN1YnByb2Nlc3MoY21kKVxuICAgIHByb2MuY29ubmVjdChcInN0ZG91dFwiLCAoXywgc3Rkb3V0OiBzdHJpbmcpID0+IG91dChzdGRvdXQpKVxuICAgIHByb2MuY29ubmVjdChcInN0ZGVyclwiLCAoXywgc3RkZXJyOiBzdHJpbmcpID0+IGVycihzdGRlcnIpKVxuICAgIHJldHVybiBwcm9jXG59XG5cbi8qKiBAdGhyb3dzIHtFcnJvcn0gVGhyb3dzIHN0ZGVyciAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4ZWMoY21kOiBzdHJpbmcgfCBzdHJpbmdbXSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGNtZCkgPyBQcm9jZXNzLmV4ZWN2KGNtZCkgOiBQcm9jZXNzLmV4ZWMoY21kKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZXhlY0FzeW5jKGNtZDogc3RyaW5nIHwgc3RyaW5nW10pOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNtZCkpIHtcbiAgICAgICAgcmV0dXJuIFByb2Nlc3MuZXhlY0FzeW5jdihjbWQpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFByb2Nlc3MuZXhlY0FzeW5jKGNtZClcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdWJwcm9jZXNzKGluaXQ6IHN0cmluZywgZXhlYzogc3RyaW5nIHwgc3RyaW5nW10pOiBBY2Nlc3NvcjxzdHJpbmc+XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdWJwcm9jZXNzPFQ+KFxuICAgIGluaXQ6IFQsXG4gICAgZXhlYzogc3RyaW5nIHwgc3RyaW5nW10sXG4gICAgdHJhbnNmb3JtOiAoc3Rkb3V0OiBzdHJpbmcsIHByZXY6IFQpID0+IFQsXG4pOiBBY2Nlc3NvcjxUPlxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3VicHJvY2VzczxUPihcbiAgICBpbml0OiBULFxuICAgIGV4ZWM6IHN0cmluZyB8IHN0cmluZ1tdLFxuICAgIHRyYW5zZm9ybT86IChzdGRvdXQ6IHN0cmluZywgcHJldjogVCkgPT4gVCxcbik6IEFjY2Vzc29yPFQ+IHtcbiAgICBsZXQgY3VycmVudFZhbHVlID0gaW5pdFxuICAgIGxldCBwcm9jOiBQcm9jZXNzIHwgbnVsbCA9IG51bGxcbiAgICBjb25zdCBzdWJzY3JpYmVycyA9IG5ldyBTZXQ8KCkgPT4gdm9pZD4oKVxuXG4gICAgZnVuY3Rpb24gc3Vic2NyaWJlKGNhbGxiYWNrOiAoKSA9PiB2b2lkKTogKCkgPT4gdm9pZCB7XG4gICAgICAgIGlmIChzdWJzY3JpYmVycy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICBwcm9jID0gc3VicHJvY2VzcyhleGVjLCAoc3Rkb3V0KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB0cmFuc2Zvcm0gPyB0cmFuc2Zvcm0oc3Rkb3V0LCBjdXJyZW50VmFsdWUpIDogKHN0ZG91dCBhcyBUKVxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50VmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIEFycmF5LmZyb20oc3Vic2NyaWJlcnMpLmZvckVhY2goKGNiKSA9PiBjYigpKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICBzdWJzY3JpYmVycy5hZGQoY2FsbGJhY2spXG5cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHN1YnNjcmliZXJzLmRlbGV0ZShjYWxsYmFjaylcbiAgICAgICAgICAgIGlmIChzdWJzY3JpYmVycy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcHJvYz8ua2lsbCgpXG4gICAgICAgICAgICAgICAgcHJvYyA9IG51bGxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgQWNjZXNzb3IoKCkgPT4gY3VycmVudFZhbHVlLCBzdWJzY3JpYmUpXG59XG4iLCAiaW1wb3J0IHsgZXhlYyB9IGZyb20gXCJhZ3MvcHJvY2Vzc1wiO1xuaW1wb3J0IEdMaWIgZnJvbSBcImdpOi8vR0xpYlwiO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RW52KGVudjogc3RyaW5nLCBmYWxsYmFjazogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIEdMaWIuZ2V0ZW52KGVudikgPz8gZmFsbGJhY2s7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFbnZCb29sKGVudjogc3RyaW5nLCBmYWxsYmFjazogYm9vbGVhbik6IGJvb2xlYW4ge1xuICBjb25zdCB0ZW1wID0gZ2V0RW52KGVudiwgXCJcIik7XG4gIGlmICh0ZW1wID09IFwiXCIpIHtcbiAgICByZXR1cm4gZmFsbGJhY2s7XG4gIH1cbiAgcmV0dXJuIG5ldyBCb29sZWFuKHRlbXApIGFzIGJvb2xlYW47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb25maWcoKTogQ29uZmlnIHtcbiAgcmV0dXJuIGNvbmZpZztcbn1cblxuZXhwb3J0IHR5cGUgQ29uZmlnID0ge1xuICB3ZWF0aGVyOiB7XG4gICAgYXBpU2V0dGluZ3M6IHtcbiAgICAgIGJhc2VVcmw6IHN0cmluZyxcbiAgICAgIGNpdHlJZDogc3RyaW5nLFxuICAgICAgYXBpS2V5OiBzdHJpbmcsXG4gICAgICB1bml0czogc3RyaW5nLFxuICAgICAgY250OiBzdHJpbmcsXG4gICAgICBsYW5ndWFnZTogc3RyaW5nLFxuICAgIH0sXG4gICAgcmVmcmVzaDoge1xuICAgICAgZW5hYmxlZDogYm9vbGVhbixcbiAgICAgIHJlZnJlc2hJbnRlcnZhbDogbnVtYmVyLFxuICAgIH0sXG4gIH0sXG4gIGNvbmt5OiB7XG4gICAgZW5hYmxlZDogYm9vbGVhbixcbiAgfSxcbn1cblxuY29uc3QgY29uZmlnID0ge1xuICBhcHBUaXRsZTogXCJhZ3MtdHJhbnNmZXItZGV2XCIsXG4gIG5vdGlmaWNhdGlvbnM6IHtcbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIGRldjogZmFsc2UsXG4gICAgdGV4dDoge1xuICAgICAgbWF4U3VtbWFyeUxlbmd0aDogMzAsXG4gICAgICBtYXhCb2R5TGVuZ3RoOiA0MCxcbiAgICB9LFxuICAgIGRlZmF1bHRUaW1lb3V0TXM6IDMwMDAsXG4gIH0sXG4gIGJhcjoge1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gIH0sXG4gIHBsYXllcjoge1xuICAgIGVuYWJsZWQ6IGZhbHNlLFxuICB9LFxuICBzdGF0dXM6IHtcbiAgICBlbmFibGVkOiB0cnVlLFxuICB9LFxuICBicmlnaHRuZXNzQ29udHJvbGxlcjoge1xuICAgIHBvbGxJbnRlcnZhbDogMTAwMCxcbiAgICAvLyBwb2xsQ29tbWFuZDogXCJicmlnaHRuZXNzY3RsIGdldFwiLFxuICAgIHBvbGxDb21tYW5kOiBcImVjaG8gMTAwXCIsXG4gICAgcG9zdFBvbGw6IChjbWRSZXN1bHQ6IHN0cmluZykgPT4ge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KGNtZFJlc3VsdCkgLyBwYXJzZUludChleGVjKFwiZWNobyAxMDBcIikpIHx8IDE7XG4gICAgICAvLyByZXR1cm4gcGFyc2VJbnQoY21kUmVzdWx0KSAvIHBhcnNlSW50KGV4ZWMoXCJicmlnaHRuZXNzY3RsIG1heFwiKSkgfHwgMTtcbiAgICB9XG4gIH0sXG4gIHdlYXRoZXI6IHtcbiAgICBhcGlTZXR0aW5nczoge1xuICAgICAgYmFzZVVybDogXCJodHRwczovL2FwaS5vcGVud2VhdGhlcm1hcC5vcmcvZGF0YS8yLjUvd2VhdGhlclwiLFxuICAgICAgY2l0eUlkOiBnZXRFbnYoXCJXRUFUSEVSX0NJVFlfSURcIiwgXCJcIiksXG4gICAgICBhcGlLZXk6IGdldEVudihcIldFQVRIRVJfQVBJX0tFWVwiLCBcIlwiKSxcbiAgICAgIHVuaXRzOiBnZXRFbnYoXCJXRUFUSEVSX1VOSVRTXCIsIFwiXCIpLFxuICAgICAgbGFuZ3VhZ2U6IGdldEVudihcIldFQVRIRVJfTEFOR1wiLCBcIlwiKSxcbiAgICAgIGNudDogXCI1XCIsXG4gICAgfSxcbiAgICByZWZyZXNoOiB7XG4gICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgcmVmcmVzaEludGVydmFsOiAxMDAwICogNjAgKiA2MCxcbiAgICB9LFxuICB9LFxuICBjb25reToge1xuICAgIGVuYWJsZWQ6IGdldEVudkJvb2woXCJDT05LWV9FTkFCTEVEXCIsIGZhbHNlKSxcbiAgfSxcbiAgLy8gY29uc3QgY2l0eV9pZCA9IFwiNDk4ODE3XCJcbiAgLy8gY29uc3QgYXBpX2tleSA9IFwiMjM0NmZhNGQ1ZjZjMGFiOTNjODE2ZWNlNjE5Mzc0NmFcIlxuICAvLyBjb25zdCB1bml0ID0gXCJtZXRyaWNcIlxuICAvLyBjb25zdCBsYW5nID0gXCJlblwiXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25maWc7XG4iLCAiaW1wb3J0IEFzdGFsIGZyb20gXCJnaTovL0FzdGFsP3ZlcnNpb249NC4wXCJcbmltcG9ydCBHdGsgZnJvbSBcImdpOi8vR3RrP3ZlcnNpb249NC4wXCJcbmltcG9ydCBHZGsgZnJvbSBcImdpOi8vR2RrP3ZlcnNpb249NC4wXCJcbmV4cG9ydCB7IEFzdGFsLCBHdGssIEdkayB9XG4iLCAiaW1wb3J0IEdPYmplY3QsIHsgcmVnaXN0ZXIsIHNpZ25hbCB9IGZyb20gXCJnbmltL2dvYmplY3RcIlxuaW1wb3J0IHsgQWNjZXNzb3IgfSBmcm9tIFwiZ25pbVwiXG5pbXBvcnQgeyBleGVjQXN5bmMgfSBmcm9tIFwiLi9wcm9jZXNzLmpzXCJcbmltcG9ydCBHTGliIGZyb20gXCJnaTovL0dMaWI/dmVyc2lvbj0yLjBcIlxuXG5leHBvcnQgbmFtZXNwYWNlIFRpbWVyIHtcbiAgICBleHBvcnQgaW50ZXJmYWNlIFNpZ25hbFNpZ25hdHVyZXMgZXh0ZW5kcyBHT2JqZWN0Lk9iamVjdC5TaWduYWxTaWduYXR1cmVzIHtcbiAgICAgICAgbm93KCk6IHZvaWRcbiAgICAgICAgY2FuY2VsbGVkKCk6IHZvaWRcbiAgICB9XG59XG5cbkByZWdpc3RlcigpXG5leHBvcnQgY2xhc3MgVGltZXIgZXh0ZW5kcyBHT2JqZWN0Lk9iamVjdCB7XG4gICAgZGVjbGFyZSAkc2lnbmFsczogVGltZXIuU2lnbmFsU2lnbmF0dXJlc1xuXG4gICAgQHNpZ25hbCgpXG4gICAgcHJvdGVjdGVkIG5vdygpIHt9XG5cbiAgICBAc2lnbmFsKClcbiAgICBwcm90ZWN0ZWQgY2FuY2VsbGVkKCkge31cblxuICAgIHN0YXRpYyBpbnRlcnZhbChpbnRlcnZhbDogbnVtYmVyLCBjYWxsYmFjaz86ICgpID0+IHZvaWQpIHtcbiAgICAgICAgY29uc3QgeyB0aW1lciwgbm93IH0gPSBUaW1lci5uZXcoY2FsbGJhY2ssICgpID0+IHtcbiAgICAgICAgICAgIGlmIChpbW1lZGlhdGUuaXNfZGVzdHJveWVkKCkpIGltbWVkaWF0ZS5kZXN0cm95KClcbiAgICAgICAgICAgIGlmIChzb3VyY2UuaXNfZGVzdHJveWVkKCkpIHNvdXJjZS5kZXN0cm95KClcbiAgICAgICAgfSlcbiAgICAgICAgY29uc3QgaW1tZWRpYXRlID0gc2V0VGltZW91dChub3cpXG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IHNldEludGVydmFsKG5vdywgaW50ZXJ2YWwpXG4gICAgICAgIHJldHVybiB0aW1lclxuICAgIH1cblxuICAgIHN0YXRpYyB0aW1lb3V0KGludGVydmFsOiBudW1iZXIsIGNhbGxiYWNrPzogKCkgPT4gdm9pZCkge1xuICAgICAgICBjb25zdCB7IHRpbWVyLCBub3cgfSA9IFRpbWVyLm5ldyhjYWxsYmFjaywgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHNvdXJjZS5pc19kZXN0cm95ZWQoKSkgc291cmNlLmRlc3Ryb3koKVxuICAgICAgICB9KVxuICAgICAgICBjb25zdCBzb3VyY2UgPSBzZXRUaW1lb3V0KG5vdywgaW50ZXJ2YWwpXG4gICAgICAgIHJldHVybiB0aW1lclxuICAgIH1cblxuICAgIHN0YXRpYyBpZGxlKGNhbGxiYWNrPzogKCkgPT4gdm9pZCkge1xuICAgICAgICBjb25zdCB7IHRpbWVyLCBub3cgfSA9IFRpbWVyLm5ldyhjYWxsYmFjaywgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHNvdXJjZS5pc19kZXN0cm95ZWQoKSkgc291cmNlLmRlc3Ryb3koKVxuICAgICAgICB9KVxuICAgICAgICBjb25zdCBzb3VyY2UgPSBzZXRUaW1lb3V0KG5vdylcbiAgICAgICAgcmV0dXJuIHRpbWVyXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgbmV3KG9uTm93PzogKCkgPT4gdm9pZCwgb25DYW5jZWxsZWQ/OiAoKSA9PiB2b2lkKSB7XG4gICAgICAgIGNvbnN0IHRpbWVyID0gbmV3IFRpbWVyKClcbiAgICAgICAgY29uc3Qgbm93ID0gdGltZXIuY29ubmVjdChcIm5vd1wiLCAoKSA9PiB2b2lkIG9uTm93Py4oKSlcbiAgICAgICAgY29uc3QgY2FuY2VsbGVkID0gdGltZXIuY29ubmVjdChcImNhbmNlbGxlZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICB0aW1lci5kaXNjb25uZWN0KG5vdylcbiAgICAgICAgICAgIHRpbWVyLmRpc2Nvbm5lY3QoY2FuY2VsbGVkKVxuICAgICAgICAgICAgb25DYW5jZWxsZWQ/LigpXG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiB7IHRpbWVyLCBub3c6ICgpID0+IHRpbWVyLm5vdygpIH1cbiAgICB9XG5cbiAgICBjb25uZWN0PFMgZXh0ZW5kcyBrZXlvZiBUaW1lci5TaWduYWxTaWduYXR1cmVzPihcbiAgICAgICAgc2lnbmFsOiBTLFxuICAgICAgICBjYWxsYmFjazogR09iamVjdC5TaWduYWxDYWxsYmFjazx0aGlzLCBUaW1lci5TaWduYWxTaWduYXR1cmVzW1NdPixcbiAgICApOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gc3VwZXIuY29ubmVjdChzaWduYWwsIGNhbGxiYWNrKVxuICAgIH1cblxuICAgIGNhbmNlbCgpIHtcbiAgICAgICAgdGhpcy5jYW5jZWxsZWQoKVxuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IHsgaW50ZXJ2YWwsIHRpbWVvdXQsIGlkbGUgfSA9IFRpbWVyXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQb2xsKFxuICAgIGluaXQ6IHN0cmluZyxcbiAgICBpbnRlcnZhbDogbnVtYmVyLFxuICAgIGV4ZWM6IHN0cmluZyB8IHN0cmluZ1tdLFxuKTogQWNjZXNzb3I8c3RyaW5nPlxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUG9sbDxUPihcbiAgICBpbml0OiBULFxuICAgIGludGVydmFsOiBudW1iZXIsXG4gICAgZXhlYzogc3RyaW5nIHwgc3RyaW5nW10sXG4gICAgdHJhbnNmb3JtOiAoc3Rkb3V0OiBzdHJpbmcsIHByZXY6IFQpID0+IFQsXG4pOiBBY2Nlc3NvcjxUPlxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUG9sbDxUPihcbiAgICBpbml0OiBULFxuICAgIGludGVydmFsOiBudW1iZXIsXG4gICAgZm46IChwcmV2OiBUKSA9PiBUIHwgUHJvbWlzZTxUPixcbik6IEFjY2Vzc29yPFQ+XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQb2xsPFQ+KFxuICAgIGluaXQ6IFQsXG4gICAgaXZhbDogbnVtYmVyLFxuICAgIGV4ZWNPckZuOiBzdHJpbmcgfCBzdHJpbmdbXSB8ICgocHJldjogVCkgPT4gVCB8IFByb21pc2U8VD4pLFxuICAgIHRyYW5zZm9ybT86IChzdGRvdXQ6IHN0cmluZywgcHJldjogVCkgPT4gVCxcbik6IEFjY2Vzc29yPFQ+IHtcbiAgICBsZXQgY3VycmVudFZhbHVlID0gaW5pdFxuICAgIGxldCB0aW1lcjogR0xpYi5Tb3VyY2UgfCBudWxsID0gbnVsbFxuICAgIGNvbnN0IHN1YnNjcmliZXJzID0gbmV3IFNldDwoKSA9PiB2b2lkPigpXG5cbiAgICBmdW5jdGlvbiBzZXQodmFsdWU6IFQpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9PSBjdXJyZW50VmFsdWUpIHtcbiAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IHZhbHVlXG4gICAgICAgICAgICBBcnJheS5mcm9tKHN1YnNjcmliZXJzKS5mb3JFYWNoKChjYikgPT4gY2IoKSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXB1dGUoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZXhlY09yRm4gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBleGVjT3JGbihjdXJyZW50VmFsdWUpXG4gICAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUudGhlbihzZXQpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNldCh2YWx1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGV4ZWNBc3luYyhleGVjT3JGbikudGhlbigoc3Rkb3V0KSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0KHRyYW5zZm9ybSA/IHRyYW5zZm9ybShzdGRvdXQsIGN1cnJlbnRWYWx1ZSkgOiAoc3Rkb3V0IGFzIFQpKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN1YnNjcmliZShjYWxsYmFjazogKCkgPT4gdm9pZCk6ICgpID0+IHZvaWQge1xuICAgICAgICBpZiAoc3Vic2NyaWJlcnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgc2V0VGltZW91dChjb21wdXRlKVxuICAgICAgICAgICAgdGltZXIgPSBzZXRJbnRlcnZhbChjb21wdXRlLCBpdmFsKVxuICAgICAgICB9XG5cbiAgICAgICAgc3Vic2NyaWJlcnMuYWRkKGNhbGxiYWNrKVxuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBzdWJzY3JpYmVycy5kZWxldGUoY2FsbGJhY2spXG4gICAgICAgICAgICBpZiAoc3Vic2NyaWJlcnMuc2l6ZSA9PT0gMCAmJiB0aW1lcikge1xuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGltZXIpXG4gICAgICAgICAgICAgICAgdGltZXIgPSBudWxsXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEFjY2Vzc29yKCgpID0+IGN1cnJlbnRWYWx1ZSwgc3Vic2NyaWJlKVxufVxuIiwgImltcG9ydCB7IEFjY2Vzc29yLCBjcmVhdGVTdGF0ZSwgU3RhdGUgfSBmcm9tIFwiYWdzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0b3JlPFQ+IHtcbiAgcHJpdmF0ZSBzdGF0ZTogU3RhdGU8VD47XG5cbiAgY29uc3RydWN0b3IoaW5pdGlhbFZhbHVlOiBUKSB7XG4gICAgdGhpcy5zdGF0ZSA9IGNyZWF0ZVN0YXRlKGluaXRpYWxWYWx1ZSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0KCk6IFQge1xuICAgIHJldHVybiB0aGlzLnN0YXRlWzBdLmdldCgpO1xuICB9XG5cbiAgcHVibGljIGdldEFnc1N0YXRlKCk6IEFjY2Vzc29yPFQ+IHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZVswXTtcbiAgfVxuXG4gIHB1YmxpYyBzZXQodmFsdWU6IFQpIHtcbiAgICBjb25zb2xlLmxvZyhcIlZhbHVlIHRvIHNldDpcIiwgdmFsdWUpXG4gICAgY29uc3QgW18sIHNldFN0YXRlXSA9IHRoaXMuc3RhdGU7XG4gICAgc2V0U3RhdGUodmFsdWUpO1xuICB9XG5cbiAgcHVibGljIHNldFBhcnRpYWwodmFsdWU6IFBhcnRpYWw8VD4sIHByZXNlcnZlTnVsbDogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPSBcIm9iamVjdFwiKSB7XG4gICAgICB0aGlzLnNldCh2YWx1ZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHByZXNlcnZlTnVsbCkge1xuICAgICAgdGhpcy5zZXQoT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5nZXQoKSwgdmFsdWUpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBlbnRyaWVzID0gW107XG5cbiAgICBmb3IgKGxldCBba2V5LCBrZXlWYWxdIG9mIE9iamVjdC5lbnRyaWVzKHZhbHVlKSkge1xuICAgICAgaWYgKGtleVZhbCkge1xuICAgICAgICBlbnRyaWVzLnB1c2goW2tleSwga2V5VmFsXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zZXQoT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5nZXQoKSwgT2JqZWN0LmZyb21FbnRyaWVzKGVudHJpZXMpKSk7XG4gIH1cbn1cbiIsICJpbXBvcnQgU3RvcmUgZnJvbSBcIn4vc3JjL2NvcmUvc3RvcmUvc3RvcmVcIjtcblxuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgQmFzZVZNPFQ+IHtcbiAgcHJvdGVjdGVkIHN0YXRlOiBTdG9yZTxUPjtcblxuICBwdWJsaWMgZ2V0IGFnc1N0YXRlKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLmdldEFnc1N0YXRlKCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0QWdzUGFydFN0YXRlPFIgPSBUPih0cmFuc2Zvcm06ICh2YWx1ZTogVCkgPT4gUikge1xuICAgIHJldHVybiB0aGlzLmFnc1N0YXRlKHRyYW5zZm9ybSk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihkZWZhdWx0U3RvcmVWYWx1ZTogVCkge1xuICAgIHRoaXMuc3RhdGUgPSBuZXcgU3RvcmUoZGVmYXVsdFN0b3JlVmFsdWUpO1xuICB9XG59XG4iLCAiaW1wb3J0IFdwIGZyb20gXCJnaTovL0FzdGFsV3BcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3NkVm9sdW1lTW9kZWwge1xuXG4gIHByaXZhdGUgc3BlYWtlcjogV3AuRW5kcG9pbnQ7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5zcGVha2VyID0gV3AuZ2V0X2RlZmF1bHQoKS5nZXRfZGVmYXVsdF9zcGVha2VyKCk7XG4gIH1cblxuICBwdWJsaWMgb25TcGVha2VyVm9sdW1lKGNhbGxiYWNrOiAodmFsdWU6IG51bWJlciwgaWNvbjogc3RyaW5nKSA9PiB2b2lkKSB7XG4gICAgdGhpcy5zcGVha2VyLmNvbm5lY3QoXCJub3RpZnk6OnZvbHVtZVwiLCAoc3JjLCBwc3BlYykgPT4ge1xuICAgICAgaWYgKHBzcGVjLmdldF9uYW1lKCkgPT0gXCJ2b2x1bWVcIikge1xuICAgICAgICBjYWxsYmFjayhzcmMuZ2V0X3ZvbHVtZSgpLCBzcmMuZ2V0X3ZvbHVtZV9pY29uKCkpXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuIiwgIi8vIGltcG9ydCBXcCBmcm9tIFwiZ2k6Ly9Bc3RhbFdwXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9zZEJyaWdodG5lc3NNb2RlbCB7XG5cbiAgLy8gcHJpdmF0ZSBzcGVha2VyOiBXcC5FbmRwb2ludDtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvLyB0aGlzLnNwZWFrZXIgPSBXcC5nZXRfZGVmYXVsdCgpLmdldF9kZWZhdWx0X3NwZWFrZXIoKTtcbiAgfVxuXG4gIHB1YmxpYyBvbkJyaWdodG5lc3MoX2NhbGxiYWNrOiAodmFsdWU6IG51bWJlciwgaWNvbjogc3RyaW5nKSA9PiB2b2lkKSB7XG4gICAgLy8gYnJpZ2h0bmVzcy5jb25uZWN0KFwibm90aWZ5XCIsIChzcmMsIF8pID0+IHtcbiAgICAvLyAgIHNob3coc3JjLnNjcmVlbiwgXCJkaXNwbGF5LWJyaWdodG5lc3Mtc3ltYm9saWNcIilcbiAgICAvLyB9KTtcbiAgfVxufVxuXG4vLyBpbXBvcnQgR09iamVjdCwgeyByZWdpc3RlciwgcHJvcGVydHkgfSBmcm9tIFwiYXN0YWwvZ29iamVjdFwiXG4vLyBpbXBvcnQgeyBtb25pdG9yRmlsZSwgcmVhZEZpbGVBc3luYyB9IGZyb20gXCJhc3RhbC9maWxlXCJcbi8vIGltcG9ydCB7IGV4ZWMsIGV4ZWNBc3luYyB9IGZyb20gXCJhc3RhbC9wcm9jZXNzXCJcbi8vXG4vLyAvLyBjb25zdCBnZXQgPSAoYXJnczogc3RyaW5nKSA9PiBOdW1iZXIoZXhlYyhgYnJpZ2h0bmVzc2N0bCAke2FyZ3N9YCkpXG4vLyBjb25zdCBnZXQgPSAoYXJnczogc3RyaW5nKSA9PiAxMDA7XG4vLyBjb25zdCBzY3JlZW4gPSBleGVjKGBiYXNoIC1jIFwibHMgLXcxIC9zeXMvY2xhc3MvYmFja2xpZ2h0IHwgaGVhZCAtMVwiYClcbi8vXG4vLyBAcmVnaXN0ZXIoeyBHVHlwZU5hbWU6IFwiQnJpZ2h0bmVzc1wiIH0pXG4vLyBleHBvcnQgZGVmYXVsdCBjbGFzcyBCcmlnaHRuZXNzQ29udHJvbGxlciBleHRlbmRzIEdPYmplY3QuT2JqZWN0IHtcbi8vICAgc3RhdGljIGluc3RhbmNlOiBCcmlnaHRuZXNzQ29udHJvbGxlclxuLy8gICBzdGF0aWMgZ2V0X2RlZmF1bHQoKSB7XG4vLyAgICAgaWYgKCF0aGlzLmluc3RhbmNlKSB7XG4vLyAgICAgICB0aGlzLmluc3RhbmNlID0gbmV3IEJyaWdodG5lc3NDb250cm9sbGVyKClcbi8vICAgICB9XG4vL1xuLy8gICAgIHJldHVybiB0aGlzLmluc3RhbmNlXG4vLyAgIH1cbi8vXG4vLyAgICNzY3JlZW5NYXggPSBnZXQoXCJtYXhcIilcbi8vICAgI3NjcmVlbiA9IGdldChcImdldFwiKSAvIChnZXQoXCJtYXhcIikgfHwgMSlcbi8vXG4vLyAgIEBwcm9wZXJ0eShOdW1iZXIpXG4vLyAgIGdldCBzY3JlZW4oKSB7IHJldHVybiB0aGlzLiNzY3JlZW4gfVxuLy9cbi8vICAgc2V0IHNjcmVlbihwZXJjZW50KSB7XG4vLyAgICAgaWYgKHBlcmNlbnQgPCAwKVxuLy8gICAgICAgcGVyY2VudCA9IDBcbi8vXG4vLyAgICAgaWYgKHBlcmNlbnQgPiAxKVxuLy8gICAgICAgcGVyY2VudCA9IDFcbi8vXG4vLyAgICAgLy8gZXhlY0FzeW5jKGBicmlnaHRuZXNzY3RsIHNldCAke01hdGguZmxvb3IocGVyY2VudCAqIDEwMCl9JSAtcWApLnRoZW4oKCkgPT4ge1xuLy8gICAgIC8vICAgdGhpcy4jc2NyZWVuID0gcGVyY2VudFxuLy8gICAgIC8vICAgdGhpcy5ub3RpZnkoXCJzY3JlZW5cIilcbi8vICAgICAvLyB9KVxuLy8gICAgIGV4ZWNBc3luYyhgZWNobyAxYCkudGhlbigoKSA9PiB7XG4vLyAgICAgICB0aGlzLiNzY3JlZW4gPSBwZXJjZW50XG4vLyAgICAgICB0aGlzLm5vdGlmeShcInNjcmVlblwiKVxuLy8gICAgIH0pXG4vLyAgIH1cbi8vXG4vLyAgIGdldCBzY3JlZW5WYWx1ZSgpOiBudW1iZXIge1xuLy8gICAgIHJldHVybiBNYXRoLmZsb29yKHRoaXMuc2NyZWVuICogMTAwKVxuLy8gICB9XG4vL1xuLy8gICBzZXQgc2NyZWVuVmFsdWUocGVyY2VudDogbnVtYmVyKSB7XG4vLyAgICAgdGhpcy5zY3JlZW4gPSBwZXJjZW50IC8gMTAwO1xuLy8gICB9XG4vL1xuLy8gICBjb25zdHJ1Y3RvcigpIHtcbi8vICAgICBzdXBlcigpXG4vLyAgICAgLy8gbW9uaXRvckZpbGUoYC9zeXMvY2xhc3MvYmFja2xpZ2h0LyR7c2NyZWVufS9icmlnaHRuZXNzYCwgYXN5bmMgZiA9PiB7XG4vLyAgICAgLy8gICBjb25zdCB2ID0gYXdhaXQgcmVhZEZpbGVBc3luYyhmKVxuLy8gICAgIC8vICAgdGhpcy4jc2NyZWVuID0gTnVtYmVyKHYpIC8gdGhpcy4jc2NyZWVuTWF4XG4vLyAgICAgLy8gICB0aGlzLm5vdGlmeShcInNjcmVlblwiKVxuLy8gICAgIC8vIH0pXG4vLyAgIH1cbi8vIH1cbiIsICJpbXBvcnQgeyB0aW1lb3V0LCBUaW1lciB9IGZyb20gXCJhZ3MvdGltZVwiO1xuaW1wb3J0IEJhc2VWTSBmcm9tIFwifi9zcmMvY29yZS9tdnZtL2Jhc2Utdm1cIjtcbmltcG9ydCBPc2RWb2x1bWVNb2RlbCBmcm9tIFwifi9zcmMvZmVhdHVyZXMvb3NkL21vZGVsL29zZC12b2x1bWUtbW9kZWxcIjtcbmltcG9ydCBPc2RCcmlnaHRuZXNzTW9kZWwgZnJvbSBcIn4vc3JjL2ZlYXR1cmVzL29zZC9tb2RlbC9vc2QtYnJpZ2h0bmVzcy1tb2RlbFwiO1xuXG50eXBlIE9zZFBvcHVwU3RhdGUgPSB7XG4gIHZhbHVlPzogbnVtYmVyO1xuICBpY29uPzogc3RyaW5nO1xuICB2aXNpYmxlOiBib29sZWFuO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3NkUG9wdXBWTSBleHRlbmRzIEJhc2VWTTxPc2RQb3B1cFN0YXRlPiB7XG4gIHByaXZhdGUgdGltZXI/OiBUaW1lcjtcbiAgcHJpdmF0ZSB2b2x1bWVNb2RlbDogT3NkVm9sdW1lTW9kZWw7XG4gIHByaXZhdGUgYnJpZ2h0bmVzc01vZGVsOiBPc2RCcmlnaHRuZXNzTW9kZWw7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgdm9sdW1lTW9kZWw/OiBPc2RWb2x1bWVNb2RlbCxcbiAgICBicmlnaHRuZXNzTW9kZWw/OiBPc2RCcmlnaHRuZXNzTW9kZWwsXG4gICkge1xuICAgIHN1cGVyKHsgdmlzaWJsZTogZmFsc2UgfSk7XG4gICAgdGhpcy52b2x1bWVNb2RlbCA9IHZvbHVtZU1vZGVsID8/IG5ldyBPc2RWb2x1bWVNb2RlbCgpO1xuICAgIHRoaXMuYnJpZ2h0bmVzc01vZGVsID0gYnJpZ2h0bmVzc01vZGVsID8/IG5ldyBPc2RCcmlnaHRuZXNzTW9kZWwoKTtcbiAgfVxuXG4gIHB1YmxpYyBpbml0TGlzdGVuKCkge1xuICAgIHRoaXMudm9sdW1lTW9kZWwub25TcGVha2VyVm9sdW1lKCh2YWx1ZSwgaWNvbikgPT4ge1xuICAgICAgdGhpcy5zZXRJY29uKGljb24pO1xuICAgICAgdGhpcy5zZXRWYWx1ZSh2YWx1ZSk7XG4gICAgICB0aGlzLmFjdGl2YXRlRm9yKDEwMDApO1xuICAgIH0pXG5cbiAgICB0aGlzLmJyaWdodG5lc3NNb2RlbC5vbkJyaWdodG5lc3MoKHZhbHVlLCBpY29uKSA9PiB7XG4gICAgICB0aGlzLnNldEljb24oaWNvbik7XG4gICAgICB0aGlzLnNldFZhbHVlKHZhbHVlKTtcbiAgICAgIHRoaXMuYWN0aXZhdGVGb3IoMTAwMCk7XG4gICAgfSlcbiAgfVxuXG4gIHByaXZhdGUgc2V0SWNvbihpY29uOiBzdHJpbmcpIHtcbiAgICB0aGlzLnN0YXRlLnNldFBhcnRpYWwoe1xuICAgICAgaWNvbixcbiAgICB9KVxuICB9XG5cbiAgcHJpdmF0ZSBzZXRWYWx1ZSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5zdGF0ZS5zZXRQYXJ0aWFsKHtcbiAgICAgIHZhbHVlLFxuICAgIH0pXG4gIH1cblxuICBwcml2YXRlIGFjdGl2YXRlRm9yKHRpbWVvdXRNczogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMudGltZXIpIHtcbiAgICAgIHRoaXMudGltZXIuY2FuY2VsKCk7XG4gICAgICB0aGlzLnRpbWVyID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHRoaXMuc3RhdGUuc2V0UGFydGlhbCh7XG4gICAgICB2aXNpYmxlOiB0cnVlLFxuICAgIH0pXG5cbiAgICB0aGlzLnRpbWVyID0gdGltZW91dCh0aW1lb3V0TXMsICgpID0+IHtcbiAgICAgIHRoaXMuc3RhdGUuc2V0UGFydGlhbCh7XG4gICAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgICAgfSlcblxuICAgICAgdGhpcy50aW1lciA9IHVuZGVmaW5lZDtcbiAgICB9KVxuICB9XG59XG4iLCAiaW1wb3J0IEd0ayBmcm9tIFwiZ2k6Ly9HdGs/dmVyc2lvbj00LjBcIlxuaW1wb3J0IEFzdGFsIGZyb20gXCJnaTovL0FzdGFsP3ZlcnNpb249NC4wXCJcbmltcG9ydCB7IENDUHJvcHMgfSBmcm9tIFwiZ25pbVwiXG5pbXBvcnQgeyBpbnRyaW5zaWNFbGVtZW50cyB9IGZyb20gXCJnbmltL2d0azQvanN4LXJ1bnRpbWVcIlxuXG50eXBlIFByb3BzPFQgZXh0ZW5kcyBHdGsuV2lkZ2V0LCBQcm9wcz4gPSBDQ1Byb3BzPFQsIFBhcnRpYWw8UHJvcHM+PlxuXG5PYmplY3QuYXNzaWduKGludHJpbnNpY0VsZW1lbnRzLCB7XG4gICAgYm94OiBHdGsuQm94LFxuICAgIGJ1dHRvbjogR3RrLkJ1dHRvbixcbiAgICBjZW50ZXJib3g6IEd0ay5DZW50ZXJCb3gsXG4gICAgLy8gY2lyY3VsYXJwcm9ncmVzczogQXN0YWwuQ2lyY3VsYXJQcm9ncmVzcyxcbiAgICBkcmF3aW5nYXJlYTogR3RrLkRyYXdpbmdBcmVhLFxuICAgIGVudHJ5OiBHdGsuRW50cnksXG4gICAgaW1hZ2U6IEd0ay5JbWFnZSxcbiAgICBsYWJlbDogR3RrLkxhYmVsLFxuICAgIGxldmVsYmFyOiBHdGsuTGV2ZWxCYXIsXG4gICAgbWVudWJ1dHRvbjogR3RrLk1lbnVCdXR0b24sXG4gICAgb3ZlcmxheTogR3RrLk92ZXJsYXksXG4gICAgcG9wb3ZlcjogR3RrLlBvcG92ZXIsXG4gICAgcmV2ZWFsZXI6IEd0ay5SZXZlYWxlcixcbiAgICBzY3JvbGxlZHdpbmRvdzogR3RrLlNjcm9sbGVkV2luZG93LFxuICAgIHNsaWRlcjogQXN0YWwuU2xpZGVyLFxuICAgIHN0YWNrOiBHdGsuU3RhY2ssXG4gICAgc3dpdGNoOiBHdGsuU3dpdGNoLFxuICAgIHRvZ2dsZWJ1dHRvbjogR3RrLlRvZ2dsZUJ1dHRvbixcbiAgICB3aW5kb3c6IEFzdGFsLldpbmRvdyxcbn0pXG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgICBuYW1lc3BhY2UgSlNYIHtcbiAgICAgICAgaW50ZXJmYWNlIEludHJpbnNpY0VsZW1lbnRzIHtcbiAgICAgICAgICAgIGJveDogUHJvcHM8R3RrLkJveCwgR3RrLkJveC5Db25zdHJ1Y3RvclByb3BzPlxuICAgICAgICAgICAgYnV0dG9uOiBQcm9wczxHdGsuQnV0dG9uLCBHdGsuQnV0dG9uLkNvbnN0cnVjdG9yUHJvcHM+XG4gICAgICAgICAgICBjZW50ZXJib3g6IFByb3BzPEd0ay5DZW50ZXJCb3gsIEd0ay5DZW50ZXJCb3guQ29uc3RydWN0b3JQcm9wcz5cbiAgICAgICAgICAgIC8vIGNpcmN1bGFycHJvZ3Jlc3M6IFByb3BzPEFzdGFsLkNpcmN1bGFyUHJvZ3Jlc3MsIEFzdGFsLkNpcmN1bGFyUHJvZ3Jlc3MuQ29uc3RydWN0b3JQcm9wcz5cbiAgICAgICAgICAgIGRyYXdpbmdhcmVhOiBQcm9wczxHdGsuRHJhd2luZ0FyZWEsIEd0ay5EcmF3aW5nQXJlYS5Db25zdHJ1Y3RvclByb3BzPlxuICAgICAgICAgICAgZW50cnk6IFByb3BzPEd0ay5FbnRyeSwgR3RrLkVudHJ5LkNvbnN0cnVjdG9yUHJvcHM+XG4gICAgICAgICAgICBpbWFnZTogUHJvcHM8R3RrLkltYWdlLCBHdGsuSW1hZ2UuQ29uc3RydWN0b3JQcm9wcz5cbiAgICAgICAgICAgIGxhYmVsOiBQcm9wczxHdGsuTGFiZWwsIEd0ay5MYWJlbC5Db25zdHJ1Y3RvclByb3BzPlxuICAgICAgICAgICAgbGV2ZWxiYXI6IFByb3BzPEd0ay5MZXZlbEJhciwgR3RrLkxldmVsQmFyLkNvbnN0cnVjdG9yUHJvcHM+XG4gICAgICAgICAgICBtZW51YnV0dG9uOiBQcm9wczxHdGsuTWVudUJ1dHRvbiwgR3RrLk1lbnVCdXR0b24uQ29uc3RydWN0b3JQcm9wcz5cbiAgICAgICAgICAgIG92ZXJsYXk6IFByb3BzPEd0ay5PdmVybGF5LCBHdGsuT3ZlcmxheS5Db25zdHJ1Y3RvclByb3BzPlxuICAgICAgICAgICAgcG9wb3ZlcjogUHJvcHM8R3RrLlBvcG92ZXIsIEd0ay5Qb3BvdmVyLkNvbnN0cnVjdG9yUHJvcHM+XG4gICAgICAgICAgICByZXZlYWxlcjogUHJvcHM8R3RrLlJldmVhbGVyLCBHdGsuUmV2ZWFsZXIuQ29uc3RydWN0b3JQcm9wcz5cbiAgICAgICAgICAgIHNjcm9sbGVkd2luZG93OiBQcm9wczxHdGsuU2Nyb2xsZWRXaW5kb3csIEd0ay5TY3JvbGxlZFdpbmRvdy5Db25zdHJ1Y3RvclByb3BzPlxuICAgICAgICAgICAgc2xpZGVyOiBQcm9wczxBc3RhbC5TbGlkZXIsIEFzdGFsLlNsaWRlci5Db25zdHJ1Y3RvclByb3BzPlxuICAgICAgICAgICAgc3RhY2s6IFByb3BzPEd0ay5TdGFjaywgR3RrLlN0YWNrLkNvbnN0cnVjdG9yUHJvcHM+XG4gICAgICAgICAgICBzd2l0Y2g6IFByb3BzPEd0ay5Td2l0Y2gsIEd0ay5Td2l0Y2guQ29uc3RydWN0b3JQcm9wcz5cbiAgICAgICAgICAgIHRvZ2dsZWJ1dHRvbjogUHJvcHM8R3RrLlRvZ2dsZUJ1dHRvbiwgR3RrLlRvZ2dsZUJ1dHRvbi5Db25zdHJ1Y3RvclByb3BzPlxuICAgICAgICAgICAgd2luZG93OiBQcm9wczxBc3RhbC5XaW5kb3csIEFzdGFsLldpbmRvdy5Db25zdHJ1Y3RvclByb3BzPlxuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgKiBmcm9tIFwiZ25pbS9ndGs0L2pzeC1ydW50aW1lXCJcbiIsICJpbXBvcnQgR3RrIGZyb20gXCJnaTovL0d0az92ZXJzaW9uPTQuMFwiXG5pbXBvcnQgR2lvIGZyb20gXCJnaTovL0dpbz92ZXJzaW9uPTIuMFwiXG5pbXBvcnQgeyBjb25maWd1ZSB9IGZyb20gXCIuLi9qc3gvZW52LmpzXCJcbmltcG9ydCB7IGdldFR5cGUsIG9uQ2xlYW51cCwgQWNjZXNzb3IsIEZyYWdtZW50IH0gZnJvbSBcIi4uL2luZGV4LmpzXCJcblxuaW1wb3J0IHR5cGUgQWR3IGZyb20gXCJnaTovL0Fkd1wiXG5jb25zdCBhZHcgPSBhd2FpdCBpbXBvcnQoXCJnaTovL0Fkd1wiKS50aGVuKChtKSA9PiBtLmRlZmF1bHQpLmNhdGNoKCgpID0+IG51bGwpXG5cbmNvbnN0IGR1bW15QnVpbGRlciA9IG5ldyBHdGsuQnVpbGRlcigpXG5cbmNvbnN0IHsgaW50cmluc2ljRWxlbWVudHMgfSA9IGNvbmZpZ3VlKHtcbiAgICBpbml0UHJvcHMoY3Rvcikge1xuICAgICAgICBpZiAoY3RvciA9PT0gR3RrLlN0YWNrKSB7XG4gICAgICAgICAgICBjb25zdCBrZXlzOiBBcnJheTxFeHRyYWN0PGtleW9mIEd0ay5TdGFjaywgc3RyaW5nPj4gPSBbXG4gICAgICAgICAgICAgICAgXCJ2aXNpYmxlQ2hpbGROYW1lXCIsXG4gICAgICAgICAgICAgICAgXCJ2aXNpYmxlX2NoaWxkX25hbWVcIixcbiAgICAgICAgICAgIF1cbiAgICAgICAgICAgIHJldHVybiBrZXlzXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFkdyAmJiBjdG9yID09PSBhZHcuVG9nZ2xlR3JvdXApIHtcbiAgICAgICAgICAgIGNvbnN0IGtleXM6IEFycmF5PEV4dHJhY3Q8a2V5b2YgQWR3LlRvZ2dsZUdyb3VwLCBzdHJpbmc+PiA9IFtcbiAgICAgICAgICAgICAgICBcImFjdGl2ZVwiLFxuICAgICAgICAgICAgICAgIFwiYWN0aXZlTmFtZVwiLFxuICAgICAgICAgICAgICAgIFwiYWN0aXZlX25hbWVcIixcbiAgICAgICAgICAgIF1cbiAgICAgICAgICAgIHJldHVybiBrZXlzXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHNldENzcyhvYmplY3QsIGNzcykge1xuICAgICAgICBpZiAoIShvYmplY3QgaW5zdGFuY2VvZiBHdGsuV2lkZ2V0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUud2FybihFcnJvcihgY2Fubm90IHNldCBjc3Mgb24gJHtvYmplY3R9YCkpXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjdHggPSBvYmplY3QuZ2V0X3N0eWxlX2NvbnRleHQoKVxuICAgICAgICBsZXQgcHJvdmlkZXI6IEd0ay5Dc3NQcm92aWRlclxuXG4gICAgICAgIGNvbnN0IHNldHRlciA9IChjc3M6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgaWYgKCFjc3MuaW5jbHVkZXMoXCJ7XCIpIHx8ICFjc3MuaW5jbHVkZXMoXCJ9XCIpKSB7XG4gICAgICAgICAgICAgICAgY3NzID0gYCogeyAke2Nzc30gfWBcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHByb3ZpZGVyKSBjdHgucmVtb3ZlX3Byb3ZpZGVyKHByb3ZpZGVyKVxuXG4gICAgICAgICAgICBwcm92aWRlciA9IG5ldyBHdGsuQ3NzUHJvdmlkZXIoKVxuICAgICAgICAgICAgcHJvdmlkZXIubG9hZF9mcm9tX3N0cmluZyhjc3MpXG4gICAgICAgICAgICBjdHguYWRkX3Byb3ZpZGVyKHByb3ZpZGVyLCBHdGsuU1RZTEVfUFJPVklERVJfUFJJT1JJVFlfVVNFUilcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjc3MgaW5zdGFuY2VvZiBBY2Nlc3Nvcikge1xuICAgICAgICAgICAgc2V0dGVyKGNzcy5nZXQoKSlcbiAgICAgICAgICAgIGNvbnN0IGRpc3Bvc2UgPSBjc3Muc3Vic2NyaWJlKCgpID0+IHNldHRlcihjc3MuZ2V0KCkpKVxuICAgICAgICAgICAgb25DbGVhbnVwKGRpc3Bvc2UpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXR0ZXIoY3NzKVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHNldENsYXNzKG9iamVjdCwgY2xhc3NOYW1lKSB7XG4gICAgICAgIGlmICghKG9iamVjdCBpbnN0YW5jZW9mIEd0ay5XaWRnZXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gY29uc29sZS53YXJuKEVycm9yKGBjYW5ub3Qgc2V0IGNsYXNzTmFtZSBvbiAke29iamVjdH1gKSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjbGFzc05hbWUgaW5zdGFuY2VvZiBBY2Nlc3Nvcikge1xuICAgICAgICAgICAgb2JqZWN0LmNzc0NsYXNzZXMgPSBjbGFzc05hbWUuZ2V0KCkuc3BsaXQoL1xccysvKVxuICAgICAgICAgICAgY29uc3QgZGlzcG9zZSA9IGNsYXNzTmFtZS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgKCkgPT4gKG9iamVjdC5jc3NDbGFzc2VzID0gY2xhc3NOYW1lLmdldCgpLnNwbGl0KC9cXHMrLykpLFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgb25DbGVhbnVwKGRpc3Bvc2UpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvYmplY3Quc2V0X2Nzc19jbGFzc2VzKGNsYXNzTmFtZS5zcGxpdCgvXFxzKy8pKVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHRleHROb2RlKHRleHQpIHtcbiAgICAgICAgcmV0dXJuIEd0ay5MYWJlbC5uZXcodGV4dC50b1N0cmluZygpKVxuICAgIH0sXG5cbiAgICAvLyBgc2V0X2NoaWxkYCBhbmQgZXNwZWNpYWxseSBgcmVtb3ZlYCBtaWdodCBiZSB3YXkgdG9vIGdlbmVyaWMgYW5kIHRoZXJlIG1pZ2h0XG4gICAgLy8gYmUgY2FzZXMgd2hlcmUgaXQgZG9lcyBub3QgYWN0dWFsbHkgZG8gd2hhdCB3ZSB3YW50IGl0IHRvIGRvXG4gICAgLy9cbiAgICAvLyBpZiB0aGVyZSBpcyBhIHVzZWNhc2UgZm9yIGVpdGhlciBvZiB0aGVzZSB0d28gdGhhdCBkb2VzIHNvbWV0aGluZyBlbHNlIHRoYW5cbiAgICAvLyB3ZSBleHBlY3QgaXQgdG8gZG8gaGVyZSBpbiBhIEpTWCBjb250ZXh0IHdlIGhhdmUgdG8gY2hlY2sgZm9yIGtub3duIGluc3RhbmNlc1xuICAgIHJlbW92ZUNoaWxkKHBhcmVudCwgY2hpbGQpIHtcbiAgICAgICAgaWYgKHBhcmVudCBpbnN0YW5jZW9mIEd0ay5XaWRnZXQgJiYgY2hpbGQgaW5zdGFuY2VvZiBHdGsuRXZlbnRDb250cm9sbGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyZW50LnJlbW92ZV9jb250cm9sbGVyKGNoaWxkKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFwic2V0X2NoaWxkXCIgaW4gcGFyZW50ICYmIHR5cGVvZiBwYXJlbnQuc2V0X2NoaWxkID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgcmV0dXJuIHBhcmVudC5zZXRfY2hpbGQobnVsbClcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcInJlbW92ZVwiIGluIHBhcmVudCAmJiB0eXBlb2YgcGFyZW50LnJlbW92ZSA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJlbnQucmVtb3ZlKGNoaWxkKVxuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgRXJyb3IoYGNhbm5vdCByZW1vdmUgJHtjaGlsZH0gZnJvbSAke3BhcmVudH1gKVxuICAgIH0sXG4gICAgYXBwZW5kQ2hpbGQocGFyZW50LCBjaGlsZCkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICBjaGlsZCBpbnN0YW5jZW9mIEd0ay5BZGp1c3RtZW50ICYmXG4gICAgICAgICAgICBcInNldF9hZGp1c3RtZW50XCIgaW4gcGFyZW50ICYmXG4gICAgICAgICAgICB0eXBlb2YgcGFyZW50LnNldF9hZGp1c3RtZW50ID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyZW50LnNldF9hZGp1c3RtZW50KGNoaWxkKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgY2hpbGQgaW5zdGFuY2VvZiBHdGsuV2lkZ2V0ICYmXG4gICAgICAgICAgICBwYXJlbnQgaW5zdGFuY2VvZiBHdGsuU3RhY2sgJiZcbiAgICAgICAgICAgIGNoaWxkLm5hbWUgIT09IFwiXCIgJiZcbiAgICAgICAgICAgIGNoaWxkLm5hbWUgIT09IG51bGwgJiZcbiAgICAgICAgICAgIGdldFR5cGUoY2hpbGQpID09PSBcIm5hbWVkXCJcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyZW50LmFkZF9uYW1lZChjaGlsZCwgY2hpbGQubmFtZSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIEd0ay5Qb3BvdmVyICYmIHBhcmVudCBpbnN0YW5jZW9mIEd0ay5NZW51QnV0dG9uKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyZW50LnNldF9wb3BvdmVyKGNoaWxkKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgY2hpbGQgaW5zdGFuY2VvZiBHaW8uTWVudU1vZGVsICYmXG4gICAgICAgICAgICAocGFyZW50IGluc3RhbmNlb2YgR3RrLk1lbnVCdXR0b24gfHwgcGFyZW50IGluc3RhbmNlb2YgR3RrLlBvcG92ZXJNZW51KVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJlbnQuc2V0X21lbnVfbW9kZWwoY2hpbGQpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBHaW8uTWVudUl0ZW0gJiYgcGFyZW50IGluc3RhbmNlb2YgR2lvLk1lbnUpIHtcbiAgICAgICAgICAgIC8vIFRPRE86XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBHdGsuV2luZG93ICYmIHBhcmVudCBpbnN0YW5jZW9mIEd0ay5BcHBsaWNhdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHBhcmVudC5hZGRfd2luZG93KGNoaWxkKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgR3RrLlRleHRCdWZmZXIgJiYgcGFyZW50IGluc3RhbmNlb2YgR3RrLlRleHRWaWV3KSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyZW50LnNldF9idWZmZXIoY2hpbGQpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyZW50IGluc3RhbmNlb2YgR3RrLkJ1aWxkYWJsZSkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcmVudC52ZnVuY19hZGRfY2hpbGQoZHVtbXlCdWlsZGVyLCBjaGlsZCwgZ2V0VHlwZShjaGlsZCkpXG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBFcnJvcihgY2Fubm90IGFkZCAke2NoaWxkfSB0byAke3BhcmVudH1gKVxuICAgIH0sXG59KVxuXG5leHBvcnQgeyBGcmFnbWVudCwgaW50cmluc2ljRWxlbWVudHMgfVxuZXhwb3J0IHsganN4LCBqc3hzIH0gZnJvbSBcIi4uL2pzeC9qc3guanNcIlxuIiwgImltcG9ydCB7IEd0ayB9IGZyb20gXCJhZ3MvZ3RrNFwiO1xuaW1wb3J0IE9zZFBvcHVwVk0gZnJvbSBcIn4vc3JjL2ZlYXR1cmVzL29zZC92bS9vc2QtcG9wdXAtdm1cIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gT3NkUG9wdXBWaWV3KCkge1xuICBjb25zdCB2bSA9IG5ldyBPc2RQb3B1cFZNKCk7XG4gIHJldHVybiA8Ym94XG4gICAgJD17KCkgPT4gdm0uaW5pdExpc3RlbigpfVxuICAgIGNzc0NsYXNzZXM9e1tcIm9zZC1wb3B1cC12aWV3XCJdfVxuICAgIHZpc2libGU9e3ZtLmdldEFnc1BhcnRTdGF0ZSgocykgPT4gcy52aXNpYmxlKX1cbiAgPlxuICAgIDxpbWFnZVxuICAgICAgdmlzaWJsZT17dm0uZ2V0QWdzUGFydFN0YXRlKChzKSA9PiAhIXMuaWNvbil9XG4gICAgICBpY29uTmFtZT17dm0uZ2V0QWdzUGFydFN0YXRlKChzKSA9PiBzLmljb24gPz8gXCJcIil9XG4gICAgLz5cbiAgICA8bGV2ZWxiYXJcbiAgICAgIHZhbGlnbj17R3RrLkFsaWduLkNFTlRFUn1cbiAgICAgIHdpZHRoUmVxdWVzdD17MTAwfVxuICAgICAgdmlzaWJsZT17dm0uZ2V0QWdzUGFydFN0YXRlKChzKSA9PiAhIXMudmFsdWUpfVxuICAgICAgdmFsdWU9e3ZtLmdldEFnc1BhcnRTdGF0ZSgocykgPT4gcy52YWx1ZSA/PyAwKX1cbiAgICAvPlxuICA8L2JveD5cbn1cbiIsICJpbXBvcnQgeyBHZGssIEFzdGFsIH0gZnJvbSBcImFncy9ndGs0XCJcbmltcG9ydCBhcHAgZnJvbSBcImFncy9ndGs0L2FwcFwiXG5pbXBvcnQgT3NkUG9wdXBWaWV3IGZyb20gXCIuL29zZC1wb3B1cC12aWV3XCJcbmltcG9ydCBPc2RQb3B1cFZNIGZyb20gXCIuLi92bS9vc2QtcG9wdXAtdm1cIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gT3NkV2luZG93Vmlldyhtb25pdG9yOiBHZGsuTW9uaXRvcikge1xuICBjb25zdCB2bSA9IG5ldyBPc2RQb3B1cFZNKCk7XG4gIHJldHVybiAoXG4gICAgPHdpbmRvd1xuICAgICAgZ2RrbW9uaXRvcj17bW9uaXRvcn1cbiAgICAgIGNzc0NsYXNzZXM9e1tcIm9zZFwiXX1cbiAgICAgIGFwcGxpY2F0aW9uPXthcHB9XG4gICAgICBsYXllcj17QXN0YWwuTGF5ZXIuT1ZFUkxBWX1cbiAgICAgIGtleW1vZGU9e0FzdGFsLktleW1vZGUuTk9ORX1cbiAgICAgIGFuY2hvcj17QXN0YWwuV2luZG93QW5jaG9yLkJPVFRPTX1cbiAgICAgIHZpc2libGU9e3ZtLmdldEFnc1BhcnRTdGF0ZSgocykgPT4gcy52aXNpYmxlKX1cbiAgICA+XG4gICAgICA8T3NkUG9wdXBWaWV3IC8+XG4gICAgPC93aW5kb3c+XG4gIClcbn1cbiIsICJleHBvcnQgZGVmYXVsdCBjbGFzcyBDb21tYW5kQXJnc0NvbnN0cnVjdG9yIHtcbiAgdHJ5UGFyc2U8VD4oYXJnczogYW55W10pIHtcbiAgICByZXR1cm4gdGhpcy5wYWlyUGFyc2U8VD4oYXJncyk7XG4gIH1cblxuICBwcml2YXRlIHBhaXJQYXJzZTxUID0gYW55PihhcmdzOiBhbnlbXSkge1xuICAgIGNvbnN0IG9iaiA9IHt9IGFzIGFueTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgIG9ialthcmdzW2ldXSA9IGFyZ3NbaSArIDFdO1xuICAgIH1cblxuICAgIHJldHVybiBvYmogYXMgVDtcbiAgfVxufVxuIiwgImltcG9ydCBDb21tYW5kQXJnc0NvbnN0cnVjdG9yIGZyb20gXCIuL2NvbW1hbmQtYXJncy1jb25zdHJ1Y3RvclwiO1xuXG50eXBlIENvbW1hbmRIYW5kbGVyRm48VCA9IGFueT4gPSAoZGF0YTogVCkgPT4gYW55O1xudHlwZSBDb21tYW5kUmVzcG9uc2VGbiA9IChkYXRhOiBhbnkpID0+IHZvaWQ7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbW1hbmRzSGFuZGxlciB7XG4gIHByaXZhdGUgY29tbWFuZHMgPSBuZXcgTWFwPHN0cmluZywgQ29tbWFuZEhhbmRsZXJGbj4oKTtcbiAgcHJpdmF0ZSBhcmdDb25zdHJ1Y3RvciA9IG5ldyBDb21tYW5kQXJnc0NvbnN0cnVjdG9yKCk7XG5cbiAgaGFuZGxlQ29tbWFuZFNhZmUocmVxdWVzdDogc3RyaW5nW10sIHJlc3BvbnNlOiBDb21tYW5kUmVzcG9uc2VGbik6IGJvb2xlYW4ge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmhhbmRsZUNvbW1hbmQocmVxdWVzdCwgcmVzcG9uc2UpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJlc3BvbnNlKGBGYWlsZWQgdG8gaGFuZGxlIGNvbW1hbmQgcmVxdWVzdCBcIiR7cmVxdWVzdH1cIjogJHtlcnJvcn1gKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZUNvbW1hbmQocmVxdWVzdDogc3RyaW5nW10sIHJlc3BvbnNlOiBDb21tYW5kUmVzcG9uc2VGbikge1xuICAgIGNvbnN0IFtjb21tYW5kLCBhcmdzXSA9IHRoaXMucGFyc2VDb21tYW5kUmVxdWVzdChyZXF1ZXN0KTtcbiAgICBjb25zdCBjQXJncyA9IHRoaXMuYXJnQ29uc3RydWN0b3IudHJ5UGFyc2UoYXJncylcbiAgICB0aGlzLmV4ZWN1dGVDb21tYW5kKGNvbW1hbmQsIHJlc3BvbnNlLCBjQXJncyk7XG4gIH1cblxuICByZWdpc3RlckNvbW1hbmQ8VD4oY29tbWFuZE5hbWU6IHN0cmluZywgaGFuZGxlcjogQ29tbWFuZEhhbmRsZXJGbjxUPikge1xuICAgIGNvbnN0IGNvbW1hbmQgPSB0aGlzLmNvbW1hbmRzLmdldChjb21tYW5kTmFtZSk7XG4gICAgaWYgKGNvbW1hbmQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSGFuZGxlciBmb3IgY29tbWFuZCBcIiR7Y29tbWFuZH1cIiBhbHJlYWR5IGV4aXN0c2ApO1xuICAgIH1cblxuICAgIHRoaXMuY29tbWFuZHMuc2V0KGNvbW1hbmROYW1lLCBoYW5kbGVyKTtcbiAgfVxuXG4gIHByaXZhdGUgcGFyc2VDb21tYW5kUmVxdWVzdChyZXF1ZXN0OiBzdHJpbmdbXSk6IFtzdHJpbmcsIHN0cmluZ1tdXSB7XG4gICAgY29uc3QgW2NvbW1hbmQsIC4uLmFyZ3NdID0gcmVxdWVzdDtcbiAgICByZXR1cm4gW2NvbW1hbmQsIGFyZ3NdO1xuICB9XG5cbiAgcHJpdmF0ZSBleGVjdXRlQ29tbWFuZChjb21tYW5kOiBzdHJpbmcsIHJlc3BvbnNlOiBDb21tYW5kUmVzcG9uc2VGbiwgYXJnczogYW55KSB7XG4gICAgY29uc3QgaGFuZGxlciA9IHRoaXMuY29tbWFuZHMuZ2V0KGNvbW1hbmQpO1xuICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBoYW5kbGVyKGFyZ3MpO1xuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UocmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXNwb25zZShcIkRvbmVcIik7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKGBIYW5kbGVyIGZvciBjb21tYW5kIFwiJHtjb21tYW5kfSBub3QgZm91bmRcImApO1xuICB9XG59XG4iLCAiaW1wb3J0IHsgaW50ZXJ2YWwgfSBmcm9tIFwiYWdzL3RpbWVcIjtcbmltcG9ydCBCYXNlVk0gZnJvbSBcIn4vc3JjL2NvcmUvbXZ2bS9iYXNlLXZtXCI7XG5cbnR5cGUgVGltZVN0YXRlID0ge1xuICB0aW1lPzogc3RyaW5nO1xuICB0aW1lMTI/OiBzdHJpbmc7XG4gIGRheURhdGU/OiBzdHJpbmc7XG4gIHdlZWtEYXk/OiBudW1iZXI7XG4gIHdlZWtEb3RzPzogc3RyaW5nO1xuICBkYXRlOiBEYXRlO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGltZVZNIGV4dGVuZHMgQmFzZVZNPFRpbWVTdGF0ZT4ge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKHsgZGF0ZTogbmV3IERhdGUoKSB9KTtcbiAgICB0aGlzLnRpbWVSZWZyZXNoKCk7XG4gIH1cblxuICBwcml2YXRlIHRpbWVSZWZyZXNoKCkge1xuICAgIHRoaXMuc2V0VGltZSgpXG4gICAgdGhpcy5zZXREYXlEYXRlKCk7XG4gICAgaW50ZXJ2YWwoMTAwMCwgKCkgPT4ge1xuICAgICAgdGhpcy5zZXRUaW1lVmFycygpO1xuICAgIH0pXG4gIH1cblxuICBwcml2YXRlIHNldFRpbWVWYXJzKCkge1xuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgpXG5cbiAgICBpZiAoZGF0ZS5nZXRTZWNvbmRzKCkgPT0gMCkge1xuICAgICAgdGhpcy5zZXRUaW1lKCk7XG4gICAgfVxuXG4gICAgaWYgKGRhdGUuZ2V0SG91cnMoKSAhPSB0aGlzLnN0YXRlLmdldCgpLmRhdGUuZ2V0SG91cnMoKSkge1xuICAgICAgdGhpcy5zZXREYXlEYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzZXRUaW1lKCkge1xuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgpXG5cbiAgICBjb25zdCB0aW1lID0gZGF0ZS50b0xvY2FsZVRpbWVTdHJpbmcoXCJlbi1VU1wiLCB7XG4gICAgICBob3VyOiBcIjItZGlnaXRcIixcbiAgICAgIG1pbnV0ZTogXCIyLWRpZ2l0XCIsXG4gICAgICBob3VyMTI6IGZhbHNlLFxuICAgIH0pXG5cbiAgICBjb25zdCB0aW1lMTIgPSBkYXRlLnRvTG9jYWxlVGltZVN0cmluZyhcImVuLVVTXCIsIHtcbiAgICAgIGhvdXI6IFwiMi1kaWdpdFwiLFxuICAgICAgbWludXRlOiBcIjItZGlnaXRcIixcbiAgICAgIGhvdXIxMjogdHJ1ZSxcbiAgICB9KTtcblxuXG4gICAgdGhpcy5zdGF0ZS5zZXRQYXJ0aWFsKHtcbiAgICAgIHRpbWUsXG4gICAgICB0aW1lMTIsXG4gICAgfSlcbiAgfVxuXG4gIHByaXZhdGUgc2V0RGF5RGF0ZSgpIHtcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoKTtcbiAgICBjb25zdCBbZGF5RGF0ZSwgX10gPSBkYXRlLnRvTG9jYWxlVGltZVN0cmluZyhcImVuLVVTXCIsIHtcbiAgICAgIHdlZWtkYXk6IFwibG9uZ1wiLFxuICAgICAgbW9udGg6IFwibG9uZ1wiLFxuICAgICAgZGF5OiBcIm51bWVyaWNcIixcbiAgICB9KS5zcGxpdChcIiBhdFwiKTtcblxuICAgIHRoaXMuc3RhdGUuc2V0UGFydGlhbCh7XG4gICAgICBkYXlEYXRlLFxuICAgICAgd2Vla0RheTogZGF0ZS5nZXREYXkoKSxcbiAgICAgIHdlZWtEb3RzOlxuICAgICAgICBbLi4ubmV3IEFycmF5KGRhdGUuZ2V0RGF5KCkgKyAxKS5maWxsKFwiXHUyNUNGXCIpLCAuLi5uZXcgQXJyYXkoNiAtIGRhdGUuZ2V0RGF5KCkpLmZpbGwoXCJcdTI1Q0JcIildLmpvaW4oJyAnKSxcbiAgICB9KVxuICB9XG59XG4iLCAiaW1wb3J0IHsgR3RrIH0gZnJvbSBcImFncy9ndGs0XCJcbmltcG9ydCBUaW1lVk0gZnJvbSBcIn4vc3JjL2ZlYXR1cmVzL3RpbWUvdm0vdGltZS12bVwiXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFRpbWVCYXJWaWV3KCkge1xuICBjb25zdCB2bSA9IG5ldyBUaW1lVk0oKTtcbiAgcmV0dXJuIDxtZW51YnV0dG9uXG4gICAgaGV4cGFuZFxuICAgIGhhbGlnbj17R3RrLkFsaWduLkNFTlRFUn1cbiAgPlxuICAgIDxsYWJlbFxuICAgICAgbGFiZWw9e3ZtLmdldEFnc1BhcnRTdGF0ZSgocykgPT4gcy50aW1lMTIgPz8gXCJcIil9XG4gICAgICBjc3NDbGFzc2VzPXtbXCJUaW1lXCJdfVxuICAgIC8+XG4gICAgPHBvcG92ZXI+XG4gICAgICA8R3RrLkNhbGVuZGFyIC8+XG4gICAgPC9wb3BvdmVyPlxuICA8L21lbnVidXR0b24+XG59XG4iLCAiaW1wb3J0IHsgY3JlYXRlQmluZGluZywgRm9yIH0gZnJvbSBcImFnc1wiXG5pbXBvcnQgVHJheSBmcm9tIFwiZ2k6Ly9Bc3RhbFRyYXlcIlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBUcmF5VmlldygpIHtcbiAgY29uc3QgdHJheSA9IFRyYXkuZ2V0X2RlZmF1bHQoKVxuICBjb25zdCBpdGVtcyA9IGNyZWF0ZUJpbmRpbmcodHJheSwgXCJpdGVtc1wiKVxuXG4gIHJldHVybiA8Ym94IGNzc0NsYXNzZXM9e1tcIlN5c1RyYXlcIl19PlxuICAgIDxGb3IgZWFjaD17aXRlbXN9PlxuICAgICAgeyhpdGVtKSA9PiAoXG4gICAgICAgIDxtZW51YnV0dG9uXG4gICAgICAgICAgJD17KHNlbGYpID0+IHtcbiAgICAgICAgICAgIHNlbGYuaW5zZXJ0X2FjdGlvbl9ncm91cChcImRidXNtZW51XCIsIGl0ZW0uYWN0aW9uR3JvdXApXG4gICAgICAgICAgfX1cbiAgICAgICAgICB0b29sdGlwTWFya3VwPXtpdGVtLnRvb2x0aXBNYXJrdXB9XG4gICAgICAgICAgbWVudU1vZGVsPXtpdGVtLm1lbnVNb2RlbH1cbiAgICAgICAgICBjc3NDbGFzc2VzPXtbXCJ0cmF5LWl0ZW1cIl19XG4gICAgICAgID5cbiAgICAgICAgICA8aW1hZ2UgZ2ljb249e2l0ZW0uZ2ljb259IC8+XG4gICAgICAgIDwvbWVudWJ1dHRvbj5cbiAgICAgICl9XG4gICAgPC9Gb3I+XG4gIDwvYm94PlxufVxuIiwgImltcG9ydCBCYXR0ZXJ5IGZyb20gXCJnaTovL0FzdGFsQmF0dGVyeVwiXG5pbXBvcnQgQmFzZU1vZGVsIGZyb20gXCJ+L3NyYy9jb3JlL212dm0vYmFzZS1tb2RlbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYXR0ZXJ5TW9kZWwgZXh0ZW5kcyBCYXNlTW9kZWwge1xuICBwcml2YXRlIGJhdHRlcnk6IEJhdHRlcnkuRGV2aWNlO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5iYXR0ZXJ5ID0gQmF0dGVyeS5nZXRfZGVmYXVsdCgpXG4gIH1cblxuICBwdWJsaWMgZ2V0SXNQcmVzZW50KCkge1xuICAgIHJldHVybiB0aGlzLmJhdHRlcnkuaXNQcmVzZW50O1xuICB9XG5cbiAgcHVibGljIGdldFBlcmNlbnRhZ2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuYmF0dGVyeS5wZXJjZW50YWdlO1xuICB9XG5cbiAgcHVibGljIGdldEljb25OYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmJhdHRlcnkuaWNvbk5hbWU7XG4gIH1cblxuICBwdWJsaWMgb25Jc1ByZXNlbnQoY2FsbGJhY2s6IChpc1ByZXNlbnQ6IGJvb2xlYW4pID0+IHZvaWQpIHtcbiAgICB0aGlzLmdldEJpbmRpbmdTdWJzY3JpcHRpb24odGhpcy5iYXR0ZXJ5LCBcImlzUHJlc2VudFwiLCBjYWxsYmFjayk7XG4gIH1cblxuICBwdWJsaWMgb25QZXJjZW50YWdlKGNhbGxiYWNrOiAocGVyY2VudGFnZTogbnVtYmVyKSA9PiB2b2lkKSB7XG4gICAgdGhpcy5nZXRCaW5kaW5nU3Vic2NyaXB0aW9uKHRoaXMuYmF0dGVyeSwgXCJwZXJjZW50YWdlXCIsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHB1YmxpYyBvbkljb25OYW1lKGNhbGxiYWNrOiAoaWNvbk5hbWU6IHN0cmluZykgPT4gdm9pZCkge1xuICAgIHRoaXMuZ2V0QmluZGluZ1N1YnNjcmlwdGlvbih0aGlzLmJhdHRlcnksIFwiaWNvbk5hbWVcIiwgY2FsbGJhY2spO1xuICB9XG59XG4iLCAiaW1wb3J0IHsgQWNjZXNzb3IsIGNyZWF0ZUJpbmRpbmcgfSBmcm9tIFwiYWdzXCI7XG5pbXBvcnQgR09iamVjdCBmcm9tIFwiZ2k6Ly9HT2JqZWN0XCI7XG5cbnR5cGUgRGlzcG9zZUZ1bmN0aW9uID0gKCkgPT4gdm9pZDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFzZU1vZGVsIHtcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zOiBEaXNwb3NlRnVuY3Rpb25bXSA9IFtdO1xuXG4gIHB1YmxpYyBkaXNwb3NlKCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5mb3JFYWNoKChmbikgPT4gZm4oKSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0QmluZGluZ1N1YnNjcmlwdGlvbjxUIGV4dGVuZHMgR09iamVjdC5PYmplY3QsIFAgZXh0ZW5kcyBrZXlvZiBUPihcbiAgICBvYmplY3Q6IFQsXG4gICAga2V5OiBFeHRyYWN0PFAsIHN0cmluZz4sXG4gICAgY2FsbGJhY2s6IChwcm9wZXJ0eTogVFtQXSkgPT4gdm9pZCxcbiAgKSB7XG4gICAgY29uc3QgYmluZGluZyA9IGNyZWF0ZUJpbmRpbmcob2JqZWN0LCBrZXkpO1xuICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IGJpbmRpbmcuc3Vic2NyaWJlKCgpID0+IGNhbGxiYWNrKGJpbmRpbmcuZ2V0KCkpKVxuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHN1YnNjcmlwdGlvbik7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0QWNjZXNzb3JTdWJzY3JpcHRpb248VD4oYWNjZXNzb3I6IEFjY2Vzc29yPFQ+LCBjYWxsYmFjazogKHZhbHVlOiBUKSA9PiB2b2lkKSB7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gYWNjZXNzb3Iuc3Vic2NyaWJlKCgpID0+IGNhbGxiYWNrKGFjY2Vzc29yLmdldCgpKSlcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaChzdWJzY3JpcHRpb24pO1xuICB9XG59XG4iLCAiaW1wb3J0IEJhc2VWTSBmcm9tIFwifi9zcmMvY29yZS9tdnZtL2Jhc2Utdm1cIjtcbmltcG9ydCBCYXR0ZXJ5TW9kZWwgZnJvbSBcIi4uL21vZGVsL2JhdHRlcnktbW9kZWxcIjtcblxudHlwZSBCYXR0ZXJ5U3RhdGUgPSB7XG4gIGljb25OYW1lPzogc3RyaW5nO1xuICBwZXJjZW50YWdlPzogc3RyaW5nO1xuICBpc1ByZXNlbnQ/OiBib29sZWFuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYXR0ZXJ5Vk0gZXh0ZW5kcyBCYXNlVk08QmF0dGVyeVN0YXRlPiB7XG4gIHByaXZhdGUgbW9kZWw6IEJhdHRlcnlNb2RlbDtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoe30pO1xuICAgIHRoaXMubW9kZWwgPSBuZXcgQmF0dGVyeU1vZGVsKCk7XG4gICAgdGhpcy5pbml0U3RhdGUoKTtcbiAgICB0aGlzLmluaXRMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdExpc3RlbmVycygpIHtcbiAgICB0aGlzLm1vZGVsLm9uSXNQcmVzZW50KChpc1ByZXNlbnQpID0+IHtcbiAgICAgIHRoaXMuc3RhdGUuc2V0UGFydGlhbCh7XG4gICAgICAgIGlzUHJlc2VudCxcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIHRoaXMubW9kZWwub25QZXJjZW50YWdlKChwZXJjZW50YWdlKSA9PiB7XG4gICAgICB0aGlzLnN0YXRlLnNldFBhcnRpYWwoe1xuICAgICAgICBwZXJjZW50YWdlOiB0aGlzLnBlcmNlbnRhZ2VUb1N0cmluZyhwZXJjZW50YWdlKSxcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIHRoaXMubW9kZWwub25JY29uTmFtZSgoaWNvbk5hbWUpID0+IHtcbiAgICAgIHRoaXMuc3RhdGUuc2V0UGFydGlhbCh7XG4gICAgICAgIGljb25OYW1lLFxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgcHJpdmF0ZSBpbml0U3RhdGUoKSB7XG4gICAgdGhpcy5zdGF0ZS5zZXQoe1xuICAgICAgaWNvbk5hbWU6IHRoaXMubW9kZWwuZ2V0SWNvbk5hbWUoKSxcbiAgICAgIGlzUHJlc2VudDogdGhpcy5tb2RlbC5nZXRJc1ByZXNlbnQoKSxcbiAgICAgIHBlcmNlbnRhZ2U6IHRoaXMucGVyY2VudGFnZVRvU3RyaW5nKHRoaXMubW9kZWwuZ2V0UGVyY2VudGFnZSgpKSxcbiAgICB9KVxuICB9XG5cbiAgcHJpdmF0ZSBwZXJjZW50YWdlVG9TdHJpbmcocGVyY2VudGFnZTogbnVtYmVyKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7TWF0aC5mbG9vcihwZXJjZW50YWdlICogMTAwKX0gJWA7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBXaXRoIH0gZnJvbSBcImFnc1wiXG5pbXBvcnQgQmF0dGVyeVZNIGZyb20gXCIuLi92bS9iYXR0ZXJ5LXZtXCJcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQmF0dGVyeUJhclZpZXcoKSB7XG4gIGNvbnN0IHZtID0gbmV3IEJhdHRlcnlWTSgpO1xuICByZXR1cm4gPGJveD5cbiAgICA8V2l0aCB2YWx1ZT17dm0uYWdzU3RhdGV9PlxuICAgICAgeyhzdGF0ZSkgPT4gc3RhdGUuaXNQcmVzZW50ICYmIChcbiAgICAgICAgPGJveCBjc3NDbGFzc2VzPXtbXCJCYXR0ZXJ5XCJdfT5cbiAgICAgICAgICA8aW1hZ2UgaWNvbk5hbWU9e3N0YXRlLmljb25OYW1lfSB0b29sdGlwVGV4dD17c3RhdGUucGVyY2VudGFnZX0gLz5cbiAgICAgICAgICA8bGFiZWwgbGFiZWw9e3N0YXRlLnBlcmNlbnRhZ2V9IC8+XG4gICAgICAgIDwvYm94PlxuICAgICAgKX1cbiAgICA8L1dpdGg+XG4gIDwvYm94PlxufSBcbiIsICJpbXBvcnQgeyBleGVjIH0gZnJvbSBcImFncy9wcm9jZXNzXCJcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbW1hbmRFeGlzdHMoY29tbWFuZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHRyeSB7XG4gICAgZXhlYyhgd2hpY2ggJHtjb21tYW5kfWApO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoYENvbW1hbmQgWyR7Y29tbWFuZH1dIGRvZXNuJ3QgZXhpc3RgKVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIiwgImltcG9ydCB7IGV4ZWMgfSBmcm9tIFwiYWdzL3Byb2Nlc3NcIjtcbmltcG9ydCB7IGNyZWF0ZVBvbGwgfSBmcm9tIFwiYWdzL3RpbWVcIjtcbmltcG9ydCB7IEFjY2Vzc29yIH0gZnJvbSBcImFnc1wiO1xuaW1wb3J0IEJhc2VNb2RlbCBmcm9tIFwifi9zcmMvY29yZS9tdnZtL2Jhc2UtbW9kZWxcIjtcbmltcG9ydCB7IGNvbW1hbmRFeGlzdHMgfSBmcm9tIFwifi9zcmMvY29yZS9zeXN0ZW0vYmluXCI7XG5cbmNvbnN0IGNvbW1hbmRzID0ge1xuICBjb21tYW5kOiBcImJyaWdodG5lc3NjdGxcIixcbiAgbWF4QnJpZ2h0bmVzczogXCJicmlnaHRuZXNzY3RsIG1heFwiLFxuICBnZXRCcmlnaHRuZXNzOiBbXCJiYXNoXCIsIFwiLWNcIiwgXCJicmlnaHRuZXNzY3RsIGdldFwiXSxcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnJpZ2h0bmVzc0N0bE1vZGVsIGV4dGVuZHMgQmFzZU1vZGVsIHtcbiAgcHJpdmF0ZSBicmlnaHRuZXNzPzogQWNjZXNzb3I8bnVtYmVyPjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIGlmICh0aGlzLmlzUHJlc2VudCgpKSB7XG4gICAgICB0aGlzLmJyaWdodG5lc3MgPSBjcmVhdGVQb2xsKDAsIDEwMDAsIGNvbW1hbmRzLmdldEJyaWdodG5lc3MsIChjdXJyZW50KSA9PiB7XG4gICAgICAgIHJldHVybiBwYXJzZUludChjdXJyZW50KSAvIHRoaXMuZ2V0TWF4QnJpZ2h0bmVzcygpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRNYXhCcmlnaHRuZXNzKCkge1xuICAgIHJldHVybiBwYXJzZUludChleGVjKGNvbW1hbmRzLm1heEJyaWdodG5lc3MpKVxuICB9XG5cbiAgcHVibGljIGlzUHJlc2VudCgpIHtcbiAgICByZXR1cm4gY29tbWFuZEV4aXN0cyhjb21tYW5kcy5jb21tYW5kKTtcbiAgfVxuXG4gIHB1YmxpYyBvbkJyaWdodG5lc3MoY2FsbGJhY2s6ICh2YWx1ZTogbnVtYmVyKSA9PiB2b2lkKSB7XG4gICAgaWYgKHRoaXMuYnJpZ2h0bmVzcykge1xuICAgICAgdGhpcy5nZXRBY2Nlc3NvclN1YnNjcmlwdGlvbih0aGlzLmJyaWdodG5lc3MsIGNhbGxiYWNrKTtcbiAgICB9XG4gIH1cbn1cbiIsICJleHBvcnQgZnVuY3Rpb24gZWxsaXBzaXModGV4dDogc3RyaW5nLCBtYXhMZW5ndGg6IG51bWJlcikge1xuICBpZiAodGV4dC5sZW5ndGggPD0gbWF4TGVuZ3RoKSByZXR1cm4gdGV4dFxuICByZXR1cm4gdGV4dC5zbGljZSgwLCBtYXhMZW5ndGgpICsgXCIuLi5cIlxufVxuXG5leHBvcnQgZnVuY3Rpb24gZWxsaXBzaXNCeUxpbmVzKHRleHQ6IHN0cmluZywgbWF4TGVuZ3RoOiBudW1iZXIpIHtcbiAgY29uc3Qgc3BsaXR0ZWQgPSB0ZXh0LnNwbGl0KCdcXG4nKVxuICBzcGxpdHRlZC5tYXAoKHMpID0+IGVsbGlwc2lzKHMsIG1heExlbmd0aCkpXG4gIHJldHVybiBzcGxpdHRlZC5qb2luKCdcXG4nKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5nT3JOdWxsKHZhbHVlOiBzdHJpbmcgfCBudWxsLCBmYWxsYmFjazogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIHZhbHVlIHx8IGZhbGxiYWNrXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b1BlcmNlbnRTdHIodmFsdWU6IG51bWJlcik6IHN0cmluZyB7XG4gIGxldCB2YWx1ZVN0cjogc3RyaW5nO1xuXG4gIGlmICh2YWx1ZSA+PSAwICYmIHZhbHVlIDw9IDEpIHtcbiAgICB2YWx1ZVN0ciA9IHZhbHVlLnRvRml4ZWQoMik7XG4gIH0gZWxzZSB7XG4gICAgdmFsdWVTdHIgPSAodmFsdWUgLyAxMDApLnRvRml4ZWQoMik7XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IFtodW5kcmVkLCB0ZW5zLCAuLi5fXSA9IHZhbHVlU3RyLnNwbGl0KCcuJylcblxuICAgIGlmIChodW5kcmVkID09IFwiMVwiKSB7XG4gICAgICByZXR1cm4gYCR7aHVuZHJlZH0ke3RlbnN9YDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRlbnMgPT0gXCIwMFwiKSB7XG4gICAgICAgIHJldHVybiBcIjBcIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0ZW5zO1xuICAgIH1cbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cbn1cbiIsICJpbXBvcnQgQmFzZVZNIGZyb20gXCJ+L3NyYy9jb3JlL212dm0vYmFzZS12bVwiO1xuaW1wb3J0IHsgY29tbWFuZEV4aXN0cyB9IGZyb20gXCJ+L3NyYy9jb3JlL3N5c3RlbS9iaW5cIjtcbmltcG9ydCBCcmlnaHRuZXNzQ3RsTW9kZWwgZnJvbSBcIi4uL21vZGVsL2JyaWdodG5lc3NjdGwtbW9kZWxcIjtcbmltcG9ydCB7IHRvUGVyY2VudFN0ciB9IGZyb20gXCJ+L3NyYy9jb3JlL3V0aWxzL3RleHRcIjtcblxudHlwZSBCcmlnaHRuZXNzU3RhdGUgPSB7XG4gIGlzUHJlc2VudDogYm9vbGVhbjtcbiAgaWNvbk5hbWU6IHN0cmluZztcbiAgdG9vbHRpcFRleHQ/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCcmlnaHRuZXNzVk0gZXh0ZW5kcyBCYXNlVk08QnJpZ2h0bmVzc1N0YXRlPiB7XG4gIHByaXZhdGUgbW9kZWw6IEJyaWdodG5lc3NDdGxNb2RlbDtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcih7XG4gICAgICBpc1ByZXNlbnQ6IGNvbW1hbmRFeGlzdHMoXCJicmlnaHRuZXNzY3RsXCIpLFxuICAgICAgaWNvbk5hbWU6IFwiZGlzcGxheS1icmlnaHRuZXNzLXN5bWJvbGljXCIsXG4gICAgfSk7XG5cbiAgICB0aGlzLm1vZGVsID0gbmV3IEJyaWdodG5lc3NDdGxNb2RlbCgpO1xuICAgIHRoaXMuaW5pdExpc3RlbmVycygpO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0TGlzdGVuZXJzKCkge1xuICAgIHRoaXMubW9kZWwub25CcmlnaHRuZXNzKCh2YWx1ZSkgPT4gdGhpcy5zZXRCcmlnaHRuZXNzKHZhbHVlKSk7XG4gIH1cblxuICBwcml2YXRlIHNldEJyaWdodG5lc3ModmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuc3RhdGUuc2V0UGFydGlhbCh7XG4gICAgICB0b29sdGlwVGV4dDogYCR7dG9QZXJjZW50U3RyKHZhbHVlKX0lYFxuICAgIH0pO1xuICB9XG59XG4iLCAiaW1wb3J0IEJyaWdodG5lc3NWTSBmcm9tIFwiLi4vdm0vYnJpZ2h0bmVzcy12bVwiO1xuaW1wb3J0IHsgV2l0aCB9IGZyb20gXCJhZ3NcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIEJyaWdodG5lc3NCYXJWaWV3KCkge1xuICBjb25zdCB2bSA9IG5ldyBCcmlnaHRuZXNzVk0oKTtcbiAgcmV0dXJuIDxib3g+XG4gICAgPFdpdGggdmFsdWU9e3ZtLmFnc1N0YXRlfT5cbiAgICAgIHsoc3RhdGUpID0+IHN0YXRlLmlzUHJlc2VudCAmJiAoXG4gICAgICAgIDxib3ggY3NzQ2xhc3Nlcz17W1wiQnJpZ2h0bmVzc0ljb25CdXR0b25cIl19PlxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aW1hZ2VcbiAgICAgICAgICAgICAgaWNvbk5hbWU9e3N0YXRlLmljb25OYW1lfVxuICAgICAgICAgICAgICB0b29sdGlwVGV4dD17c3RhdGUudG9vbHRpcFRleHR9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L2JveD5cbiAgICAgICl9XG4gICAgPC9XaXRoPlxuICA8L2JveD5cbn1cbiIsICJpbXBvcnQgQXN0YWxXcCBmcm9tIFwiZ2k6Ly9Bc3RhbFdwP3ZlcnNpb249MC4xXCI7XG5pbXBvcnQgQmFzZU1vZGVsIGZyb20gXCJ+L3NyYy9jb3JlL212dm0vYmFzZS1tb2RlbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWb2x1bWVNb2RlbCBleHRlbmRzIEJhc2VNb2RlbCB7XG4gIHByaXZhdGUgc3BlYWtlcjogQXN0YWxXcC5FbmRwb2ludDtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuc3BlYWtlciA9IEFzdGFsV3AuZ2V0X2RlZmF1bHQoKS5hdWRpby5nZXRfZGVmYXVsdF9zcGVha2VyKCk7XG4gIH1cblxuICBwdWJsaWMgb25JY29uTmFtZShjYWxsYmFjazogKHZhbHVlOiBzdHJpbmcpID0+IHZvaWQpIHtcbiAgICB0aGlzLmdldEJpbmRpbmdTdWJzY3JpcHRpb24odGhpcy5zcGVha2VyLCBcInZvbHVtZUljb25cIiwgY2FsbGJhY2spO1xuICB9XG5cbiAgcHVibGljIG9uVm9sdW1lKGNhbGxiYWNrOiAodmFsdWU6IG51bWJlcikgPT4gdm9pZCkge1xuICAgIHRoaXMuZ2V0QmluZGluZ1N1YnNjcmlwdGlvbih0aGlzLnNwZWFrZXIsIFwidm9sdW1lXCIsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHB1YmxpYyBjaGFuZ2VTdGF0ZSgpIHtcbiAgICB0aGlzLnNwZWFrZXIuc2V0X211dGUoIXRoaXMuc3BlYWtlci5nZXRfbXV0ZSgpKTtcbiAgfVxufVxuIiwgImltcG9ydCBCYXNlVk0gZnJvbSBcIn4vc3JjL2NvcmUvbXZ2bS9iYXNlLXZtXCI7XG5pbXBvcnQgVm9sdW1lTW9kZWwgZnJvbSBcIi4uL21vZGVsL3ZvbHVtZS1tb2RlbFwiO1xuaW1wb3J0IHsgdG9QZXJjZW50U3RyIH0gZnJvbSBcIn4vc3JjL2NvcmUvdXRpbHMvdGV4dFwiO1xuXG50eXBlIFZvbHVtZVN0YXRlID0ge1xuICBpY29uTmFtZT86IHN0cmluZztcbiAgdG9vbHRpcFRleHQ/OiBzdHJpbmc7XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVm9sdW1lVk0gZXh0ZW5kcyBCYXNlVk08Vm9sdW1lU3RhdGU+IHtcbiAgcHJpdmF0ZSBtb2RlbDogVm9sdW1lTW9kZWw7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKHt9KTtcbiAgICB0aGlzLm1vZGVsID0gbmV3IFZvbHVtZU1vZGVsKCk7XG4gICAgdGhpcy5pbml0TGlzdGVuZXJzKCk7XG4gIH1cblxuICBwcml2YXRlIGluaXRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5tb2RlbC5vbkljb25OYW1lKChpY29uTmFtZSkgPT4ge1xuICAgICAgdGhpcy5zdGF0ZS5zZXRQYXJ0aWFsKHtcbiAgICAgICAgaWNvbk5hbWUsXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICB0aGlzLm1vZGVsLm9uVm9sdW1lKCh2b2x1bWUpID0+IHtcbiAgICAgIHRoaXMuc3RhdGUuc2V0UGFydGlhbCh7XG4gICAgICAgIHRvb2x0aXBUZXh0OiBgJHt0b1BlcmNlbnRTdHIodm9sdW1lKX0lYCxcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIHB1YmxpYyBjaGFuZ2VTdGF0ZSgpIHtcbiAgICB0aGlzLm1vZGVsLmNoYW5nZVN0YXRlKCk7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBXaXRoIH0gZnJvbSBcImFnc1wiO1xuaW1wb3J0IFZvbHVtZVZNIGZyb20gXCIuLi92bS92b2x1bWUtdm1cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIFZvbHVtZUJhclZpZXcoKSB7XG4gIGNvbnN0IHZtID0gbmV3IFZvbHVtZVZNKCk7XG5cbiAgcmV0dXJuIDxib3g+XG4gICAgPFdpdGggdmFsdWU9e3ZtLmFnc1N0YXRlfT5cbiAgICAgIHsoc3RhdGUpID0+IChcbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIG9uQ2xpY2tlZD17KCkgPT4gdm0uY2hhbmdlU3RhdGUoKX1cbiAgICAgICAgICBjc3NDbGFzc2VzPXtbXCJBdWRpb0ljb25CdXR0b25cIl19XG4gICAgICAgID5cbiAgICAgICAgICA8aW1hZ2VcbiAgICAgICAgICAgIGljb25OYW1lPXtzdGF0ZS5pY29uTmFtZX1cbiAgICAgICAgICAgIHRvb2x0aXBUZXh0PXtzdGF0ZS50b29sdGlwVGV4dH1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICl9XG4gICAgPC9XaXRoPlxuICA8L2JveD5cbn1cbiIsICJpbXBvcnQgeyBBc3RhbCwgR3RrLCBHZGsgfSBmcm9tIFwiYWdzL2d0azRcIlxuaW1wb3J0IGFwcCBmcm9tIFwiYWdzL2d0azQvYXBwXCJcbmltcG9ydCBUaW1lQmFyVmlldyBmcm9tIFwiLi4vLi4vdGltZS92aWV3L3RpbWUtYmFyLXZpZXdcIlxuaW1wb3J0IFRyYXlWaWV3IGZyb20gXCIuLi8uLi90cmF5L3ZpZXcvdHJheS12aWV3XCJcbmltcG9ydCBCYXR0ZXJ5QmFyVmlldyBmcm9tIFwiLi4vLi4vYmF0dGVyeS92aWV3L2JhdHRlcnktYmFyLXZpZXdcIlxuaW1wb3J0IHsgQnJpZ2h0bmVzc0JhclZpZXcgfSBmcm9tIFwiLi4vLi4vYnJpZ2h0bmVzcy92aWV3L2JyaWdodG5lc3MtYmFyLXZpZXdcIiAvLyBpbXBvcnQgVGltZSBmcm9tIFwiLi9UaW1lL1RpbWVcIlxuaW1wb3J0IHsgVm9sdW1lQmFyVmlldyB9IGZyb20gXCIuLi8uLi92b2x1bWUvdmlldy92b2x1bWUtYmFyLXZpZXdcIlxuXG4vLyBNYWluIEJhciBjb21wb25lbnRcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEJhcihnZGttb25pdG9yOiBHZGsuTW9uaXRvcikge1xuICBjb25zdCB7IFRPUCwgTEVGVCwgUklHSFQgfSA9IEFzdGFsLldpbmRvd0FuY2hvclxuXG4gIHJldHVybiA8d2luZG93XG4gICAgdmlzaWJsZVxuICAgIGNzc0NsYXNzZXM9e1tcIkJhclwiXX1cbiAgICBnZGttb25pdG9yPXtnZGttb25pdG9yfVxuICAgIGV4Y2x1c2l2aXR5PXtBc3RhbC5FeGNsdXNpdml0eS5FWENMVVNJVkV9XG4gICAgYW5jaG9yPXtUT1AgfCBMRUZUIHwgUklHSFR9XG4gICAgYXBwbGljYXRpb249e2FwcH1cbiAgPlxuICAgIDxjZW50ZXJib3ggb3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5IT1JJWk9OVEFMfT5cbiAgICAgIDxib3ggJHR5cGU9XCJjZW50ZXJcIj5cbiAgICAgICAgPFRpbWVCYXJWaWV3IC8+XG4gICAgICA8L2JveD5cbiAgICAgIDxib3ggJHR5cGU9XCJlbmRcIj5cbiAgICAgICAgPFZvbHVtZUJhclZpZXcgLz5cbiAgICAgICAgPEJyaWdodG5lc3NCYXJWaWV3IC8+XG4gICAgICAgIDxCYXR0ZXJ5QmFyVmlldyAvPlxuICAgICAgICA8VHJheVZpZXcgLz5cbiAgICAgIDwvYm94PlxuICAgIDwvY2VudGVyYm94PlxuICA8L3dpbmRvdz5cbn1cbi8vXG4vLyBmdW5jdGlvbiBWZXJ0aWNhbFNlcGFyYXRvcigpIHtcbi8vICAgcmV0dXJuIDxib3hcbi8vICAgICBjc3NDbGFzc2VzPXtbJ3ZlcnRpY2FsLXNlcGFyYXRvci1ib3gnXX1cbi8vICAgICBoZXhwYW5kPXtmYWxzZX1cbi8vICAgICB2ZXhwYW5kPXtmYWxzZX1cbi8vICAgPlxuLy8gICAgIDxib3hcbi8vICAgICAgIGNzc0NsYXNzZXM9e1sndmVydGljYWwtc2VwYXJhdG9yJ119XG4vLyAgICAgLz5cbi8vICAgPC9ib3g+XG4vLyB9XG4iLCAiaW1wb3J0IFdwIGZyb20gXCJnaTovL0FzdGFsV3BcIlxuXG50eXBlIFZvbHVtZUNvbW1hbmRBcmdzID0ge1xuICBpbmM/OiBzdHJpbmc7XG4gIGRlYz86IHN0cmluZztcbiAgbXV0ZT86IHN0cmluZztcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZvbHVtZUNvbW1hbmRIYW5kbGVyKHsgaW5jLCBkZWMsIG11dGUgfTogVm9sdW1lQ29tbWFuZEFyZ3MpIHtcbiAgY29uc3QgY29udHJvbGxlciA9IFdwLmdldF9kZWZhdWx0KCk/LmdldF9kZWZhdWx0X3NwZWFrZXIoKTtcblxuICBpZiAoIWNvbnRyb2xsZXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZ2V0IHZvbHVtZSBjb250cm9sbGVyXCIpO1xuICB9XG5cbiAgaWYgKG11dGUpIHtcbiAgICBjb250cm9sbGVyPy5zZXRfbXV0ZSghY29udHJvbGxlci5nZXRfbXV0ZSgpKTtcbiAgICByZXR1cm47XG4gIH1cblxuXG4gIGNvbnN0IGNWb2x1bWUgPSBjb250cm9sbGVyLmdldF92b2x1bWUoKTtcblxuICBpZiAoaW5jKSB7XG4gICAgY29uc3QgdmFsdWUgPSBwYXJzZUludChpbmMpO1xuICAgIGNvbnN0IG5ld1ZhbHVlID0gTWF0aC5mbG9vcihjVm9sdW1lICogMTAwICsgdmFsdWUpIC8gMTAwO1xuICAgIGlmIChuZXdWYWx1ZSA+IDEpIHtcbiAgICAgIGNvbnRyb2xsZXI/LnNldF92b2x1bWUoMSlcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb250cm9sbGVyPy5zZXRfdm9sdW1lKG5ld1ZhbHVlKVxuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChkZWMpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHBhcnNlSW50KGRlYyk7XG4gICAgY29uc3QgbmV3VmFsdWUgPSBNYXRoLmZsb29yKGNWb2x1bWUgKiAxMDAgLSB2YWx1ZSkgLyAxMDA7XG4gICAgaWYgKG5ld1ZhbHVlIDwgMCkge1xuICAgICAgY29udHJvbGxlci5zZXRfdm9sdW1lKDApO1xuICAgIH1cbiAgICBjb250cm9sbGVyPy5zZXRfdm9sdW1lKG5ld1ZhbHVlKTtcbiAgICByZXR1cm47XG4gIH1cbn1cbiIsICJpbXBvcnQgQXN0YWxOb3RpZmQgZnJvbSBcImdpOi8vQXN0YWxOb3RpZmRcIjtcbmltcG9ydCBCYXNlTW9kZWwgZnJvbSBcIn4vc3JjL2NvcmUvbXZ2bS9iYXNlLW1vZGVsXCI7XG5cbmV4cG9ydCB0eXBlIE5vdGlmaWNhdGlvbiA9IHtcbiAgaWQ6IG51bWJlcjtcbiAgc3VtbWFyeTogc3RyaW5nO1xuICBib2R5OiBzdHJpbmc7XG4gIGltYWdlOiBzdHJpbmc7XG4gIGFwcE5hbWU6IHN0cmluZztcbiAgYXBwSWNvbjogc3RyaW5nO1xuICB0aW1lOiBEYXRlO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTm90aWZpY2F0aW9uc01vZGVsIGV4dGVuZHMgQmFzZU1vZGVsIHtcbiAgcHJpdmF0ZSBub3RpZmQ6IEFzdGFsTm90aWZkLk5vdGlmZDtcbiAgcHJpdmF0ZSBub3RpZk1hcDogTWFwPG51bWJlciwgTm90aWZpY2F0aW9uPiA9IG5ldyBNYXAoKTtcbiAgcHJpdmF0ZSBvblVwZGF0ZUNhbGxiYWNrPzogKG5vdGlmaWNhdGlvbnM6IE5vdGlmaWNhdGlvbltdKSA9PiB2b2lkO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5ub3RpZmQgPSBBc3RhbE5vdGlmZC5nZXRfZGVmYXVsdCgpO1xuICAgIHRoaXMubGlzdGVuKCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0Tm90aWZpY2F0aW9ucygpOiBOb3RpZmljYXRpb25bXSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5ub3RpZk1hcC52YWx1ZXMoKSk7XG4gIH1cblxuICBwdWJsaWMgb25VcGRhdGUoY2FsbGJhY2s6IChub3RpZmljYXRpb25zOiBOb3RpZmljYXRpb25bXSkgPT4gdm9pZCkge1xuICAgIHRoaXMub25VcGRhdGVDYWxsYmFjayA9IGNhbGxiYWNrO1xuICB9XG5cbiAgcHJpdmF0ZSBsaXN0ZW4oKSB7XG4gICAgdGhpcy5ub3RpZmQuY29ubmVjdChcIm5vdGlmaWVkXCIsIHRoaXMub25Ob3RpZmllZC5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLm5vdGlmZC5jb25uZWN0KFwicmVzb2x2ZWRcIiwgdGhpcy5vblJlc29sdmVkLmJpbmQodGhpcykpO1xuICB9XG5cbiAgcHJpdmF0ZSBvbk5vdGlmaWVkKF9zb3VyY2U6IEFzdGFsTm90aWZkLk5vdGlmZCwgaWQ6IG51bWJlciwgX3JlcGxhY2VkOiBib29sZWFuKTogdm9pZCB7XG4gICAgY29uc3Qgbm90aWZpY2F0aW9uID0gdGhpcy5ub3RpZmQuZ2V0X25vdGlmaWNhdGlvbihpZCk7XG4gICAgaWYgKG5vdGlmaWNhdGlvbiA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5ub3RpZk1hcC5zZXQoaWQsIHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIHN1bW1hcnk6IG5vdGlmaWNhdGlvbi5nZXRfc3VtbWFyeSgpLFxuICAgICAgYm9keTogbm90aWZpY2F0aW9uLmdldF9ib2R5KCksXG4gICAgICBpbWFnZTogbm90aWZpY2F0aW9uLmdldF9pbWFnZSgpLFxuICAgICAgYXBwTmFtZTogbm90aWZpY2F0aW9uLmdldF9hcHBfbmFtZSgpLFxuICAgICAgYXBwSWNvbjogbm90aWZpY2F0aW9uLmdldF9hcHBfaWNvbigpLFxuICAgICAgdGltZTogbmV3IERhdGUobm90aWZpY2F0aW9uLmdldF90aW1lKCkpLFxuICAgIH0pXG5cbiAgICBjb25zdCBleHBpcmVJbiA9IDMwMDA7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLmRlbGV0ZShpZCk7XG4gICAgfSwgZXhwaXJlSW4pO1xuXG4gICAgdGhpcy5ub3RpZnkoKTtcbiAgfVxuXG4gIHByaXZhdGUgb25SZXNvbHZlZChfc291cmNlOiBBc3RhbE5vdGlmZC5Ob3RpZmQsIGlkOiBudW1iZXIsIF86IEFzdGFsTm90aWZkLkNsb3NlZFJlYXNvbik6IHZvaWQge1xuICAgIHRoaXMuZGVsZXRlKGlkKTtcbiAgfVxuXG4gIHB1YmxpYyBkZWxldGUoa2V5OiBudW1iZXIpIHtcbiAgICB0aGlzLm5vdGlmTWFwLmRlbGV0ZShrZXkpXG4gICAgdGhpcy5ub3RpZnkoKTtcbiAgICBjb25zb2xlLmxvZyhgTm90aWZpY2F0aW9uIFske2tleX1dIHdhcyBkZWxldGVkYCk7XG4gIH1cblxuICBwcml2YXRlIG5vdGlmeSgpIHtcbiAgICBpZiAodGhpcy5vblVwZGF0ZUNhbGxiYWNrKSB7XG4gICAgICB0aGlzLm9uVXBkYXRlQ2FsbGJhY2sodGhpcy5nZXROb3RpZmljYXRpb25zKCkpO1xuICAgIH1cbiAgfVxufVxuIiwgImV4cG9ydCBkZWZhdWx0IGNsYXNzIENoYWluPFQ+IHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSB2YWx1ZTogVCkgeyB9XG5cbiAgdGhlbjxWPihmbjogKHZhbHVlOiBUKSA9PiBWKTogQ2hhaW48Vj4ge1xuICAgIHJldHVybiBuZXcgQ2hhaW4oZm4odGhpcy52YWx1ZSkpXG4gIH1cblxuICBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVcbiAgfVxufVxuIiwgImltcG9ydCBCYXNlVk0gZnJvbSBcIn4vc3JjL2NvcmUvbXZ2bS9iYXNlLXZtXCJcbmltcG9ydCBOb3RpZmljYXRpb25zTW9kZWwsIHsgTm90aWZpY2F0aW9uIH0gZnJvbSBcIi4uL21vZGVsL25vdGlmaWNhdGlvbnMtbW9kZWxcIjtcbmltcG9ydCBDaGFpbiBmcm9tIFwifi9zcmMvY29yZS91dGlscy9jaGFpblwiO1xuaW1wb3J0IHsgZWxsaXBzaXMgfSBmcm9tIFwifi9zcmMvY29yZS91dGlscy90ZXh0XCI7XG5pbXBvcnQgY29uZmlnIGZyb20gXCJ+L2NvbmZpZ1wiO1xuXG50eXBlIE5vdGlmaWNhdGlvblN0YXRlID0ge1xuICBzdW1tYXJ5OiBzdHJpbmc7XG4gIGJvZHk6IHN0cmluZztcbiAgYXBwSWNvbjogc3RyaW5nO1xuICBpbWFnZTogc3RyaW5nO1xuICBhcHBOYW1lOiBzdHJpbmc7XG4gIHRpbWU6IHN0cmluZztcbiAgaWQ6IG51bWJlcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTm90aWZpY2F0aW9uc1ZNIGV4dGVuZHMgQmFzZVZNPE5vdGlmaWNhdGlvblN0YXRlW10+IHtcbiAgcHJpdmF0ZSBtb2RlbDogTm90aWZpY2F0aW9uc01vZGVsO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFtdKTtcblxuICAgIHRoaXMubW9kZWwgPSBuZXcgTm90aWZpY2F0aW9uc01vZGVsKCk7XG4gICAgdGhpcy5pbml0TGlzdGVuZXJzKCk7XG4gIH1cblxuICBwcml2YXRlIGluaXRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5tb2RlbC5vblVwZGF0ZSgobm90aWZpY2F0aW9ucykgPT4gdGhpcy5vblVwZGF0ZShub3RpZmljYXRpb25zKSk7XG5cbiAgfVxuXG4gIHByaXZhdGUgb25VcGRhdGUobm90aWZpY2F0aW9uczogTm90aWZpY2F0aW9uW10pIHtcbiAgICB0aGlzLnN0YXRlLnNldChub3RpZmljYXRpb25zLm1hcCgobikgPT4gdGhpcy5tYXBUb1N0YXRlKG4pKSk7XG4gIH1cblxuICBwcml2YXRlIG1hcFRvU3RhdGUobjogTm90aWZpY2F0aW9uKTogTm90aWZpY2F0aW9uU3RhdGUge1xuICAgIGNvbnNvbGUubG9nKFwicXdlcXdlcXdlXCIpXG4gICAgY29uc29sZS5sb2cobik7XG4gICAgY29uc29sZS5sb2coXCJxd2Vxd2Vxd2VcIilcbiAgICBjb25zdCBzdW1tYXJ5ID0gbmV3IENoYWluKG4uc3VtbWFyeSlcbiAgICAgIC50aGVuKChzKSA9PiBlbGxpcHNpcyhzLCBjb25maWcubm90aWZpY2F0aW9ucy50ZXh0Lm1heFN1bW1hcnlMZW5ndGgpKVxuICAgICAgLmdldCgpXG5cbiAgICBjb25zdCBib2R5ID0gbmV3IENoYWluKG4uYm9keSlcbiAgICAgIC50aGVuKChzKSA9PiAhIXMgPyBlbGxpcHNpcyhzLCBjb25maWcubm90aWZpY2F0aW9ucy50ZXh0Lm1heEJvZHlMZW5ndGgpIDogcylcbiAgICAgIC5nZXQoKVxuXG4gICAgY29uc3QgdGltZSA9IG4udGltZS50b0xvY2FsZVRpbWVTdHJpbmcoXCJlbi1VU1wiLCB7XG4gICAgICBob3VyOiBcIjItZGlnaXRcIixcbiAgICAgIG1pbnV0ZTogXCIyLWRpZ2l0XCIsXG4gICAgICBob3VyMTI6IHRydWUsXG4gICAgfSlcblxuICAgIGNvbnN0IHBhcnQgPSB7XG4gICAgICBzdW1tYXJ5OiBzdW1tYXJ5LFxuICAgICAgYm9keTogYm9keSxcbiAgICAgIHRpbWU6IHRpbWUsXG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBuLCBwYXJ0KTtcbiAgfVxuXG4gIHB1YmxpYyBkZWxldGUoaWQ6IG51bWJlcikge1xuICAgIHRoaXMubW9kZWwuZGVsZXRlKGlkKTtcbiAgfVxufVxuIiwgImltcG9ydCB7IEd0ayB9IGZyb20gXCJhZ3MvZ3RrNFwiO1xuaW1wb3J0IHsgdGltZW91dCB9IGZyb20gXCJhZ3MvdGltZVwiO1xuXG5leHBvcnQgdHlwZSBOb3RpZmljYXRpb25Qcm9wcyA9IHtcbiAgZGVsZXRlOiAoKSA9PiB2b2lkO1xuICBzdW1tYXJ5OiBzdHJpbmc7XG4gIGJvZHk/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIGFwcEljb24/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIGltYWdlPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBhcHBOYW1lOiBzdHJpbmc7XG4gIHRpbWU6IHN0cmluZztcbiAgaWQ6IG51bWJlcjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE5vdGlmaWNhdGlvblRpbGVWaWV3KHByb3BzOiBOb3RpZmljYXRpb25Qcm9wcyB8IHVuZGVmaW5lZCkge1xuICBpZiAoIXByb3BzKSB7XG4gICAgcmV0dXJuIDxib3ggLz5cbiAgfVxuXG4gIHJldHVybiA8cmV2ZWFsZXJcbiAgICAkPXsoc2VsZikgPT4gdGltZW91dCgxMDAsICgpID0+IHNlbGYucmV2ZWFsQ2hpbGQgPSB0cnVlKX1cbiAgICB0cmFuc2l0aW9uVHlwZT17R3RrLlJldmVhbGVyVHJhbnNpdGlvblR5cGUuU0xJREVfVVB9XG4gICAgb25EZXN0cm95PXsoc2VsZikgPT4gc2VsZi5yZXZlYWxDaGlsZCA9IGZhbHNlfVxuICA+XG4gICAgPGJveFxuICAgICAgY3NzQ2xhc3Nlcz17W1wiTm90aWZpY2F0aW9uXCJdfVxuICAgICAgaGV4cGFuZFxuICAgID5cbiAgICAgIDxib3hcbiAgICAgICAgb3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5WRVJUSUNBTH1cbiAgICAgICAgaGV4cGFuZFxuICAgICAgPlxuICAgICAgICA8Ym94IGNzc0NsYXNzZXM9e1tcImhlYWRlclwiXX0gaGV4cGFuZD5cbiAgICAgICAgICB7cHJvcHMuYXBwSWNvbiAmJiAoXG4gICAgICAgICAgICA8aW1hZ2VcbiAgICAgICAgICAgICAgY3NzQ2xhc3Nlcz17W1wiYXBwLWljb25cIl19XG4gICAgICAgICAgICAgIGZpbGU9e3Byb3BzLmltYWdlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICAgIDxib3hcbiAgICAgICAgICAgIGhhbGlnbj17R3RrLkFsaWduLkZJTEx9XG4gICAgICAgICAgICBoZXhwYW5kXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGxhYmVsXG4gICAgICAgICAgICAgIGNzc0NsYXNzZXM9e1tcImFwcC1uYW1lXCJdfVxuICAgICAgICAgICAgICBsYWJlbD17cHJvcHMuYXBwTmFtZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9ib3g+XG4gICAgICAgICAgPGxhYmVsXG4gICAgICAgICAgICBjc3NDbGFzc2VzPXtbXCJ0aW1lXCJdfVxuICAgICAgICAgICAgbGFiZWw9e3Byb3BzLnRpbWV9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBjc3NDbGFzc2VzPXtbXCJjbG9zZVwiXX1cbiAgICAgICAgICAgIGljb25OYW1lPXtcImNhbmNlbFwifVxuICAgICAgICAgICAgb25DbGlja2VkPXtwcm9wcy5kZWxldGV9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9ib3g+XG4gICAgICAgIDxib3g+XG4gICAgICAgICAge3Byb3BzLmltYWdlICYmIChcbiAgICAgICAgICAgIDxib3hcbiAgICAgICAgICAgICAgY3NzQ2xhc3Nlcz17W1wiaW1hZ2UtY29udGFpbmVyXCJdfVxuICAgICAgICAgICAgICBvdmVyZmxvdz17R3RrLk92ZXJmbG93LkhJRERFTn1cbiAgICAgICAgICAgICAgdmV4cGFuZD17ZmFsc2V9XG4gICAgICAgICAgICAgIGhleHBhbmQ9e2ZhbHNlfVxuICAgICAgICAgICAgICB3aWR0aFJlcXVlc3Q9ezUwfVxuICAgICAgICAgICAgICBoZWlnaHRSZXF1ZXN0PXs1MH1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPGltYWdlXG4gICAgICAgICAgICAgICAgY3NzQ2xhc3Nlcz17W1wiaW1hZ2VcIl19XG4gICAgICAgICAgICAgICAgZmlsZT17cHJvcHMuaW1hZ2V9XG4gICAgICAgICAgICAgICAgcGl4ZWxTaXplPXstMX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvYm94PlxuICAgICAgICAgICl9XG4gICAgICAgICAgPGJveCBvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfT5cbiAgICAgICAgICAgIDxib3g+XG4gICAgICAgICAgICAgIDxsYWJlbFxuICAgICAgICAgICAgICAgIGNzc0NsYXNzZXM9e1tcInN1bW1hcnlcIl19XG4gICAgICAgICAgICAgICAgbGFiZWw9e3Byb3BzLnN1bW1hcnl9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L2JveD5cbiAgICAgICAgICAgIHtwcm9wcy5ib2R5ICYmIChcbiAgICAgICAgICAgICAgPGJveCBjc3NDbGFzc2VzPXtbXCJzZXBhcmF0b3JcIl19IC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAge3Byb3BzLmJvZHkgJiYgKFxuICAgICAgICAgICAgICA8Ym94PlxuICAgICAgICAgICAgICAgIDxsYWJlbFxuICAgICAgICAgICAgICAgICAgY3NzQ2xhc3Nlcz17W1wiYm9keVwiXX1cbiAgICAgICAgICAgICAgICAgIGxhYmVsPXtwcm9wcy5ib2R5fVxuICAgICAgICAgICAgICAgICAgbWF4V2lkdGhDaGFycz17MjB9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9ib3g+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvYm94PlxuICAgICAgICA8L2JveD5cbiAgICAgIDwvYm94PlxuICAgIDwvYm94PlxuICA8L3JldmVhbGVyPlxufVxuIiwgImltcG9ydCB7IEFzdGFsLCBHZGssIEd0ayB9IGZyb20gXCJhZ3MvZ3RrNFwiXG5pbXBvcnQgeyBGb3IgfSBmcm9tIFwiYWdzXCI7XG5pbXBvcnQgTm90aWZpY2F0aW9uc1ZNIGZyb20gXCIuLi92bS9ub3RpZmljYXRpb25zLXZtXCI7XG5pbXBvcnQgTm90aWZpY2F0aW9uVGlsZVZpZXcgZnJvbSBcIi4vbm90aWZpY2F0aW9uLXRpbGUtdmlld1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBOb3RpZmljYXRpb25zV2luZG93VmlldyhnZGttb25pdG9yOiBHZGsuTW9uaXRvcikge1xuICBjb25zdCB2bSA9IG5ldyBOb3RpZmljYXRpb25zVk0oKTtcbiAgcmV0dXJuIDx3aW5kb3dcbiAgICBjc3NDbGFzc2VzPXtbXCJOb3RpZmljYXRpb25zV2luZG93XCIsIFwiZGFyay10aGVtZVwiXX1cbiAgICBhbmNob3I9e0FzdGFsLldpbmRvd0FuY2hvci5UT1AgfCBBc3RhbC5XaW5kb3dBbmNob3IuUklHSFR9XG4gICAgZ2RrbW9uaXRvcj17Z2RrbW9uaXRvcn1cbiAgICBleGNsdXNpdml0eT17QXN0YWwuRXhjbHVzaXZpdHkuTk9STUFMfVxuICAgICR0eXBlPVwibm90aWZpY2F0aW9uXCJcbiAgICBsYXllcj17QXN0YWwuTGF5ZXIuVE9QfVxuICAgIHZhbGlnbj17R3RrLkFsaWduLlNUQVJUfVxuICAgIHZpc2libGU9e3ZtLmFnc1N0YXRlKChsKSA9PiBsLmxlbmd0aCAhPSAwKX1cbiAgPlxuICAgIDxib3hcbiAgICAgIG9yaWVudGF0aW9uPXtHdGsuT3JpZW50YXRpb24uVkVSVElDQUx9XG4gICAgICB2YWxpZ249e0d0ay5BbGlnbi5TVEFSVH1cbiAgICAgIGNzc0NsYXNzZXM9e1tcIm5vdGlmaWNhdGlvbi1ib3hcIl19XG4gICAgPlxuICAgICAgPEZvciBlYWNoPXt2bS5hZ3NTdGF0ZX0+XG4gICAgICAgIHsoaXRlbSwgX2lkKSA9PiAoXG4gICAgICAgICAgPE5vdGlmaWNhdGlvblRpbGVWaWV3XG4gICAgICAgICAgICBkZWxldGU9eygpID0+IHZtLmRlbGV0ZShpdGVtLmlkKX1cbiAgICAgICAgICAgIHN1bW1hcnk9e2l0ZW0uc3VtbWFyeX1cbiAgICAgICAgICAgIGJvZHk9e2l0ZW0uYm9keX1cbiAgICAgICAgICAgIGFwcEljb249e2l0ZW0uYXBwSWNvbn1cbiAgICAgICAgICAgIGltYWdlPXtpdGVtLmltYWdlfVxuICAgICAgICAgICAgYXBwTmFtZT17aXRlbS5hcHBOYW1lfVxuICAgICAgICAgICAgdGltZT17aXRlbS50aW1lfVxuICAgICAgICAgICAgaWQ9e2l0ZW0uaWR9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgIDwvRm9yPlxuICAgIDwvYm94PlxuICA8L3dpbmRvdz5cbn1cbiIsICJpbXBvcnQgeyBHdGsgfSBmcm9tIFwiYWdzL2d0azRcIjtcbmltcG9ydCB7IElXZWF0aGVyVk0gfSBmcm9tIFwiLi9pLXdlYXRoZXItdm1cIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gV2VhdGhlckNvbmt5Vmlldyh7IHZtIH06IHsgdm06IElXZWF0aGVyVk0gfSkge1xuICByZXR1cm4gPGJveFxuICAgIG9yaWVudGF0aW9uPXtHdGsuT3JpZW50YXRpb24uVkVSVElDQUx9XG4gICAgY3NzQ2xhc3Nlcz17W1wid2VhdGhlclwiXX1cbiAgPlxuICAgIDxsYWJlbFxuICAgICAgdmlzaWJsZT17dm0uYWdzU3RhdGUoKHMpID0+ICEhcy50ZW1wZXJhdHVyZSl9XG4gICAgICBsYWJlbD17dm0uYWdzU3RhdGUoKHMpID0+IHMudGVtcGVyYXR1cmUgPz8gXCJcIil9XG4gICAgICBoYWxpZ249e0d0ay5BbGlnbi5TVEFSVH1cbiAgICAvPlxuICAgIDxsYWJlbFxuICAgICAgdmlzaWJsZT17dm0uYWdzU3RhdGUoKHMpID0+ICEhcy53aW5kKX1cbiAgICAgIGxhYmVsPXt2bS5hZ3NTdGF0ZSgocykgPT4gcy53aW5kID8/IFwiXCIpfVxuICAgICAgaGFsaWduPXtHdGsuQWxpZ24uU1RBUlR9XG4gICAgLz5cbiAgICA8bGFiZWxcbiAgICAgIHZpc2libGU9e3ZtLmFnc1N0YXRlKChzKSA9PiAhIXMuaHVtaWRpdHkpfVxuICAgICAgbGFiZWw9e3ZtLmFnc1N0YXRlKChzKSA9PiBzLmh1bWlkaXR5ID8/IFwiXCIpfVxuICAgICAgaGFsaWduPXtHdGsuQWxpZ24uU1RBUlR9XG4gICAgLz5cbiAgPC9ib3g+XG59XG4iLCAiaW1wb3J0IFRpbWVWTSBmcm9tIFwiLi4vdm0vdGltZS12bVwiXG5pbXBvcnQgeyBHdGsgfSBmcm9tIFwiYWdzL2d0azRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVGltZUNvbmt5VmlldygpIHtcbiAgY29uc3Qgdm0gPSBuZXcgVGltZVZNKCk7XG4gIHJldHVybiA8Ym94XG4gICAgb3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5WRVJUSUNBTH1cbiAgICBjc3NDbGFzc2VzPXtbXCJ0aW1lLWNvbmt5XCJdfVxuICA+XG4gICAgPGxhYmVsXG4gICAgICB2aXNpYmxlPXt2bS5hZ3NTdGF0ZSgocykgPT4gISFzLnRpbWUpfVxuICAgICAgbGFiZWw9e3ZtLmFnc1N0YXRlKChzKSA9PiBzLnRpbWUhKX1cbiAgICAgIGNzc0NsYXNzZXM9e1tcInRpbWVcIl19XG4gICAgICBoYWxpZ249e0d0ay5BbGlnbi5TVEFSVH1cbiAgICAvPlxuICAgIDxsYWJlbFxuICAgICAgdmlzaWJsZT17dm0uYWdzU3RhdGUoKHMpID0+ICEhcy5kYXlEYXRlKX1cbiAgICAgIGxhYmVsPXt2bS5hZ3NTdGF0ZSgocykgPT4gcy5kYXlEYXRlISl9XG4gICAgICBjc3NDbGFzc2VzPXtbXCJkYXRlXCJdfVxuICAgICAgaGFsaWduPXtHdGsuQWxpZ24uU1RBUlR9XG4gICAgLz5cbiAgICA8bGFiZWxcbiAgICAgIHZpc2libGU9e3ZtLmFnc1N0YXRlKChzKSA9PiAhIXMud2Vla0RvdHMpfVxuICAgICAgbGFiZWw9e3ZtLmFnc1N0YXRlKChzKSA9PiBzLndlZWtEb3RzISl9XG4gICAgICBjc3NDbGFzc2VzPXtbXCJ3ZWVrLWRheVwiXX1cbiAgICAgIGhhbGlnbj17R3RrLkFsaWduLlNUQVJUfVxuICAgIC8+XG4gIDwvYm94ID5cbn1cbiIsICJpbXBvcnQgR0xpYiBmcm9tIFwiZ2k6Ly9HTGliXCJcbmltcG9ydCBHaW8gZnJvbSBcImdpOi8vR2lvXCJcbmltcG9ydCBTb3VwIGZyb20gXCJnaTovL1NvdXA/dmVyc2lvbj0zLjBcIlxuXG50eXBlIFJlc3BvbnNlVHlwZSA9IFwiYmFzaWNcIiB8IFwiY29yc1wiIHwgXCJkZWZhdWx0XCIgfCBcImVycm9yXCIgfCBcIm9wYXF1ZVwiIHwgXCJvcGFxdWVyZWRpcmVjdFwiXG5leHBvcnQgdHlwZSBIZWFkZXJzSW5pdCA9IEhlYWRlcnMgfCBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHwgW3N0cmluZywgc3RyaW5nXVtdXG5leHBvcnQgdHlwZSBSZXNwb25zZUluaXQgPSB7XG4gICAgaGVhZGVycz86IEhlYWRlcnNJbml0XG4gICAgc3RhdHVzPzogbnVtYmVyXG4gICAgc3RhdHVzVGV4dD86IHN0cmluZ1xufVxuZXhwb3J0IHR5cGUgUmVxdWVzdEluaXQgPSB7XG4gICAgYm9keT86IHN0cmluZ1xuICAgIGhlYWRlcnM/OiBIZWFkZXJzSW5pdFxuICAgIG1ldGhvZD86IHN0cmluZ1xufVxuXG5leHBvcnQgY2xhc3MgSGVhZGVycyB7XG4gICAgcHJpdmF0ZSBoZWFkZXJzOiBNYXA8c3RyaW5nLCBzdHJpbmdbXT4gPSBuZXcgTWFwKClcblxuICAgIGNvbnN0cnVjdG9yKGluaXQ6IEhlYWRlcnNJbml0ID0ge30pIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaW5pdCkpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW25hbWUsIHZhbHVlXSBvZiBpbml0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmQobmFtZSwgdmFsdWUpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoaW5pdCBpbnN0YW5jZW9mIEhlYWRlcnMpIHtcbiAgICAgICAgICAgIGluaXQuZm9yRWFjaCgodmFsdWUsIG5hbWUpID0+IHRoaXMuc2V0KG5hbWUsIHZhbHVlKSlcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaW5pdCA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIGluaXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldChuYW1lLCBpbml0W25hbWVdKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXBwZW5kKG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGlmICghdGhpcy5oZWFkZXJzLmhhcyhuYW1lKSkge1xuICAgICAgICAgICAgdGhpcy5oZWFkZXJzLnNldChuYW1lLCBbXSlcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhlYWRlcnMuZ2V0KG5hbWUpIS5wdXNoKHZhbHVlKVxuICAgIH1cblxuICAgIGRlbGV0ZShuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLmRlbGV0ZShuYW1lLnRvTG93ZXJDYXNlKCkpXG4gICAgfVxuXG4gICAgZ2V0KG5hbWU6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSB0aGlzLmhlYWRlcnMuZ2V0KG5hbWUudG9Mb3dlckNhc2UoKSlcbiAgICAgICAgcmV0dXJuIHZhbHVlcyA/IHZhbHVlcy5qb2luKFwiLCBcIikgOiBudWxsXG4gICAgfVxuXG4gICAgZ2V0QWxsKG5hbWU6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGVhZGVycy5nZXQobmFtZS50b0xvd2VyQ2FzZSgpKSB8fCBbXVxuICAgIH1cblxuICAgIGhhcyhuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGVhZGVycy5oYXMobmFtZS50b0xvd2VyQ2FzZSgpKVxuICAgIH1cblxuICAgIHNldChuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldChuYW1lLnRvTG93ZXJDYXNlKCksIFt2YWx1ZV0pXG4gICAgfVxuXG4gICAgZm9yRWFjaChcbiAgICAgICAgY2FsbGJhY2tmbjogKHZhbHVlOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgcGFyZW50OiBIZWFkZXJzKSA9PiB2b2lkLFxuICAgICAgICB0aGlzQXJnPzogYW55LFxuICAgICk6IHZvaWQge1xuICAgICAgICBmb3IgKGNvbnN0IFtuYW1lLCB2YWx1ZXNdIG9mIHRoaXMuaGVhZGVycy5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrZm4uY2FsbCh0aGlzQXJnLCB2YWx1ZXMuam9pbihcIiwgXCIpLCBuYW1lLCB0aGlzKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgKmVudHJpZXMoKTogSXRlcmFibGVJdGVyYXRvcjxbc3RyaW5nLCBzdHJpbmddPiB7XG4gICAgICAgIGZvciAoY29uc3QgW25hbWUsIHZhbHVlc10gb2YgdGhpcy5oZWFkZXJzLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgeWllbGQgW25hbWUsIHZhbHVlcy5qb2luKFwiLCBcIildXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAqa2V5cygpOiBJdGVyYWJsZUl0ZXJhdG9yPHN0cmluZz4ge1xuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgdGhpcy5oZWFkZXJzLmtleXMoKSkge1xuICAgICAgICAgICAgeWllbGQgbmFtZVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgKnZhbHVlcygpOiBJdGVyYWJsZUl0ZXJhdG9yPHN0cmluZz4ge1xuICAgICAgICBmb3IgKGNvbnN0IHZhbHVlcyBvZiB0aGlzLmhlYWRlcnMudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIHlpZWxkIHZhbHVlcy5qb2luKFwiLCBcIilcbiAgICAgICAgfVxuICAgIH1cblxuICAgIFtTeW1ib2wuaXRlcmF0b3JdKCk6IEl0ZXJhYmxlSXRlcmF0b3I8W3N0cmluZywgc3RyaW5nXT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5lbnRyaWVzKClcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBVUkxTZWFyY2hQYXJhbXMge1xuICAgIHByaXZhdGUgcGFyYW1zID0gbmV3IE1hcDxzdHJpbmcsIEFycmF5PHN0cmluZz4+KClcblxuICAgIGNvbnN0cnVjdG9yKGluaXQ6IHN0cmluZ1tdW10gfCBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHwgc3RyaW5nIHwgVVJMU2VhcmNoUGFyYW1zID0gXCJcIikge1xuICAgICAgICBpZiAodHlwZW9mIGluaXQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRoaXMucGFyc2VTdHJpbmcoaW5pdClcbiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGluaXQpKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBpbml0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmQoa2V5LCB2YWx1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChpbml0IGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zKSB7XG4gICAgICAgICAgICBpbml0LmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHRoaXMuYXBwZW5kKGtleSwgdmFsdWUpKVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbml0ID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBpbml0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoa2V5LCBpbml0W2tleV0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHBhcnNlU3RyaW5nKHF1ZXJ5OiBzdHJpbmcpIHtcbiAgICAgICAgcXVlcnlcbiAgICAgICAgICAgIC5yZXBsYWNlKC9eXFw/LywgXCJcIilcbiAgICAgICAgICAgIC5zcGxpdChcIiZcIilcbiAgICAgICAgICAgIC5mb3JFYWNoKChwYWlyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFwYWlyKSByZXR1cm5cbiAgICAgICAgICAgICAgICBjb25zdCBba2V5LCB2YWx1ZV0gPSBwYWlyLnNwbGl0KFwiPVwiKS5tYXAoZGVjb2RlVVJJQ29tcG9uZW50KVxuICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kKGtleSwgdmFsdWUgPz8gXCJcIilcbiAgICAgICAgICAgIH0pXG4gICAgfVxuXG4gICAgZ2V0IHNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmFtcy5zaXplXG4gICAgfVxuXG4gICAgYXBwZW5kKG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMucGFyYW1zLmhhcyhuYW1lKSkge1xuICAgICAgICAgICAgdGhpcy5wYXJhbXMuc2V0KG5hbWUsIFtdKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMucGFyYW1zLmdldChuYW1lKSEucHVzaCh2YWx1ZSlcbiAgICB9XG5cbiAgICBkZWxldGUobmFtZTogc3RyaW5nLCB2YWx1ZT86IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5wYXJhbXMuZGVsZXRlKG5hbWUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZXMgPSB0aGlzLnBhcmFtcy5nZXQobmFtZSkgfHwgW11cbiAgICAgICAgICAgIHRoaXMucGFyYW1zLnNldChcbiAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgIHZhbHVlcy5maWx0ZXIoKHYpID0+IHYgIT09IHZhbHVlKSxcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIGlmICh0aGlzLnBhcmFtcy5nZXQobmFtZSkhLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMucGFyYW1zLmRlbGV0ZShuYW1lKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0KG5hbWU6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSB0aGlzLnBhcmFtcy5nZXQobmFtZSlcbiAgICAgICAgcmV0dXJuIHZhbHVlcyA/IHZhbHVlc1swXSA6IG51bGxcbiAgICB9XG5cbiAgICBnZXRBbGwobmFtZTogc3RyaW5nKTogQXJyYXk8c3RyaW5nPiB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmFtcy5nZXQobmFtZSkgfHwgW11cbiAgICB9XG5cbiAgICBoYXMobmFtZTogc3RyaW5nLCB2YWx1ZT86IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoIXRoaXMucGFyYW1zLmhhcyhuYW1lKSkgcmV0dXJuIGZhbHNlXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdHJ1ZVxuICAgICAgICByZXR1cm4gdGhpcy5wYXJhbXMuZ2V0KG5hbWUpPy5pbmNsdWRlcyh2YWx1ZSkgfHwgZmFsc2VcbiAgICB9XG5cbiAgICBzZXQobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMucGFyYW1zLnNldChuYW1lLCBbdmFsdWVdKVxuICAgIH1cblxuICAgIHNvcnQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMucGFyYW1zID0gbmV3IE1hcChbLi4udGhpcy5wYXJhbXMuZW50cmllcygpXS5zb3J0KCkpXG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFsuLi50aGlzLnBhcmFtcy5lbnRyaWVzKCldXG4gICAgICAgICAgICAuZmxhdE1hcCgoW2tleSwgdmFsdWVzXSkgPT5cbiAgICAgICAgICAgICAgICB2YWx1ZXMubWFwKCh2YWx1ZSkgPT4gYCR7ZW5jb2RlVVJJQ29tcG9uZW50KGtleSl9PSR7ZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKX1gKSxcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5qb2luKFwiJlwiKVxuICAgIH1cblxuICAgIGZvckVhY2goXG4gICAgICAgIGNhbGxiYWNrZm46ICh2YWx1ZTogc3RyaW5nLCBrZXk6IHN0cmluZywgcGFyZW50OiBVUkxTZWFyY2hQYXJhbXMpID0+IHZvaWQsXG4gICAgICAgIHRoaXNBcmc/OiBhbnksXG4gICAgKTogdm9pZCB7XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVzXSBvZiB0aGlzLnBhcmFtcy5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2tmbi5jYWxsKHRoaXNBcmcsIHZhbHVlLCBrZXksIHRoaXMpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBbU3ltYm9sLml0ZXJhdG9yXSgpOiBNYXBJdGVyYXRvcjxbc3RyaW5nLCBBcnJheTxzdHJpbmc+XT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJhbXMuZW50cmllcygpXG4gICAgfVxufVxuXG4vLyBUT0RPOiBpbXBsIHNldHRlcnNcbmV4cG9ydCBjbGFzcyBVUkwge1xuICAgIHJlYWRvbmx5IHVyaTogR0xpYi5VcmlcblxuICAgIHJlYWRvbmx5IHNlYXJjaFBhcmFtczogVVJMU2VhcmNoUGFyYW1zXG5cbiAgICBjb25zdHJ1Y3Rvcih1cmw6IHN0cmluZyB8IFVSTCwgYmFzZT86IHN0cmluZyB8IFVSTCkge1xuICAgICAgICBpZiAoYmFzZSkge1xuICAgICAgICAgICAgdXJsID0gR0xpYi5VcmkucmVzb2x2ZV9yZWxhdGl2ZShcbiAgICAgICAgICAgICAgICBiYXNlIGluc3RhbmNlb2YgVVJMID8gYmFzZS50b1N0cmluZygpIDogYmFzZSxcbiAgICAgICAgICAgICAgICB1cmwgaW5zdGFuY2VvZiBVUkwgPyB1cmwudG9TdHJpbmcoKSA6IHVybCxcbiAgICAgICAgICAgICAgICBHTGliLlVyaUZsYWdzLkhBU19QQVNTV09SRCxcbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVyaSA9IEdMaWIuVXJpLnBhcnNlKFxuICAgICAgICAgICAgdXJsIGluc3RhbmNlb2YgVVJMID8gdXJsLnRvU3RyaW5nKCkgOiB1cmwsXG4gICAgICAgICAgICBHTGliLlVyaUZsYWdzLkhBU19QQVNTV09SRCxcbiAgICAgICAgKVxuICAgICAgICB0aGlzLnNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXModGhpcy51cmkuZ2V0X3F1ZXJ5KCkgPz8gXCJcIilcbiAgICB9XG5cbiAgICBnZXQgaHJlZigpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCB1cmkgPSBHTGliLlVyaS5idWlsZF93aXRoX3VzZXIoXG4gICAgICAgICAgICBHTGliLlVyaUZsYWdzLkhBU19QQVNTV09SRCxcbiAgICAgICAgICAgIHRoaXMudXJpLmdldF9zY2hlbWUoKSxcbiAgICAgICAgICAgIHRoaXMudXJpLmdldF91c2VyKCksXG4gICAgICAgICAgICB0aGlzLnVyaS5nZXRfcGFzc3dvcmQoKSxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICB0aGlzLnVyaS5nZXRfaG9zdCgpLFxuICAgICAgICAgICAgdGhpcy51cmkuZ2V0X3BvcnQoKSxcbiAgICAgICAgICAgIHRoaXMudXJpLmdldF9wYXRoKCksXG4gICAgICAgICAgICB0aGlzLnNlYXJjaFBhcmFtcy50b1N0cmluZygpLFxuICAgICAgICAgICAgdGhpcy51cmkuZ2V0X2ZyYWdtZW50KCksXG4gICAgICAgIClcblxuICAgICAgICByZXR1cm4gdXJpLnRvX3N0cmluZygpXG4gICAgfVxuXG4gICAgZ2V0IG9yaWdpbigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gXCJudWxsXCIgLy8gVE9ETzpcbiAgICB9XG5cbiAgICBnZXQgcHJvdG9jb2woKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXJpLmdldF9zY2hlbWUoKSArIFwiOlwiXG4gICAgfVxuXG4gICAgZ2V0IHVzZXJuYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnVyaS5nZXRfdXNlcigpID8/IFwiXCJcbiAgICB9XG5cbiAgICBnZXQgcGFzc3dvcmQoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXJpLmdldF9wYXNzd29yZCgpID8/IFwiXCJcbiAgICB9XG5cbiAgICBnZXQgaG9zdCgpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBob3N0ID0gdGhpcy5ob3N0bmFtZVxuICAgICAgICBjb25zdCBwb3J0ID0gdGhpcy5wb3J0XG4gICAgICAgIHJldHVybiBob3N0ID8gaG9zdCArIChwb3J0ID8gXCI6XCIgKyBwb3J0IDogXCJcIikgOiBcIlwiXG4gICAgfVxuXG4gICAgZ2V0IGhvc3RuYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnVyaS5nZXRfaG9zdCgpID8/IFwiXCJcbiAgICB9XG5cbiAgICBnZXQgcG9ydCgpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBwID0gdGhpcy51cmkuZ2V0X3BvcnQoKVxuICAgICAgICByZXR1cm4gcCA+PSAwID8gcC50b1N0cmluZygpIDogXCJcIlxuICAgIH1cblxuICAgIGdldCBwYXRobmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy51cmkuZ2V0X3BhdGgoKVxuICAgIH1cblxuICAgIGdldCBoYXNoKCk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IGZyYWcgPSB0aGlzLnVyaS5nZXRfZnJhZ21lbnQoKVxuICAgICAgICByZXR1cm4gZnJhZyA/IFwiI1wiICsgZnJhZyA6IFwiXCJcbiAgICB9XG5cbiAgICBnZXQgc2VhcmNoKCk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IHEgPSB0aGlzLnNlYXJjaFBhcmFtcy50b1N0cmluZygpXG4gICAgICAgIHJldHVybiBxID8gXCI/XCIgKyBxIDogXCJcIlxuICAgIH1cblxuICAgIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmhyZWZcbiAgICB9XG5cbiAgICB0b0pTT04oKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHJlZlxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJlc3BvbnNlIHtcbiAgICByZWFkb25seSBib2R5OiBHaW8uSW5wdXRTdHJlYW0gfCBudWxsID0gbnVsbFxuICAgIHJlYWRvbmx5IGJvZHlVc2VkOiBib29sZWFuID0gZmFsc2VcblxuICAgIHJlYWRvbmx5IGhlYWRlcnM6IEhlYWRlcnNcbiAgICByZWFkb25seSBvazogYm9vbGVhblxuICAgIHJlYWRvbmx5IHJlZGlyZWN0ZWQ6IGJvb2xlYW4gPSBmYWxzZVxuICAgIHJlYWRvbmx5IHN0YXR1czogbnVtYmVyXG4gICAgcmVhZG9ubHkgc3RhdHVzVGV4dDogc3RyaW5nXG4gICAgcmVhZG9ubHkgdHlwZTogUmVzcG9uc2VUeXBlID0gXCJkZWZhdWx0XCJcbiAgICByZWFkb25seSB1cmw6IHN0cmluZyA9IFwiXCJcblxuICAgIHN0YXRpYyBlcnJvcigpOiBSZXNwb25zZSB7XG4gICAgICAgIHRocm93IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKVxuICAgIH1cblxuICAgIHN0YXRpYyBqc29uKF9kYXRhOiBhbnksIF9pbml0PzogUmVzcG9uc2VJbml0KTogUmVzcG9uc2Uge1xuICAgICAgICB0aHJvdyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIilcbiAgICB9XG5cbiAgICBzdGF0aWMgcmVkaXJlY3QoX3VybDogc3RyaW5nIHwgVVJMLCBfc3RhdHVzPzogbnVtYmVyKTogUmVzcG9uc2Uge1xuICAgICAgICB0aHJvdyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIilcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihib2R5OiBHaW8uSW5wdXRTdHJlYW0gfCBudWxsID0gbnVsbCwgb3B0aW9uczogUmVzcG9uc2VJbml0ID0ge30pIHtcbiAgICAgICAgdGhpcy5ib2R5ID0gYm9keVxuICAgICAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMgPz8ge30pXG4gICAgICAgIHRoaXMuc3RhdHVzID0gb3B0aW9ucy5zdGF0dXMgPz8gMjAwXG4gICAgICAgIHRoaXMuc3RhdHVzVGV4dCA9IG9wdGlvbnMuc3RhdHVzVGV4dCA/PyBcIlwiXG4gICAgICAgIHRoaXMub2sgPSB0aGlzLnN0YXR1cyA+PSAyMDAgJiYgdGhpcy5zdGF0dXMgPCAzMDBcbiAgICB9XG5cbiAgICBhc3luYyBibG9iKCk6IFByb21pc2U8bmV2ZXI+IHtcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJOb3QgaW1wbGVtZW50ZWRcIilcbiAgICB9XG5cbiAgICBhc3luYyBieXRlcygpIHtcbiAgICAgICAgY29uc3QgeyBDTE9TRV9TT1VSQ0UsIENMT1NFX1RBUkdFVCB9ID0gR2lvLk91dHB1dFN0cmVhbVNwbGljZUZsYWdzXG4gICAgICAgIGNvbnN0IG91dHB1dFN0cmVhbSA9IEdpby5NZW1vcnlPdXRwdXRTdHJlYW0ubmV3X3Jlc2l6YWJsZSgpXG4gICAgICAgIGlmICghdGhpcy5ib2R5KSByZXR1cm4gbnVsbFxuXG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIG91dHB1dFN0cmVhbS5zcGxpY2VfYXN5bmMoXG4gICAgICAgICAgICAgICAgdGhpcy5ib2R5ISxcbiAgICAgICAgICAgICAgICBDTE9TRV9UQVJHRVQgfCBDTE9TRV9TT1VSQ0UsXG4gICAgICAgICAgICAgICAgR0xpYi5QUklPUklUWV9ERUZBVUxULFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgKF8sIHJlcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShvdXRwdXRTdHJlYW0uc3BsaWNlX2ZpbmlzaChyZXMpKVxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIClcbiAgICAgICAgfSlcblxuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHsgYm9keVVzZWQ6IHRydWUgfSlcbiAgICAgICAgcmV0dXJuIG91dHB1dFN0cmVhbS5zdGVhbF9hc19ieXRlcygpXG4gICAgfVxuXG4gICAgYXN5bmMgZm9ybURhdGEoKTogUHJvbWlzZTxuZXZlcj4ge1xuICAgICAgICB0aHJvdyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIilcbiAgICB9XG5cbiAgICBhc3luYyBhcnJheUJ1ZmZlcigpIHtcbiAgICAgICAgY29uc3QgYmxvYiA9IGF3YWl0IHRoaXMuYnl0ZXMoKVxuICAgICAgICBpZiAoIWJsb2IpIHJldHVybiBudWxsXG5cbiAgICAgICAgcmV0dXJuIGJsb2IudG9BcnJheSgpLmJ1ZmZlclxuICAgIH1cblxuICAgIGFzeW5jIHRleHQoKSB7XG4gICAgICAgIGNvbnN0IGJsb2IgPSBhd2FpdCB0aGlzLmJ5dGVzKClcbiAgICAgICAgcmV0dXJuIGJsb2IgPyBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoYmxvYi50b0FycmF5KCkpIDogXCJcIlxuICAgIH1cblxuICAgIGFzeW5jIGpzb24oKSB7XG4gICAgICAgIGNvbnN0IHRleHQgPSBhd2FpdCB0aGlzLnRleHQoKVxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh0ZXh0KVxuICAgIH1cblxuICAgIGNsb25lKCk6IFJlc3BvbnNlIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpXG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2godXJsOiBzdHJpbmcgfCBVUkwsIHsgbWV0aG9kLCBoZWFkZXJzLCBib2R5IH06IFJlcXVlc3RJbml0ID0ge30pIHtcbiAgICBjb25zdCBzZXNzaW9uID0gbmV3IFNvdXAuU2Vzc2lvbigpXG5cbiAgICBjb25zdCBtZXNzYWdlID0gbmV3IFNvdXAuTWVzc2FnZSh7XG4gICAgICAgIG1ldGhvZDogbWV0aG9kIHx8IFwiR0VUXCIsXG4gICAgICAgIHVyaTogdXJsIGluc3RhbmNlb2YgVVJMID8gdXJsLnVyaSA6IEdMaWIuVXJpLnBhcnNlKHVybCwgR0xpYi5VcmlGbGFncy5OT05FKSxcbiAgICB9KVxuXG4gICAgaWYgKGhlYWRlcnMpIHtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoaGVhZGVycykpXG4gICAgICAgICAgICBtZXNzYWdlLmdldF9yZXF1ZXN0X2hlYWRlcnMoKS5hcHBlbmQoa2V5LCBTdHJpbmcodmFsdWUpKVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYm9keSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBtZXNzYWdlLnNldF9yZXF1ZXN0X2JvZHlfZnJvbV9ieXRlcyhudWxsLCBuZXcgR0xpYi5CeXRlcyhuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoYm9keSkpKVxuICAgIH1cblxuICAgIGNvbnN0IGlucHV0U3RyZWFtOiBHaW8uSW5wdXRTdHJlYW0gPSBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHNlc3Npb24uc2VuZF9hc3luYyhtZXNzYWdlLCAwLCBudWxsLCAoXywgcmVzKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoc2Vzc2lvbi5zZW5kX2ZpbmlzaChyZXMpKVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfSlcblxuICAgIHJldHVybiBuZXcgUmVzcG9uc2UoaW5wdXRTdHJlYW0sIHtcbiAgICAgICAgc3RhdHVzVGV4dDogbWVzc2FnZS5yZWFzb25fcGhyYXNlLFxuICAgICAgICBzdGF0dXM6IG1lc3NhZ2Uuc3RhdHVzX2NvZGUsXG4gICAgfSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgZmV0Y2hcbiIsICJpbXBvcnQgeyBVUkwgfSBmcm9tIFwiYWdzL2ZldGNoXCI7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbmRwb2ludHMge1xuXG4gIGJ1aWxkKGJhc2U6IHN0cmluZywgcXVlcnk6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4pIHtcbiAgICBjb25zdCBxdWVyeVN0ciA9IHRoaXMuYnVpbGRRdWVyeU9iaihxdWVyeSk7XG4gICAgcmV0dXJuIG5ldyBVUkwoYCR7YmFzZX0/JHtxdWVyeVN0cn1gKTtcbiAgfVxuXG4gIGJ1aWxkUXVlcnlBcmcoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHtrZXl9PSR7dmFsdWV9YFxuICB9XG5cbiAgYnVpbGRRdWVyeU9iaihxdWVyeU9iajogUmVjb3JkPHN0cmluZywgc3RyaW5nPik6IHN0cmluZyB7XG4gICAgY29uc3QgYXJnczogc3RyaW5nW10gPSBbXTtcbiAgICBmb3IgKGxldCBrZXkgb2YgT2JqZWN0LmtleXMocXVlcnlPYmopKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHF1ZXJ5T2JqW2tleV07XG4gICAgICBhcmdzLnB1c2godGhpcy5idWlsZFF1ZXJ5QXJnKGtleSwgdmFsdWUpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJncy5qb2luKFwiJlwiKTtcbiAgfVxufVxuIiwgImltcG9ydCBFbmRwb2ludHMgZnJvbSBcIn4vc3JjL2NvcmUvZW5kcG9pbnRzL2VuZHBvaW50c1wiO1xuaW1wb3J0IHsgVVJMIH0gZnJvbSBcImFncy9mZXRjaFwiO1xuaW1wb3J0IHsgQ29uZmlnLCBnZXRDb25maWcgfSBmcm9tIFwifi9jb25maWdcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV2VhdGhlckVuZHBvaW50cyBleHRlbmRzIEVuZHBvaW50cyB7XG4gIHByaXZhdGUgcmVhZG9ubHkgY29uZmlnOiBDb25maWdcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuY29uZmlnID0gZ2V0Q29uZmlnKCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0V2VhdGhlcigpOiBVUkwge1xuICAgIHJldHVybiB0aGlzLmJ1aWxkKFxuICAgICAgdGhpcy5jb25maWcud2VhdGhlci5hcGlTZXR0aW5ncy5iYXNlVXJsLFxuICAgICAge1xuICAgICAgICBpZDogdGhpcy5jb25maWcud2VhdGhlci5hcGlTZXR0aW5ncy5jaXR5SWQsXG4gICAgICAgIGFwcGlkOiB0aGlzLmNvbmZpZy53ZWF0aGVyLmFwaVNldHRpbmdzLmFwaUtleSxcbiAgICAgICAgdW5pdHM6IHRoaXMuY29uZmlnLndlYXRoZXIuYXBpU2V0dGluZ3MudW5pdHMsXG4gICAgICAgIGNudDogdGhpcy5jb25maWcud2VhdGhlci5hcGlTZXR0aW5ncy5jbnQsXG4gICAgICAgIGxhbmc6IHRoaXMuY29uZmlnLndlYXRoZXIuYXBpU2V0dGluZ3MubGFuZ3VhZ2UsXG4gICAgICB9XG4gICAgKVxuICB9XG59XG4iLCAiaW1wb3J0IHsgaW50ZXJ2YWwsIFRpbWVyIH0gZnJvbSBcImFncy90aW1lXCI7XG5pbXBvcnQgeyBmZXRjaCB9IGZyb20gXCJhZ3MvZmV0Y2hcIlxuaW1wb3J0IHsgQ29uZmlnLCBnZXRDb25maWcgfSBmcm9tIFwifi9jb25maWdcIjtcbmltcG9ydCBXZWF0aGVyRW5kcG9pbnRzIGZyb20gXCJ+L3NyYy9mZWF0dXJlcy93ZWF0aGVyL21vZGVsL3dlYXRoZXItZW5kcG9pbnRzXCI7XG5pbXBvcnQgV2VhdGhlckRUTyBmcm9tIFwifi9zcmMvZmVhdHVyZXMvd2VhdGhlci9kdG9zL3dlYXRoZXItZHRvXCI7XG5pbXBvcnQgSVdlYXRoZXJNb2RlbCBmcm9tIFwifi9zcmMvZmVhdHVyZXMvd2VhdGhlci92bS9pLXdlYXRoZXItbW9kZWxcIjtcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXZWF0aGVyTW9kZWwgaW1wbGVtZW50cyBJV2VhdGhlck1vZGVsIHtcbiAgcHJpdmF0ZSBlbmRwb2ludHM6IFdlYXRoZXJFbmRwb2ludHNcbiAgcHJpdmF0ZSBjb25maWc6IENvbmZpZztcblxuICBwcml2YXRlIHRpbWVyPzogVGltZXIgfCB1bmRlZmluZWQ7XG5cbiAgY29uc3RydWN0b3IoZW5kcG9pbnRzPzogV2VhdGhlckVuZHBvaW50cywgY29uZmlnPzogQ29uZmlnKSB7XG4gICAgdGhpcy5lbmRwb2ludHMgPSBlbmRwb2ludHMgPz8gbmV3IFdlYXRoZXJFbmRwb2ludHMoKTtcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZyA/PyBnZXRDb25maWcoKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGFydFJlZnJlc2goY2FsbGJhY2s6ICh3ZWF0aGVyOiBXZWF0aGVyRFRPKSA9PiB2b2lkKSB7XG4gICAgdGhpcy50aW1lciA9IGludGVydmFsKFxuICAgICAgdGhpcy5jb25maWcud2VhdGhlci5yZWZyZXNoLnJlZnJlc2hJbnRlcnZhbCxcbiAgICAgIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3Qgd2VhdGhlciA9IGF3YWl0IHRoaXMuZmV0Y2goKTtcbiAgICAgICAgY2FsbGJhY2sod2VhdGhlcik7XG4gICAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBzdG9wUmVmcmVzaCgpIHtcbiAgICB0aGlzLnRpbWVyPy5jYW5jZWwoKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBmZXRjaCgpOiBQcm9taXNlPFdlYXRoZXJEVE8+IHtcbiAgICBjb25zdCB1cmwgPSB0aGlzLmVuZHBvaW50cy5nZXRXZWF0aGVyKClcbiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaCh1cmwpXG4gICAgY29uc3QganNvbiA9IGF3YWl0IHJlcy5qc29uKCkgYXMgV2VhdGhlckRUT1xuICAgIHJldHVybiBqc29uO1xuICB9XG59XG4iLCAiaW1wb3J0IFdlYXRoZXJNb2RlbCBmcm9tIFwifi9zcmMvZmVhdHVyZXMvd2VhdGhlci9tb2RlbC93ZWF0aGVyLW1vZGVsXCI7XG5pbXBvcnQgSVdlYXRoZXJNb2RlbCBmcm9tIFwifi9zcmMvZmVhdHVyZXMvd2VhdGhlci92bS9pLXdlYXRoZXItbW9kZWxcIjtcbmltcG9ydCBXZWF0aGVyRFRPIGZyb20gXCJ+L3NyYy9mZWF0dXJlcy93ZWF0aGVyL2R0b3Mvd2VhdGhlci1kdG9cIjtcbmltcG9ydCBCYXNlVk0gZnJvbSBcIn4vc3JjL2NvcmUvbXZ2bS9iYXNlLXZtXCI7XG5pbXBvcnQgeyBXZWF0aGVyU3RhdGVWTSB9IGZyb20gXCJ+L3NyYy9mZWF0dXJlcy93ZWF0aGVyL3ZpZXcvaS13ZWF0aGVyLXZtXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdlYXRoZXJWTSBleHRlbmRzIEJhc2VWTTxXZWF0aGVyU3RhdGVWTT4ge1xuICBwcml2YXRlIG1vZGVsOiBJV2VhdGhlck1vZGVsO1xuXG4gIGNvbnN0cnVjdG9yKG1vZGVsPzogV2VhdGhlck1vZGVsKSB7XG4gICAgc3VwZXIoe30pXG4gICAgdGhpcy5tb2RlbCA9IG1vZGVsID8/IG5ldyBXZWF0aGVyTW9kZWwoKTtcblxuICAgIHRoaXMuaW5pdFdlYXRoZXIoKS50aGVuKCgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKFwiSW5pdGlhbGl6ZWQgd2VhdGhlclwiKTtcbiAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gaW5pdGlhbGl6ZSBlcnJvcjogJHtKU09OLnN0cmluZ2lmeShlcnIpfWApXG4gICAgfSk7XG5cbiAgICB0aGlzLmluaXRSZWZyZXNoKCk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGluaXRXZWF0aGVyKCkge1xuICAgIGNvbnN0IHdlYXRoZXIgPSBhd2FpdCB0aGlzLm1vZGVsLmZldGNoKCk7XG4gICAgdGhpcy5zZXRXZWF0aGVyKHdlYXRoZXIpO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0UmVmcmVzaCgpIHtcbiAgICB0aGlzLm1vZGVsLnN0YXJ0UmVmcmVzaCgod2VhdGhlcikgPT4gdGhpcy5zZXRXZWF0aGVyKHdlYXRoZXIpKTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0V2VhdGhlcih3OiBXZWF0aGVyRFRPKSB7XG4gICAgdGhpcy5zdGF0ZS5zZXQoe1xuICAgICAgdGVtcGVyYXR1cmU6IGBUb2RheSdzIGluICR7dy5uYW1lfSBpcyAke3cud2VhdGhlclswXS5tYWlufSB3aXRoIHRlbXBlcmF0dXJlICR7dy5tYWluLnRlbXB9XHUwMEIwQ2AsXG4gICAgICB3aW5kOiBgV2luZCBzcGVlZCBpbiB5b3VyIGxvY2F0aW9uIGlzICR7dy53aW5kLnNwZWVkfWttaGAsXG4gICAgICBodW1pZGl0eTogYEFuZCBIdW1pZGl0eSBpcyAke3cubWFpbi5odW1pZGl0eX0lYCxcbiAgICB9KVxuICB9XG59XG4iLCAiaW1wb3J0IHsgQXN0YWwsIEdkaywgR3RrIH0gZnJvbSBcImFncy9ndGs0XCJcbmltcG9ydCBXZWF0aGVyQ29ua3lWaWV3IGZyb20gXCJ+L3NyYy9mZWF0dXJlcy93ZWF0aGVyL3ZpZXcvd2VhdGhlci1jb25reS12aWV3XCI7XG5pbXBvcnQgVGltZUNvbmt5VmlldyBmcm9tIFwifi9zcmMvZmVhdHVyZXMvdGltZS92aWV3L3RpbWUtY29ua3ktdmlld1wiO1xuaW1wb3J0IFdlYXRoZXJWTSBmcm9tIFwifi9zcmMvZmVhdHVyZXMvd2VhdGhlci92bS93ZWF0aGVyLXZtXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENvbmt5VmlldyhnZGttb25pdG9yOiBHZGsuTW9uaXRvcikge1xuICByZXR1cm4gPHdpbmRvd1xuICAgIHZpc2libGVcbiAgICBhbmNob3I9e0FzdGFsLldpbmRvd0FuY2hvci5CT1RUT00gfCBBc3RhbC5XaW5kb3dBbmNob3IuTEVGVH1cbiAgICBsYXllcj17QXN0YWwuTGF5ZXIuQkFDS0dST1VORH1cbiAgICBnZGttb25pdG9yPXtnZGttb25pdG9yfVxuICAgIGV4Y2x1c2l2aXR5PXtBc3RhbC5FeGNsdXNpdml0eS5JR05PUkV9XG4gICAga2V5bW9kZT17QXN0YWwuS2V5bW9kZS5OT05FfVxuICAgIHZhbGlnbj17R3RrLkFsaWduLlNUQVJUfVxuICAgIGhhbGlnbj17R3RrLkFsaWduLlNUQVJUfVxuICAgIGhleHBhbmRcbiAgICBoZWlnaHRSZXF1ZXN0PXs1MH1cbiAgICB3aWR0aFJlcXVlc3Q9ezUwfVxuICAgIGNzc0NsYXNzZXM9e1tcImNvbmt5LXdpZGdldFwiXX1cbiAgPlxuICAgIDxib3hcbiAgICAgIG9yaWVudGF0aW9uPXtHdGsuT3JpZW50YXRpb24uVkVSVElDQUx9XG4gICAgICBoYWxpZ249e0d0ay5BbGlnbi5TVEFSVH1cbiAgICAgIGNzc0NsYXNzZXM9e1tcImNvbmt5XCJdfVxuICAgID5cbiAgICAgIDxUaW1lQ29ua3lWaWV3IC8+XG4gICAgICA8V2VhdGhlckNvbmt5VmlldyB2bT17bmV3IFdlYXRoZXJWTSgpfSAvPlxuICAgIDwvYm94PlxuICA8L3dpbmRvdz5cbn1cblxuIiwgImltcG9ydCBhcHAgZnJvbSBcImFncy9ndGs0L2FwcFwiXG5pbXBvcnQgc3R5bGUgZnJvbSBcIi4vc3R5bGUuc2Nzc1wiXG5pbXBvcnQgY29uZmlnIGZyb20gXCJ+L2NvbmZpZ1wiO1xuaW1wb3J0IE9zZFdpbmRvd1ZpZXcgZnJvbSBcIn4vc3JjL2ZlYXR1cmVzL29zZC92aWV3L29zZC13aW5kb3ctdmlld1wiO1xuaW1wb3J0IENvbW1hbmRzSGFuZGxlciBmcm9tIFwifi9zcmMvY29yZS9jb21tYW5kcy9jb21tYW5kcy1oYW5kbGVyXCI7XG5pbXBvcnQgQmFyIGZyb20gXCJ+L3NyYy9mZWF0dXJlcy9iYXIvdmlldy9iYXItdmlld1wiO1xuaW1wb3J0IHZvbHVtZUNvbW1hbmRIYW5kbGVyIGZyb20gXCJ+L3NyYy9mZWF0dXJlcy9jb21tYW5kcy92b2x1bWUtY29tbWFuZC1oYW5kbGVyXCI7XG5pbXBvcnQgTm90aWZpY2F0aW9uc1dpbmRvd1ZpZXcgZnJvbSBcIi4vc3JjL2ZlYXR1cmVzL25vdGlmaWNhdGlvbnMvdmlldy9ub3RpZmljYXRpb25zLXdpbmRvdy12aWV3XCI7XG5pbXBvcnQgQ29ua3lWaWV3IGZyb20gXCIuL3NyYy9mZWF0dXJlcy9jb25reS92aWV3L2Nvbmt5LXZpZXdcIjtcblxuY29uc3QgY0hhbmRsZXIgPSBuZXcgQ29tbWFuZHNIYW5kbGVyKCk7XG4vLyBjSGFuZGxlci5yZWdpc3RlckNvbW1hbmQoXCJicmlnaHRuZXNzXCIsIGJyaWdodG5lc3NDb21tYW5kSGFuZGxlcik7XG5jSGFuZGxlci5yZWdpc3RlckNvbW1hbmQoXCJ2b2x1bWVcIiwgdm9sdW1lQ29tbWFuZEhhbmRsZXIpO1xuXG5hcHAuc3RhcnQoe1xuICBjc3M6IHN0eWxlLFxuICBpbnN0YW5jZU5hbWU6IGNvbmZpZy5hcHBUaXRsZSxcbiAgcmVxdWVzdEhhbmRsZXIocmVxdWVzdDogc3RyaW5nW10sIHJlczogKHJlc3BvbnNlOiBhbnkpID0+IHZvaWQpIHtcbiAgICBjb25zdCByZXN1bHQgPSBjSGFuZGxlci5oYW5kbGVDb21tYW5kU2FmZShyZXF1ZXN0LCByZXMpO1xuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIHJlcyhyZXN1bHQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXMoXCJ1bmtub3duIGNvbW1hbmRcIilcbiAgfSxcbiAgbWFpbigpIHtcbiAgICBhcHAuZ2V0X21vbml0b3JzKCkubWFwKChtb24pID0+IE9zZFdpbmRvd1ZpZXcobW9uKSlcbiAgICBpZiAoY29uZmlnLmNvbmt5LmVuYWJsZWQpIHtcbiAgICAgIGFwcC5nZXRfbW9uaXRvcnMoKS5tYXAoKG1vbikgPT4gQ29ua3lWaWV3KG1vbikpXG4gICAgfVxuICAgIGFwcC5nZXRfbW9uaXRvcnMoKS5tYXAoKG1vbikgPT4gQmFyKG1vbikpXG4gICAgaWYgKGNvbmZpZy5ub3RpZmljYXRpb25zLmVuYWJsZWQpIHtcbiAgICAgIGFwcC5nZXRfbW9uaXRvcnMoKS5tYXAoKG1vbikgPT4gTm90aWZpY2F0aW9uc1dpbmRvd1ZpZXcobW9uKSk7XG4gICAgfVxuICB9LFxufSlcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBTUEsU0FBUyxTQUFTLEtBQWE7QUFDM0IsU0FBTyxJQUNGLFFBQVEsbUJBQW1CLE9BQU8sRUFDbEMsV0FBVyxLQUFLLEdBQUcsRUFDbkIsWUFBWTtBQUNyQjtBQUVBLGVBQWUsU0FBWSxLQUE4QkEsUUFBdUI7QUFDNUUsU0FBTyxJQUFJLEtBQUssQ0FBQyxNQUFNQSxPQUFNLEVBQUUsT0FBTyxDQUFDLEVBQUUsTUFBTSxNQUFNLE1BQU07QUFDL0Q7QUFFQSxTQUFTLE1BQXdCLE9BQVUsTUFBZ0M7QUFDdkUsU0FBTyxlQUFlLE9BQU8sTUFBTTtBQUFBLElBQy9CLE1BQU07QUFDRixhQUFPLEtBQUssT0FBTyxTQUFTLElBQUksQ0FBQyxFQUFFLEVBQUU7QUFBQSxJQUN6QztBQUFBLEVBQ0osQ0FBQztBQUNMO0FBRUEsTUFBTSxTQUFTLE9BQU8sZ0JBQWdCLEdBQUcsQ0FBQyxFQUFFLE1BQU0sWUFBWSxNQUFNO0FBQ2hFLFFBQU0sS0FBSyxXQUFXLE1BQU07QUFDNUIsUUFBTSxZQUFZLFdBQVcsVUFBVTtBQUN2QyxRQUFNLFlBQVksV0FBVyxZQUFZO0FBQzdDLENBQUM7QUFFRCxNQUFNLFNBQVMsT0FBTyxtQkFBbUIsR0FBRyxDQUFDLEVBQUUsT0FBTyxNQUFNO0FBQ3hELFFBQU0sT0FBTyxXQUFXLFNBQVM7QUFDckMsQ0FBQztBQUVELE1BQU0sU0FBUyxPQUFPLHFCQUFxQixHQUFHLENBQUMsRUFBRSxTQUFTLFdBQVcsT0FBTyxNQUFNO0FBQzlFLFFBQU0sUUFBUSxXQUFXLE9BQU87QUFDaEMsUUFBTSxVQUFVLFdBQVcsVUFBVTtBQUNyQyxRQUFNLFVBQVUsV0FBVyxTQUFTO0FBQ3BDLFFBQU0sT0FBTyxXQUFXLE9BQU87QUFDbkMsQ0FBQztBQUVELE1BQU0sU0FBUyxPQUFPLG9CQUFvQixHQUFHLENBQUMsRUFBRSxVQUFVLFNBQVMsVUFBVSxNQUFNO0FBQy9FLFFBQU0sU0FBUyxXQUFXLE9BQU87QUFDakMsUUFBTSxTQUFTLFdBQVcsVUFBVTtBQUNwQyxRQUFNLFNBQVMsV0FBVyxZQUFZO0FBQ3RDLFFBQU0sU0FBUyxXQUFXLFNBQVM7QUFDbkMsUUFBTSxRQUFRLFdBQVcsZ0JBQWdCO0FBQ3pDLFFBQU0sUUFBUSxXQUFXLGlCQUFpQjtBQUMxQyxRQUFNLFVBQVUsV0FBVyxTQUFTO0FBQ3hDLENBQUM7QUFFRCxNQUFNLFNBQVMsT0FBTyxpQkFBaUIsR0FBRyxDQUFDLEVBQUUsT0FBTyxPQUFPLE1BQU07QUFDN0QsUUFBTSxNQUFNLFdBQVcsU0FBUztBQUNoQyxRQUFNLE9BQU8sV0FBVyx1QkFBdUI7QUFDL0MsUUFBTSxPQUFPLFdBQVcscUJBQXFCO0FBQzdDLFFBQU0sT0FBTyxXQUFXLHNCQUFzQjtBQUM5QyxRQUFNLE9BQU8sV0FBVyxvQkFBb0I7QUFDNUMsUUFBTSxPQUFPLFdBQVcsVUFBVTtBQUN0QyxDQUFDO0FBRUQsTUFBTSxTQUFTLE9BQU8sbUJBQW1CLEdBQUcsQ0FBQyxFQUFFLEtBQUssTUFBTTtBQUN0RCxRQUFNLEtBQUssV0FBVyxlQUFlO0FBQ3JDLFFBQU0sS0FBSyxXQUFXLGNBQWM7QUFDeEMsQ0FBQztBQUVELE1BQU0sU0FBUyxPQUFPLGtCQUFrQixHQUFHLENBQUMsRUFBRSxRQUFRLGNBQUFDLGNBQWEsTUFBTTtBQUNyRSxRQUFNLE9BQU8sV0FBVyxlQUFlO0FBQ3ZDLFFBQU1BLGNBQWEsV0FBVyxTQUFTO0FBQzNDLENBQUM7QUFFRCxNQUFNLFNBQVMsT0FBTyx5QkFBeUIsR0FBRyxDQUFDLEVBQUUsY0FBYyxNQUFNO0FBQ3JFLFFBQU0sY0FBYyxXQUFXLFNBQVM7QUFDNUMsQ0FBQztBQUVELE1BQU0sU0FBUyxPQUFPLGNBQWMsR0FBRyxDQUFDLEVBQUUsSUFBQUMsS0FBSSxPQUFPLE1BQU0sTUFBTTtBQUM3RCxRQUFNQSxJQUFHLFdBQVcsU0FBUztBQUM3QixRQUFNLE1BQU0sV0FBVyxTQUFTO0FBQ2hDLFFBQU0sTUFBTSxXQUFXLFdBQVc7QUFDbEMsUUFBTSxNQUFNLFdBQVcsYUFBYTtBQUNwQyxRQUFNLE1BQU0sV0FBVyxVQUFVO0FBQ2pDLFFBQU0sTUFBTSxXQUFXLFNBQVM7QUFDaEMsUUFBTSxNQUFNLFdBQVcsU0FBUztBQUNoQyxRQUFNLE1BQU0sV0FBVyxXQUFXO0FBQ2xDLFFBQU0sTUFBTSxXQUFXLE9BQU87QUFDOUIsUUFBTSxNQUFNLFdBQVcsU0FBUztBQUNoQyxRQUFNLE1BQU0sV0FBVyxTQUFTO0FBQ3BDLENBQUM7QUFFRCxNQUFNLFNBQVMsT0FBTyxnQkFBZ0IsR0FBRyxDQUFDLEVBQUUsTUFBQUMsTUFBSyxNQUFNO0FBQ25ELFFBQU1BLE1BQUssV0FBVyxPQUFPO0FBQ2pDLENBQUM7OztBQ2hGRCxPQUFPLGFBQWE7QUFDcEIsT0FBTyxVQUFVOzs7QUNWVixTQUFTLFNBQVMsS0FBYTtBQUNsQyxTQUFPLElBQ0YsUUFBUSxtQkFBbUIsT0FBTyxFQUNsQyxXQUFXLEtBQUssR0FBRyxFQUNuQixZQUFZO0FBQ3JCO0FBRU8sU0FBU0MsVUFBUyxLQUFhO0FBQ2xDLFNBQU8sSUFDRixRQUFRLG1CQUFtQixPQUFPLEVBQ2xDLFdBQVcsS0FBSyxHQUFHLEVBQ25CLFlBQVk7QUFDckI7QUFrQk8sU0FBUyxJQUFJLEVBQUUsTUFBTSxZQUFZLFNBQVMsR0FBWTtBQUN6RCxNQUFJLFVBQVUsSUFBSSxJQUFJO0FBRXRCLFFBQU0sUUFBUSxPQUFPLFFBQVEsY0FBYyxDQUFDLENBQUM7QUFFN0MsTUFBSSxNQUFNLFNBQVMsR0FBRztBQUNsQixlQUFXLENBQUMsS0FBSyxLQUFLLEtBQUssT0FBTztBQUM5QixpQkFBVyxJQUFJLEdBQUcsS0FBSyxLQUFLO0FBQUEsSUFDaEM7QUFBQSxFQUNKO0FBRUEsTUFBSSxZQUFZLFNBQVMsU0FBUyxHQUFHO0FBQ2pDLGVBQVc7QUFDWCxlQUFXLFFBQVEsVUFBVTtBQUN6QixpQkFBVyxJQUFJLElBQUk7QUFBQSxJQUN2QjtBQUNBLGVBQVcsS0FBSyxJQUFJO0FBQUEsRUFDeEIsT0FBTztBQUNILGVBQVc7QUFBQSxFQUNmO0FBRUEsU0FBTztBQUNYO0FBZU8sU0FBUyxJQUFJLEtBQXFCLE1BQWMsT0FBWTtBQUMvRCxRQUFNLE1BQU1DLFVBQVMsSUFBSTtBQUN6QixRQUFNQyxVQUFTLE9BQU8sR0FBRztBQUN6QixRQUFNQyxVQUFTLE9BQU8sR0FBRztBQUV6QixNQUFJO0FBRUosTUFBSUQsV0FBVSxPQUFPLE9BQU8sSUFBSUEsT0FBTSxNQUFNLFlBQVk7QUFDcEQsY0FBVyxJQUFJQSxPQUFNLEVBQW9CO0FBQUEsRUFDN0MsT0FBTztBQUNILGNBQVUsSUFBSSxJQUF3QjtBQUFBLEVBQzFDO0FBRUEsTUFBSSxZQUFZLE9BQU87QUFDbkIsUUFBSUMsV0FBVSxPQUFPLE9BQU8sSUFBSUEsT0FBTSxNQUFNLFlBQVk7QUFDcEQ7QUFBQyxNQUFDLElBQUlBLE9BQU0sRUFBdUIsS0FBSztBQUFBLElBQzVDLE9BQU87QUFDSCxhQUFPLE9BQU8sS0FBSyxFQUFFLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQztBQUFBLElBQ3hDO0FBQUEsRUFDSjtBQUNKOzs7QUQxRUEsSUFBTSxPQUFPLE9BQU8saUJBQWlCO0FBQ3JDLElBQU0sRUFBRSxnQkFBZ0IsYUFBYSxRQUFRLElBQUk7QUFDakQsSUFBTSxFQUFFLFFBQVEsTUFBTSxjQUFjLElBQUk7QUFLakMsSUFBTSxjQUFjLFFBQVE7QUFHNUIsSUFBTSxrQkFBa0IsUUFBUTtBQUloQyxJQUFNLFlBQVksUUFBUTtBQUcxQixJQUFNLGFBQWEsUUFBUTtBQThDbEMsU0FBUyxZQUNMLEtBQ007QUFDTixNQUFJLElBQUksUUFBUyxPQUFNLE1BQU0sa0NBQWtDO0FBQy9ELE1BQUksSUFBSSxPQUFRLE9BQU0sTUFBTSxpQ0FBaUM7QUFFN0QsTUFBSSxPQUFPLElBQUksU0FBUyxVQUFVO0FBQzlCLFVBQU0sTUFBTSwyQ0FBMkM7QUFBQSxFQUMzRDtBQUVBLFNBQU8sSUFBSTtBQUNmO0FBd0VPLFNBQVMsT0FBVSxpQkFBNkM7QUFDbkUsU0FBTyxTQUFVLEtBQTBCLEtBQXVCO0FBQzlELFVBQU0sWUFBWSxZQUFZLEdBQUc7QUFDakMsVUFBTSxPQUFzQixJQUFJO0FBQ2hDLFVBQU0sUUFBUyxLQUFLLGVBQWUsQ0FBQztBQUNwQyxRQUFJLGFBQWEsT0FBTztBQUNwQixZQUFNLEVBQUUsT0FBTyxLQUFLLElBQUksTUFBTSxTQUFTO0FBQ3ZDLFlBQU0sU0FBUyxJQUFJLEVBQUUsT0FBTyxRQUFRLFdBQVcsVUFBVSxLQUFLO0FBQUEsSUFDbEUsT0FBTztBQUNILFlBQU0sU0FBUyxJQUFJLEVBQUUsT0FBTyxXQUFXLFVBQVUsTUFBTSxnQkFBZ0I7QUFBQSxJQUMzRTtBQUNBLFdBQU87QUFBQSxFQUNYO0FBQ0o7QUFxQk8sU0FBUyxPQUFVLGlCQUE2QztBQUNuRSxTQUFPLFNBQVVDLE1BQXVDLEtBQXVCO0FBQzNFLFVBQU0sWUFBWSxZQUFZLEdBQUc7QUFDakMsVUFBTSxPQUFzQixJQUFJO0FBQ2hDLFVBQU0sUUFBUyxLQUFLLGVBQWUsQ0FBQztBQUNwQyxRQUFJLGFBQWEsT0FBTztBQUNwQixZQUFNLEVBQUUsT0FBTyxLQUFLLElBQUksTUFBTSxTQUFTO0FBQ3ZDLFlBQU0sU0FBUyxJQUFJLEVBQUUsT0FBTyxRQUFRLFdBQVcsVUFBVSxLQUFLO0FBQUEsSUFDbEUsT0FBTztBQUNILFlBQU0sU0FBUyxJQUFJLEVBQUUsT0FBTyxXQUFXLFVBQVUsTUFBTSxnQkFBZ0I7QUFBQSxJQUMzRTtBQUNBLFdBQU9BO0FBQUEsRUFDWDtBQUNKO0FBd0RPLFNBQVMsVUFJVCxNQUlZO0FBQ2YsU0FBTyxTQUFVLFFBQVEsS0FBSztBQUMxQixRQUFJLElBQUksUUFBUyxPQUFNLE1BQU0sa0NBQWtDO0FBQy9ELFFBQUksSUFBSSxPQUFRLE9BQU0sTUFBTSxpQ0FBaUM7QUFFN0QsUUFBSSxPQUFPLElBQUksU0FBUyxVQUFVO0FBQzlCLFlBQU0sTUFBTSxxQ0FBcUM7QUFBQSxJQUNyRDtBQUVBLFVBQU1DLGNBQWEsU0FBUyxJQUFJLElBQUk7QUFDcEMsVUFBTSxPQUFzQixJQUFJO0FBQ2hDLFVBQU0sVUFBVyxLQUFLLFlBQVksQ0FBQztBQUVuQyxRQUFJLE1BQU0sUUFBUSxLQUFLLENBQUMsQ0FBQyxHQUFHO0FBQ3hCLFlBQU0sQ0FBQyxRQUFRLFlBQVksT0FBTyxJQUFJO0FBTXRDLGNBQVFBLFdBQVUsSUFBSTtBQUFBLFFBQ2xCO0FBQUEsUUFDQSxTQUFTLFNBQVMsV0FBVztBQUFBLFFBQzdCLGFBQWEsT0FBTyxJQUFJLENBQUMsTUFBTyxZQUFZLElBQUksRUFBRSxTQUFTLENBQUU7QUFBQSxRQUM3RCxHQUFJLGNBQWM7QUFBQSxVQUNkLGFBQWEsWUFBWSxhQUFhLFdBQVcsU0FBUztBQUFBLFFBQzlEO0FBQUEsUUFDQSxHQUFJLFNBQVMsU0FBUztBQUFBLFVBQ2xCLE9BQU8sUUFBUTtBQUFBLFFBQ25CO0FBQUEsUUFDQSxHQUFJLE9BQU8sU0FBUyxnQkFBZ0IsWUFBWTtBQUFBLFVBQzVDLGFBQWEsUUFBUTtBQUFBLFFBQ3pCO0FBQUEsTUFDSjtBQUFBLElBQ0osT0FBTztBQUNILFlBQU0sU0FBUztBQUNmLGNBQVFBLFdBQVUsSUFBSTtBQUFBLFFBQ2xCO0FBQUEsUUFDQSxTQUFTO0FBQUEsUUFDVCxhQUFhLE9BQU8sSUFBSSxDQUFDLE1BQU8sWUFBWSxJQUFJLEVBQUUsU0FBUyxDQUFFO0FBQUEsTUFDakU7QUFBQSxJQUNKO0FBRUEsV0FBTyxZQUFhLFFBQVE7QUFDeEIsYUFBTyxLQUFLLEtBQUtBLGFBQVksR0FBRyxNQUFNO0FBQUEsSUFDMUM7QUFBQSxFQUNKO0FBQ0o7QUFFQSxJQUFNLFNBQVMsS0FBSyxLQUFLO0FBQ3pCLElBQU0sU0FBUyxFQUFFLEtBQUs7QUFDdEIsSUFBTSxVQUFVLEtBQUssS0FBSztBQUMxQixJQUFNLFdBQVc7QUFDakIsSUFBTSxXQUFXO0FBQ2pCLElBQU0sV0FBVyxPQUFPO0FBQ3hCLElBQU0sV0FBVyxPQUFPO0FBRXhCLFNBQVMsZUFBZSxNQUFzQixNQUFjLE9BQW1CO0FBQzNFLFVBQVEsTUFBTTtBQUFBLElBQ1YsS0FBSyxRQUFRO0FBQ1QsYUFBTyxVQUFVLFFBQVEsTUFBTSxJQUFJLElBQUksT0FBTyxLQUFLO0FBQUEsSUFDdkQsS0FBSyxRQUFRO0FBQ1QsYUFBTyxVQUFVLE9BQU8sTUFBTSxJQUFJLElBQUksT0FBTyxFQUFFO0FBQUEsSUFDbkQsS0FBSyxRQUFRO0FBQ1QsYUFBTyxVQUFVLElBQUksTUFBTSxJQUFJLElBQUksT0FBTyxRQUFRLFFBQVEsQ0FBQztBQUFBLElBQy9ELEtBQUssUUFBUTtBQUNULGFBQU8sVUFBVSxLQUFLLE1BQU0sSUFBSSxJQUFJLE9BQU8sR0FBRyxTQUFTLENBQUM7QUFBQSxJQUM1RCxLQUFLLFFBQVE7QUFDVCxhQUFPLFVBQVUsTUFBTSxNQUFNLElBQUksSUFBSSxPQUFPLFVBQVUsVUFBVSxDQUFDO0FBQUEsSUFDckUsS0FBSyxRQUFRO0FBQ1QsYUFBTyxVQUFVLE9BQU8sTUFBTSxJQUFJLElBQUksT0FBTyxHQUFHLE9BQU8sa0JBQWtCLENBQUM7QUFBQSxJQUM5RSxLQUFLLFFBQVE7QUFDVCxhQUFPLFVBQVUsTUFBTSxNQUFNLElBQUksSUFBSSxPQUFPLFVBQVUsVUFBVSxDQUFDO0FBQUEsSUFDckUsS0FBSyxRQUFRO0FBQ1QsYUFBTyxVQUFVLE9BQU8sTUFBTSxJQUFJLElBQUksT0FBTyxPQUFPLFdBQVcsT0FBTyxXQUFXLENBQUM7QUFBQSxJQUN0RixLQUFLLFFBQVE7QUFDVCxhQUFPLFVBQVUsU0FBUyxNQUFNLElBQUksSUFBSSxLQUFLO0FBQUEsSUFDakQsS0FBSyxRQUFRO0FBQ1QsYUFBTyxVQUFVLE9BQU8sTUFBTSxJQUFJLElBQUksT0FBYyxLQUFLLE9BQU87QUFBQSxJQUVwRSxLQUFLLFFBQVE7QUFBQSxJQUNiLEtBQUssUUFBUTtBQUFBLElBQ2IsS0FBSyxRQUFRO0FBQUEsSUFDYixLQUFLLFFBQVE7QUFBQSxJQUNiLEtBQUssUUFBUTtBQUFBLElBQ2IsS0FBSyxRQUFRLGVBQWUsT0FBTztBQUMvQixZQUFNLE1BQU0sc0NBQXNDLElBQUksR0FBRztBQUFBLElBQzdELEtBQUssUUFBUTtBQUFBLElBQ2I7QUFDSSxhQUFPLFVBQVUsT0FBTyxNQUFNLElBQUksSUFBSSxPQUFjLElBQUk7QUFBQSxFQUNoRTtBQUNKO0FBRUEsU0FBUyxNQUFNLE1BQWMsT0FBbUIsYUFBK0M7QUFDM0YsTUFBSSx1QkFBdUIsVUFBVyxRQUFPO0FBRTdDLE1BQUksZ0JBQWdCLFVBQVUsZ0JBQWdCLFlBQVksZ0JBQWdCLE9BQU87QUFDN0UsV0FBTyxVQUFVLFNBQVMsTUFBTSxJQUFJLElBQUksS0FBSztBQUFBLEVBQ2pEO0FBRUEsTUFBSSxnQkFBZ0IsUUFBUTtBQUN4QixXQUFPLFVBQVUsT0FBTyxNQUFNLElBQUksSUFBSSxPQUFPLEVBQUU7QUFBQSxFQUNuRDtBQUVBLE1BQUksZ0JBQWdCLFFBQVE7QUFDeEIsV0FBTyxVQUFVLE9BQU8sTUFBTSxJQUFJLElBQUksT0FBTyxDQUFDLE9BQU8sV0FBVyxPQUFPLFdBQVcsQ0FBQztBQUFBLEVBQ3ZGO0FBRUEsTUFBSSxnQkFBZ0IsU0FBUztBQUN6QixXQUFPLFVBQVUsUUFBUSxNQUFNLElBQUksSUFBSSxPQUFPLEtBQUs7QUFBQSxFQUN2RDtBQUVBLE1BQUksWUFBWSxhQUFhO0FBQ3pCLFdBQU8sZUFBZSxZQUFZLFFBQVEsTUFBTSxLQUFLO0FBQUEsRUFDekQ7QUFFQSxNQUFJLE9BQU8sZ0JBQWdCLFlBQVk7QUFDbkMsV0FBTyxZQUFZLE1BQU0sS0FBSztBQUFBLEVBQ2xDO0FBRUEsUUFBTSxNQUFNLGlDQUFpQztBQUNqRDtBQWtCTyxTQUFTLFNBQW1ELFVBQW9CLENBQUMsR0FBRztBQUN2RixTQUFPLFNBQVUsS0FBVSxLQUFpQztBQUN4RCxVQUFNLElBQUksUUFBUTtBQUVsQixRQUFJLE9BQU8sTUFBTSxZQUFZLENBQUMsRUFBRSxXQUFXLGFBQWEsS0FBSyxDQUFDLEVBQUUsV0FBVyxTQUFTLEdBQUc7QUFDbkYsY0FBUSxXQUFXLElBQUksWUFBWSxFQUFFLE9BQU8sQ0FBQztBQUFBLElBQ2pEO0FBRUEsVUFBTSxPQUFPLElBQUk7QUFFakIsVUFBTSxRQUE0QztBQUFBLE1BQzlDLFFBQVEsS0FBSyxjQUFjLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLFdBQVcsRUFBRSxPQUFPLEtBQUssQ0FBQyxNQUFNO0FBQ2pFLGNBQU0sTUFBTSxTQUFTLFNBQVM7QUFDOUIsY0FBTSxPQUFPLE1BQU0sS0FBSyxPQUFPLElBQUk7QUFDbkMsZUFBTyxDQUFDLEtBQUssSUFBSTtBQUFBLE1BQ3JCLENBQUM7QUFBQSxJQUNMO0FBRUEsVUFBTSxVQUFVO0FBQUEsTUFDWixRQUFRLEtBQUssV0FBVyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQ0EsYUFBWSxFQUFFLFNBQVMsS0FBSyxRQUFRLEdBQUdDLFFBQU8sQ0FBQyxNQUFNO0FBQ25GLFlBQUksS0FBSztBQUNMLHlCQUFlLElBQUksV0FBVyxNQUFNRCxZQUFXLFdBQVcsS0FBSyxHQUFHLENBQUMsSUFBSTtBQUFBLFlBQ25FLFlBQVk7QUFBQSxZQUNaLGNBQWM7QUFBQSxZQUNkLE9BQU87QUFBQSxVQUNYLENBQUM7QUFBQSxRQUNMO0FBQ0EsZUFBTyxDQUFDQSxhQUFZQyxPQUFNO0FBQUEsTUFDOUIsQ0FBQztBQUFBLElBQ0w7QUFFQSxXQUFPLEtBQUs7QUFDWixXQUFPLEtBQUs7QUFFWixrQkFBYyxFQUFFLEdBQUcsU0FBUyxZQUFZLE9BQU8sU0FBUyxRQUFRLEdBQUcsR0FBRztBQUFBLEVBQzFFO0FBQ0o7QUE0Q0EsU0FBUyxTQUFTLE9BQU87QUFDekIsTUFBTSxTQUFTLE9BQU87QUFDdEIsS0FBSyxTQUFTLE9BQU87QUFDckIsSUFBSSxTQUFTLE9BQU87QUFDcEIsSUFBSSxTQUFTLE9BQU87OztBRTdlcEIsT0FBT0MsV0FBVTtBQUNqQixPQUFPLFNBQVM7QUFDaEIsT0FBTyxTQUFTO0FBQ2hCLE9BQU9DLFVBQVM7OztBQ0NoQixPQUFPLFNBQVM7QUFDaEIsT0FBT0MsV0FBVTtBQUNqQixPQUFPQyxjQUFhO0FBV3BCLElBQU0sa0JBQWtCO0FBRWpCLElBQU0sVUFBVUMsTUFBSztBQUc1QixJQUFNLE9BQU8sT0FBTyxxQkFBcUI7QUFDekMsSUFBTSxZQUFZLE9BQU8sMEJBQTBCO0FBQ25ELElBQU0sZUFBZSxPQUFPLG9CQUFvQjtBQUNoRCxJQUFNLG9CQUFvQixPQUFPLHlCQUF5QjtBQUMxRCxJQUFNLG9CQUFvQixPQUFPLHlCQUF5QjtBQTVCMUQ7QUFvQ08sSUFBTSxVQUFOLGNBQXNCQyxTQUFRLE9BQU87QUFBQSxFQW1CeEMsY0FBYztBQUNWLFVBQU07QUFiVixTQUFDLE1BS0c7QUFBQSxNQUNBLE1BQU0sQ0FBQztBQUFBLE1BQ1AsUUFBUSxvQkFBSSxJQUFnQjtBQUFBLElBQ2hDO0FBTUksVUFBTSxVQUFVLEtBQUs7QUFDckIsUUFBSSxDQUFDLFFBQVEsSUFBSSxFQUFHLE9BQU0sTUFBTSx3QkFBd0I7QUFDeEQsU0FBSyxRQUFRLFFBQVEsSUFBSTtBQUFBLEVBQzdCO0FBQUEsRUFyQkEsT0FBTztBQUNILElBQUFBLFNBQVEsY0FBYyxJQUFJO0FBQUEsRUFDOUI7QUFBQSxFQVlBO0FBQUEsRUFTQSxPQUFPLGNBQWlFO0FBQ3BFLFVBQU0sT0FBTyxLQUFLLE1BQU0sZ0JBQWdCLFlBQVk7QUFFcEQsUUFBSSxRQUFRLEtBQUssU0FBUyxFQUFFLFlBQVk7QUFDcEMsV0FBSyxTQUFTLEVBQUUsV0FBVztBQUFBLFFBQ3ZCO0FBQUEsUUFDQSxJQUFJRCxNQUFLLFFBQVEsS0FBSyxXQUFXLEtBQUssWUFBMEIsQ0FBQztBQUFBLE1BQ3JFO0FBQUEsSUFDSjtBQUVBLFVBQU0sT0FBTyxPQUFPLFNBQVMsWUFBWSxJQUFJLFlBQVk7QUFBQSxFQUM3RDtBQUFBLEVBRUEsS0FBSyxTQUFpQixRQUF5QjtBQUMzQyxVQUFNRSxVQUFTLEtBQUssTUFBTSxjQUFjLElBQUk7QUFFNUMsUUFBSUEsV0FBVSxLQUFLLFNBQVMsRUFBRSxZQUFZO0FBQ3RDLFlBQU0sWUFBWSxJQUFJQSxRQUFPLEtBQUssSUFBSSxDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUM7QUFDbEUsV0FBSyxTQUFTLEVBQUUsV0FBVyxZQUFZLE1BQU0sSUFBSUYsTUFBSyxRQUFRLFdBQVcsTUFBTSxDQUFDO0FBQUEsSUFDcEY7QUFFQSxXQUFPLE1BQU0sS0FBS0UsVUFBUyxTQUFTLElBQUksSUFBSSxNQUFNLEdBQUcsTUFBTTtBQUFBLEVBQy9EO0FBQUE7QUFBQSxFQUdBLG1CQUFtQixHQUEyQixjQUEyQztBQUNyRixVQUFNLE9BQU8sS0FBSyxNQUFNLGdCQUFnQixZQUFZO0FBRXBELFFBQUksQ0FBQyxNQUFNO0FBQ1AsWUFBTSxNQUFNLEdBQUcsS0FBSyxZQUFZLElBQUksK0JBQStCLFlBQVksR0FBRztBQUFBLElBQ3RGO0FBRUEsVUFBTSxRQUFRLEtBQUssWUFBWTtBQUMvQixRQUFJLE9BQU8sVUFBVSxhQUFhO0FBQzlCLGFBQU8sSUFBSUYsTUFBSyxRQUFRLEtBQUssV0FBVyxLQUFLO0FBQUEsSUFDakQsT0FBTztBQUNILGFBQU87QUFBQSxJQUNYO0FBQUEsRUFDSjtBQUFBO0FBQUEsRUFHQSxtQkFDSSxHQUNBLGNBQ0EsT0FDRjtBQUNFLFVBQU0sV0FBVyxNQUFNLFdBQVc7QUFDbEMsVUFBTSxPQUFPLEtBQUssTUFBTSxnQkFBZ0IsWUFBWTtBQUVwRCxRQUFJLENBQUMsTUFBTTtBQUNQLFlBQU0sTUFBTSxHQUFHLEtBQUssWUFBWSxJQUFJLHNCQUFzQixZQUFZLEdBQUc7QUFBQSxJQUM3RTtBQUVBLFFBQUksS0FBSyxZQUFZLE1BQU0sVUFBVTtBQUNqQyxXQUFLLFlBQVksSUFBSSxNQUFNLFdBQWdCO0FBQUEsSUFDL0M7QUFBQSxFQUNKO0FBQUE7QUFBQSxFQUdBLGFBQWEsT0FBZ0IsWUFBc0M7QUFDL0QsWUFBUSxNQUFNLEtBQUs7QUFDbkIsUUFBSSxpQkFBaUJBLE1BQUssT0FBTztBQUM3QixhQUFPLFdBQVcsY0FBYyxLQUFLO0FBQUEsSUFDekM7QUFDQSxRQUFJLGlCQUFpQixPQUFPO0FBQ3hCLGFBQU8sV0FBVztBQUFBLFFBQ2QsTUFBTSxLQUFLLFNBQVMsR0FBRyxJQUFJLE1BQU0sT0FBTyxlQUFlLE1BQU0sSUFBSTtBQUFBLFFBQ2pFLE1BQU07QUFBQSxNQUNWO0FBQUEsSUFDSjtBQUNBLGVBQVcsa0JBQWtCLGdDQUFnQyxHQUFHLEtBQUssRUFBRTtBQUFBLEVBQzNFO0FBQUE7QUFBQSxFQUdBLGFBQWEsT0FBZ0IsWUFBb0IsWUFBc0M7QUFDbkYsUUFBSSxVQUFVLFFBQVEsVUFBVSxRQUFXO0FBQ3ZDLGFBQU8sV0FBVyxhQUFhLElBQUlBLE1BQUssUUFBUSxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQUEsSUFDN0Q7QUFFQSxVQUFNLE9BQU8sS0FBSyxNQUFNLGNBQWMsVUFBVSxHQUFHLFlBQVksQ0FBQztBQUNoRSxVQUFNLFlBQVksSUFBSSxLQUFLLElBQUksQ0FBQyxRQUFRLElBQUksU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDO0FBQy9ELFFBQUksQ0FBQyxNQUFNLFFBQVEsS0FBSyxFQUFHLE9BQU0sTUFBTSx5QkFBeUI7QUFDaEUsZUFBVyxhQUFhLElBQUlBLE1BQUssUUFBUSxXQUFXLEtBQUssQ0FBQztBQUFBLEVBQzlEO0FBQUE7QUFBQSxFQUdBLGtCQUNJLEdBQ0EsWUFDQSxZQUNBLFlBQ0k7QUFDSixRQUFJO0FBQ0EsWUFBTSxRQUFTLEtBQUssVUFBVTtBQUFBLFFBQzFCLEdBQUcsV0FBVyxXQUEyQjtBQUFBLE1BQzdDO0FBRUEsVUFBSSxpQkFBaUJBLE1BQUssU0FBUztBQUMvQixtQkFBVyxhQUFhLEtBQUs7QUFBQSxNQUNqQyxXQUFXLGlCQUFpQixTQUFTO0FBQ2pDLGNBQ0ssS0FBSyxDQUFDRyxXQUFVLEtBQUssYUFBYUEsUUFBTyxZQUFZLFVBQVUsQ0FBQyxFQUNoRSxNQUFNLENBQUMsVUFBVSxLQUFLLGFBQWEsT0FBTyxVQUFVLENBQUM7QUFBQSxNQUM5RCxPQUFPO0FBQ0gsYUFBSyxhQUFhLE9BQU8sWUFBWSxVQUFVO0FBQUEsTUFDbkQ7QUFBQSxJQUNKLFNBQVMsT0FBTztBQUNaLFdBQUssYUFBYSxPQUFPLFVBQVU7QUFBQSxJQUN2QztBQUFBLEVBQ0o7QUFBQTtBQUFBLEVBR0EsTUFBTSxNQUFNO0FBQUEsSUFDUixVQUFVLElBQUksUUFBUTtBQUFBLElBQ3RCLE9BQU8sS0FBSyxNQUFNO0FBQUEsSUFDbEIsYUFBYSxNQUFNLEtBQUssTUFBTSxLQUFLLE1BQU0sR0FBRyxFQUFFLEtBQUssR0FBRztBQUFBLElBQ3RELFFBQVEsSUFBSSxrQkFBa0I7QUFBQSxJQUM5QixTQUFBQyxXQUFVO0FBQUEsRUFDZCxJQU1JLENBQUMsR0FBa0I7QUFDbkIsVUFBTSxPQUFPLElBQUksSUFBSTtBQUFBO0FBQUEsTUFFakIsRUFBRSxrQkFBa0IsS0FBSyxNQUFNO0FBQUEsSUFDbkM7QUFFQSxTQUFLLFFBQVEsc0JBQXNCLEtBQUssa0JBQWtCLEtBQUssSUFBSSxDQUFDO0FBQ3BFLFNBQUssUUFBUSx1QkFBdUIsS0FBSyxtQkFBbUIsS0FBSyxJQUFJLENBQUM7QUFDdEUsU0FBSyxRQUFRLHVCQUF1QixLQUFLLG1CQUFtQixLQUFLLElBQUksQ0FBQztBQUV0RSxTQUFLLE1BQU0sWUFBWTtBQUV2QixXQUFPLElBQUksUUFBUSxDQUFDLFNBQVMsV0FBVztBQUNwQyxVQUFJLFNBQ0FBLFdBQVUsSUFDSixXQUFXLE1BQU07QUFDYixlQUFPLE1BQU0saUJBQWlCLENBQUM7QUFDL0IsaUJBQVM7QUFBQSxNQUNiLEdBQUdBLFFBQU8sSUFDVjtBQUVWLFlBQU0sUUFBUSxNQUFNO0FBQ2hCLFlBQUksUUFBUTtBQUNSLHVCQUFhLE1BQU07QUFDbkIsbUJBQVM7QUFBQSxRQUNiO0FBQUEsTUFDSjtBQUVBLFlBQU0sUUFBUSxJQUFJO0FBQUEsUUFDZDtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQSxDQUFDLFNBQTZCO0FBQzFCLGNBQUk7QUFDQSxpQkFBSyxPQUFPLE1BQU0sVUFBVTtBQUM1QixpQkFBSyxTQUFTLEVBQUUsYUFBYTtBQUM3QixpQkFBSyxTQUFTLEVBQUUsT0FBTyxJQUFJLE1BQU07QUFDN0Isa0JBQUksZUFBZSxLQUFLO0FBQ3hCLG1CQUFLLFNBQVM7QUFDZCxtQkFBSyxNQUFNLGNBQWM7QUFDekIscUJBQU8sS0FBSyxTQUFTLEVBQUU7QUFBQSxZQUMzQixDQUFDO0FBRUQsb0JBQVEsSUFBSTtBQUFBLFVBQ2hCLFNBQVMsT0FBTztBQUNaLG1CQUFPLEtBQUs7QUFBQSxVQUNoQjtBQUFBLFFBQ0o7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLE1BQ0o7QUFBQSxJQUNKLENBQUM7QUFBQSxFQUNMO0FBQUE7QUFBQSxFQUdBLHlCQUNJLEdBQ0EsU0FDQSxhQUNGO0FBQ0UsVUFBTUMsT0FBTSxvQkFBSSxJQUFJLENBQUMsR0FBRyxPQUFPLEtBQUssUUFBUSxXQUFXLENBQUMsR0FBRyxHQUFHLFdBQVcsQ0FBQztBQUMxRSxlQUFXLFFBQVFBLEtBQUksT0FBTyxHQUFHO0FBQzdCLFdBQUssT0FBTyxJQUFtQztBQUFBLElBQ25EO0FBQUEsRUFDSjtBQUFBO0FBQUEsRUFHQSxjQUNJLEdBQ0EsU0FDQUgsU0FDQSxZQUNGO0FBQ0UsU0FBSyxLQUFLLFNBQVNBLE9BQU0sR0FBRyxHQUFHLFdBQVcsV0FBMkIsQ0FBQztBQUFBLEVBQzFFO0FBQUE7QUFBQSxFQUdBLG9CQUNJLFlBQ0EsTUFDc0M7QUFDdEMsVUFBTSxFQUFFLE1BQU0sSUFBSSxLQUFLLFNBQVM7QUFDaEMsUUFBSSxDQUFDLE1BQU8sT0FBTSxNQUFNLDhDQUE4QztBQUV0RSxVQUFNLFNBQVMsS0FBSyxNQUFNLGNBQWMsVUFBVTtBQUNsRCxRQUFJLENBQUMsT0FBUSxPQUFNLE1BQU0sa0JBQWtCO0FBRTNDLFVBQU0sWUFBWSxJQUFJLE9BQU8sUUFBUSxJQUFJLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQztBQUVyRSxXQUFPO0FBQUEsTUFDSDtBQUFBLE1BQ0EsSUFBSUYsTUFBSyxRQUFRLFdBQVcsSUFBSTtBQUFBLE1BQ2hDLElBQUksY0FBYztBQUFBLE1BQ2xCO0FBQUEsTUFDQTtBQUFBLElBQ0o7QUFBQSxFQUNKO0FBQUE7QUFBQSxFQUdBLEVBeFBRLE1BTVAsZ0JBa1BBLGFBQVksRUFBRSxZQUFvQixNQUErQjtBQUM5RCxVQUFNLFNBQVMsS0FBSyxvQkFBb0IsWUFBWSxJQUFJO0FBQ3hELFdBQU8sS0FBSyxTQUFTLEVBQUUsTUFBTyxVQUFVLEdBQUcsTUFBTTtBQUFBLEVBQ3JEO0FBQUE7QUFBQSxFQUdBLENBQUMsaUJBQWlCLEVBQUUsWUFBb0IsTUFBd0M7QUFDNUUsV0FBTyxJQUFJLFFBQVEsQ0FBQyxTQUFTLFdBQVc7QUFDcEMsVUFBSTtBQUNBLGNBQU0sU0FBUyxLQUFLLG9CQUFvQixZQUFZLElBQUk7QUFDeEQsYUFBSyxTQUFTLEVBQUUsTUFBTyxLQUFLLEdBQUcsUUFBUSxDQUFDLEdBQUcsUUFBUTtBQUMvQyxjQUFJO0FBQ0Esb0JBQVEsS0FBSyxTQUFTLEVBQUUsTUFBTyxZQUFZLEdBQUcsQ0FBQztBQUFBLFVBQ25ELFNBQVMsT0FBTztBQUNaLG1CQUFPLEtBQUs7QUFBQSxVQUNoQjtBQUFBLFFBQ0osQ0FBQztBQUFBLE1BQ0wsU0FBUyxPQUFPO0FBQ1osZUFBTyxLQUFLO0FBQUEsTUFDaEI7QUFBQSxJQUNKLENBQUM7QUFBQSxFQUNMO0FBQUE7QUFBQSxFQUdBLENBQUMsaUJBQWlCLEVBQUUsTUFBYyxPQUFnQjtBQUM5QyxVQUFNLFFBQVEsS0FBSyxTQUFTLEVBQUU7QUFDOUIsVUFBTSxPQUFPLEtBQUssTUFBTSxnQkFBZ0IsSUFBSTtBQUU1QyxVQUFNLFVBQVUsSUFBSUEsTUFBSyxRQUFRLEtBQUssV0FBVyxLQUFLO0FBQ3RELFVBQU0sb0JBQW9CLE1BQU0sT0FBTztBQUV2QyxVQUFNO0FBQUEsTUFDRjtBQUFBLE1BQ0EsSUFBSUEsTUFBSyxRQUFRLFNBQVMsQ0FBQyxNQUFNLGdCQUFnQixNQUFNLE9BQU8sQ0FBQztBQUFBLE1BQy9ELElBQUksY0FBYztBQUFBLE1BQ2xCO0FBQUEsTUFDQTtBQUFBLE1BQ0EsQ0FBQyxHQUFHLFFBQVE7QUFDUixZQUFJO0FBQ0EsZ0JBQU0sWUFBWSxHQUFHO0FBQUEsUUFDekIsU0FBUyxHQUFHO0FBQ1Isa0JBQVEsTUFBTSxDQUFDO0FBQUEsUUFDbkI7QUFBQSxNQUNKO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFBQTtBQUFBLEVBR0EsTUFBTSxNQUFNO0FBQUEsSUFDUixNQUFNLElBQUksS0FBSztBQUFBLElBQ2YsT0FBTyxLQUFLLE1BQU07QUFBQSxJQUNsQixhQUFhLE1BQU0sS0FBSyxNQUFNLEtBQUssTUFBTSxHQUFHLEVBQUUsS0FBSyxHQUFHO0FBQUEsSUFDdEQsUUFBUSxJQUFJLGVBQWU7QUFBQSxJQUMzQixTQUFBSSxXQUFVO0FBQUEsRUFDZCxJQU1JLENBQUMsR0FBa0I7QUFDbkIsVUFBTSxRQUFRLElBQUksSUFBSSxVQUFVO0FBQUEsTUFDNUIsYUFBYTtBQUFBLE1BQ2IsZ0JBQWdCLEtBQUssTUFBTTtBQUFBLE1BQzNCLGdCQUFnQixLQUFLO0FBQUEsTUFDckIsT0FBTztBQUFBLE1BQ1AsUUFBUTtBQUFBLE1BQ1IsYUFBYTtBQUFBLElBQ2pCLENBQUM7QUFFRCxXQUFPLElBQUksUUFBUSxDQUFDLFNBQVMsV0FBVztBQUNwQyxZQUFNLGNBQWMsSUFBSSxJQUFJLFlBQVk7QUFFeEMsVUFBSSxTQUNBQSxXQUFVLElBQ0osV0FBVyxNQUFNO0FBQ2IsZUFBTyxNQUFNLGlCQUFpQixDQUFDO0FBQy9CLGlCQUFTO0FBQ1Qsb0JBQVksT0FBTztBQUFBLE1BQ3ZCLEdBQUdBLFFBQU8sSUFDVjtBQUVWLFlBQU0sV0FBV0osTUFBSyxrQkFBa0IsYUFBYSxDQUFDLEdBQUcsUUFBUTtBQUM3RCxZQUFJO0FBQ0EsY0FBSSxRQUFRO0FBQ1IseUJBQWEsTUFBTTtBQUNuQixxQkFBUztBQUFBLFVBQ2I7QUFFQSxnQkFBTSxZQUFZLEdBQUc7QUFDckIsZUFBSyxTQUFTLEVBQUUsUUFBUTtBQUV4QixnQkFBTSxNQUFNO0FBQUEsWUFDUixNQUFNLFFBQVEsWUFBWSxLQUFLLGNBQWMsS0FBSyxJQUFJLENBQUM7QUFBQSxZQUN2RCxNQUFNO0FBQUEsY0FDRjtBQUFBLGNBQ0EsS0FBSyx5QkFBeUIsS0FBSyxJQUFJO0FBQUEsWUFDM0M7QUFBQSxVQUNKO0FBRUEsZUFBSyxTQUFTLEVBQUUsT0FBTyxJQUFJLE1BQU07QUFDN0IsZ0JBQUksUUFBUSxDQUFDLE9BQU8sTUFBTSxXQUFXLEVBQUUsQ0FBQztBQUN4QyxtQkFBTyxLQUFLLFNBQVMsRUFBRTtBQUFBLFVBQzNCLENBQUM7QUFFRCxrQkFBUSxJQUFJO0FBQUEsUUFDaEIsU0FBUyxPQUFPO0FBQ1osaUJBQU8sS0FBSztBQUFBLFFBQ2hCO0FBQUEsTUFDSixDQUFDO0FBQUEsSUFDTCxDQUFDO0FBQUEsRUFDTDtBQUFBLEVBRUEsT0FBTztBQUNILFVBQU0sRUFBRSxPQUFPLElBQUksS0FBSyxTQUFTO0FBQ2pDLGVBQVcsTUFBTSxPQUFPLE9BQU8sR0FBRztBQUM5QixhQUFPLE9BQU8sRUFBRTtBQUNoQixTQUFHO0FBQUEsSUFDUDtBQUFBLEVBQ0o7QUFDSjtBQW1DTyxTQUFTLE1BQU0sTUFBYyxTQUEwQztBQUMxRSxTQUFPLFNBQVUsS0FBd0MsS0FBNEI7QUFDakYsVUFBTSxPQUFPLElBQUk7QUFDakIsUUFBSSxDQUFDLEtBQU0sT0FBTSxNQUFNLEdBQUcsSUFBSSxJQUFJLHNCQUFzQjtBQUV4RCxVQUFNLEVBQUUsY0FBYyxDQUFDLEdBQUcsY0FBYyxDQUFDLEdBQUcsaUJBQWlCLENBQUMsRUFBRSxJQUFJO0FBRXBFLFVBQU0sVUFBVSxJQUFJO0FBQUEsTUFDaEIsTUFBTTtBQUFBLE1BQ04sVUFBVTtBQUFBLFFBQ047QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLFlBQVksRUFBRSxLQUFLO0FBQUEsVUFDbkIsVUFBVTtBQUFBLFlBQ04sR0FBRyxPQUFPLFFBQVEsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDTSxPQUFNLElBQUksT0FBTztBQUFBLGNBQ2xELE1BQU07QUFBQSxjQUNOLFlBQVksRUFBRSxNQUFBQSxNQUFLO0FBQUEsY0FDbkIsVUFBVSxLQUFLLElBQUksQ0FBQyxTQUFTLEVBQUUsTUFBTSxPQUFPLFlBQVksSUFBSSxFQUFFO0FBQUEsWUFDbEUsRUFBRTtBQUFBLFlBQ0YsR0FBRyxPQUFPLFFBQVEsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDQSxPQUFNLElBQUksT0FBTztBQUFBLGNBQ2xELE1BQU07QUFBQSxjQUNOLFlBQVksRUFBRSxNQUFBQSxNQUFLO0FBQUEsY0FDbkIsVUFBVSxLQUFLLElBQUksQ0FBQyxTQUFTLEVBQUUsTUFBTSxPQUFPLFlBQVksSUFBSSxFQUFFO0FBQUEsWUFDbEUsRUFBRTtBQUFBLFlBQ0YsR0FBRyxPQUFPLE9BQU8sY0FBYyxFQUFFLElBQUksQ0FBQyxFQUFFLE1BQUFBLE9BQU0sTUFBTSxNQUFNLE1BQU0sT0FBTztBQUFBLGNBQ25FLE1BQU07QUFBQSxjQUNOLFlBQVk7QUFBQSxnQkFDUixHQUFJQSxTQUFRLEVBQUUsTUFBQUEsTUFBSztBQUFBLGdCQUNuQjtBQUFBLGdCQUNBLFNBQVMsT0FBTyxTQUFTLE9BQU8sUUFBUSxVQUFVO0FBQUEsY0FDdEQ7QUFBQSxZQUNKLEVBQUU7QUFBQSxVQUNOO0FBQUEsUUFDSjtBQUFBLE1BQ0o7QUFBQSxJQUNKLENBQUM7QUFFRCxXQUFPLE9BQU8sS0FBSyxFQUFFLENBQUMsSUFBSSxHQUFHLElBQUksa0JBQWtCLFlBQVksT0FBTyxFQUFFLENBQUM7QUFDekUsYUFBUyxPQUFPLEVBQUUsS0FBSyxHQUFHO0FBQUEsRUFDOUI7QUFDSjtBQWNBLFNBQVMsY0FDTCxNQUNBLFFBQ0EsS0FDRjtBQUNFLFFBQU0sT0FBTyxJQUFJO0FBQ2pCLFFBQU0sT0FBTyxJQUFJO0FBQ2pCLFFBQU0sVUFBVyxLQUFLLGdCQUFnQixDQUFDO0FBRXZDLE1BQUksT0FBTyxTQUFTLFVBQVU7QUFDMUIsVUFBTSxNQUFNLHVDQUF1QztBQUFBLEVBQ3ZEO0FBRUEsUUFBTSxDQUFDLFFBQVEsVUFBVSxDQUFDLENBQUMsSUFBSyxNQUFNLFFBQVEsS0FBSyxDQUFDLENBQUMsSUFBSSxPQUFPLENBQUMsSUFBSTtBQUVyRSxVQUFRLElBQUksSUFBSTtBQUFBLElBQ1osR0FBRyxPQUFPLElBQUksQ0FBQyxTQUFTO0FBQUEsTUFDcEIsV0FBVztBQUFBLE1BQ1gsR0FBSSxPQUFPLFFBQVEsV0FBVyxFQUFFLE1BQU0sSUFBSSxJQUFJO0FBQUEsSUFDbEQsRUFBRTtBQUFBLElBQ0YsR0FBRyxRQUFRLElBQUksQ0FBQyxTQUFTO0FBQUEsTUFDckIsV0FBVztBQUFBLE1BQ1gsR0FBSSxPQUFPLFFBQVEsV0FBVyxFQUFFLE1BQU0sSUFBSSxJQUFJO0FBQUEsSUFDbEQsRUFBRTtBQUFBLEVBQ047QUFFQSxTQUFPO0FBQ1g7QUEyS08sU0FBUyxlQUdYLE1BQW9EO0FBQ3JELFNBQU8sU0FDSCxRQUlBLEtBQ21FO0FBQ25FLFVBQU0sT0FBTyxjQUFjLE1BQU0sUUFBUSxHQUFHO0FBRTVDLFdBQU8sa0JBQW1CQyxPQUFNO0FBQzVCLFVBQUksS0FBSyxTQUFTLEVBQUUsT0FBTztBQUN2QixjQUFNLFFBQVEsTUFBTSxLQUFLLGlCQUFpQixFQUFFLE1BQU1BLEtBQUk7QUFDdEQsZUFBTyxNQUFNLFdBQXVDO0FBQUEsTUFDeEQsT0FBTztBQUNILGVBQU8sT0FBTyxNQUFNLE1BQU1BLEtBQUk7QUFBQSxNQUNsQztBQUFBLElBQ0o7QUFBQSxFQUNKO0FBQ0o7OztBQzFzQkEsZ0VBQUFDLEtBQUE7QUFTQSx1QkFBQyxNQUFNLHNCQUFzQjtBQUN0QixJQUFNLFdBQU4sTUFBTSxrQkFBZ0JBLE1BQUEsU0FHekIsa0JBQUMsWUFBWSxJQUtiLHFCQUFDLFlBQVksR0FBRyxJQUtoQixhQUFDLFlBQVksSUFLYixnQkFBQyxZQUFZLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLElBbEJEQSxLQUFRO0FBQUEsRUF1QmpDLFlBQVksTUFBbUI7QUFDM0IsVUFBTTtBQXhCUDtBQUNILFNBQVEsT0FBUjtBQXdCSSxTQUFLLE9BQU87QUFBQSxFQUNoQjtBQUFBLEVBdEJBLE1BQU0sWUFBMkI7QUFDN0IsV0FBTyxRQUFRLFFBQVEsS0FBSyxLQUFLLFNBQVMsQ0FBQztBQUFBLEVBQy9DO0FBQUEsRUFHQSxNQUFNLGFBQWEsTUFBNkI7QUFDNUMsV0FBTyxRQUFRLFFBQVEsS0FBSyxLQUFLLGFBQWEsSUFBSSxDQUFDO0FBQUEsRUFDdkQ7QUFBQSxFQUdBLE1BQU0sT0FBc0I7QUFDeEIsV0FBTyxRQUFRLFFBQVEsS0FBSyxLQUFLLEtBQUssQ0FBQztBQUFBLEVBQzNDO0FBQUEsRUFHQSxNQUFNLFFBQVEsTUFBbUM7QUFDN0MsV0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUM7QUFBQSxFQUN0RDtBQUFBLEVBT0EsT0FBTyxNQUFNLGNBQXNCO0FBQy9CLFVBQU1DLE9BQU0sSUFBSSxTQUFRO0FBQUEsTUFDcEIsV0FBVztBQUFBLE1BQUM7QUFBQSxNQUNaLGVBQWU7QUFBQSxNQUFDO0FBQUEsTUFDaEIsT0FBTztBQUFBLE1BQUM7QUFBQSxNQUNSLFNBQVMsTUFBTSxRQUFRLE9BQU87QUFBQSxJQUNsQyxDQUFDO0FBRUQsV0FBT0EsS0FBSSxNQUFNO0FBQUEsTUFDYixNQUFNLGNBQWM7QUFBQSxJQUN4QixDQUFDO0FBQUEsRUFDTDtBQUNKO0FBeENPLHlCQUFBRDtBQUlILDRCQUFNLGFBRE4sZ0JBSFM7QUFTVCw0QkFBTSxnQkFETixtQkFSUztBQWNULDRCQUFNLFFBRE4sV0FiUztBQW1CVCw0QkFBTSxXQUROLGNBbEJTO0FBQUEsV0FBTix1Q0FEUCxxQkFDYTtBQUFOLDRCQUFNO0FBQU4sSUFBTSxVQUFOOzs7QUZGUCxTQUFTLDJCQUEyQjtBQUNwQyxTQUFTLE1BQU0sbUJBQW1COzs7QUdUbEMsT0FBT0UsY0FBYTs7O0FDQXBCLE9BQU9DLGNBQWE7QUFBcEIsSUFBQUMsS0FBQTtBQU9PLElBQU0sV0FBTixNQUFNLGtCQUEwQkQsU0FBUSxPQUFPO0FBQUEsRUFHbEQ7QUFBQSxTQUFRLE1BQW1CO0FBQUEsTUFDdkIsUUFBUSxFQUFFLGFBQWEsQ0FBQ0EsU0FBUSxXQUFXLEVBQUU7QUFBQSxNQUM3QyxRQUFRLEVBQUUsYUFBYSxDQUFDQSxTQUFRLFdBQVcsRUFBRTtBQUFBLElBQ2pEO0FBQUE7QUFBQSxFQUVBO0FBQUEsU0FBUUMsT0FBc0I7QUFBQSxNQUMxQixVQUFVRCxTQUFRLFVBQVUsU0FBUyxZQUFZLElBQUksSUFBSUEsU0FBUSxXQUFXLFFBQVE7QUFBQSxJQUN4RjtBQUFBO0FBQUEsRUFFQSxPQUFPO0FBQ0gsSUFBQUEsU0FBUSxjQUFjLElBQUk7QUFBQSxFQUM5QjtBQUFBLEVBRUEsR0FiUSxLQUFBQSxTQUFRLFNBS1JDLE1BQUFELFNBQVEsWUFRZCxPQUFPLFNBQVEsSUFBSTtBQUNqQixXQUFPLEtBQUs7QUFBQSxFQUNoQjtBQUFBLEVBSUEsT0FBTyxPQUFnQjtBQUNuQixRQUFJLGlCQUFpQixXQUFVO0FBQzNCLFlBQU0sTUFBTSx5Q0FBeUM7QUFBQSxJQUN6RDtBQUVBLFNBQUssVUFBVSxLQUFLLEtBQUs7QUFDekIsU0FBSyxLQUFLLFVBQVUsS0FBSztBQUN6QixTQUFLLE9BQU8sVUFBVTtBQUFBLEVBQzFCO0FBQUEsRUFFQSxPQUFPLE9BQWdCO0FBQ25CLFVBQU0sUUFBUSxLQUFLLFVBQVUsVUFBVSxDQUFDLE1BQU0sTUFBTSxLQUFLO0FBQ3pELFNBQUssVUFBVSxPQUFPLE9BQU8sQ0FBQztBQUU5QixTQUFLLEtBQUssVUFBVSxLQUFLO0FBQ3pCLFNBQUssT0FBTyxVQUFVO0FBQUEsRUFDMUI7QUFBQSxFQUVBLFlBQVksRUFBRSxXQUFXLENBQUMsRUFBRSxJQUF5QyxDQUFDLEdBQUc7QUFDckUsVUFBTTtBQUNOLFNBQUssWUFBWSxNQUFNLFFBQVEsUUFBUSxJQUFJLFdBQVcsQ0FBQyxRQUFRO0FBQUEsRUFDbkU7QUFBQSxFQUVBLFFBQ0lFLFNBQ0EsVUFDTTtBQUNOLFdBQU8sTUFBTSxRQUFRQSxTQUFRLFFBQVE7QUFBQSxFQUN6QztBQUNKOzs7QUMxREEsT0FBT0MsY0FBYTtBQUNwQixPQUFPQyxVQUFTO0FBQ2hCLE9BQU9DLFdBQVU7QUFVakIsSUFBTSxRQUFRLE9BQU8sc0JBQXNCO0FBR3BDLElBQU0sV0FBTixNQUFNLGtCQUE4QixTQUFTO0FBQUEsRUFDaEQ7QUFBQSxTQUFPLFNBQVNDLFNBQVE7QUFBQTtBQUFBLEVBRXhCO0FBQUEsRUFDQTtBQUFBLEVBRUEsWUFBWSxLQUFjLFdBQStCO0FBQ3JELFVBQU0sa0VBQWtFO0FBQ3hFLFNBQUssYUFBYSxjQUFjLE1BQU0sTUFBTTtBQUM1QyxTQUFLLE9BQU87QUFBQSxFQUNoQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLFVBQVUsVUFBOEM7QUFDcEQsV0FBTyxLQUFLLFdBQVcsUUFBUTtBQUFBLEVBQ25DO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLQSxNQUFTO0FBQ0wsV0FBTyxLQUFLLEtBQUs7QUFBQSxFQUNyQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxHQUFVLFdBQXlDO0FBQy9DLFdBQU8sSUFBSSxVQUFTLE1BQU0sVUFBVSxLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssVUFBVTtBQUFBLEVBQ3JFO0FBQUEsRUFFVSxNQUFhLFdBQXlDO0FBQzVELFFBQUksUUFBMEI7QUFDOUIsUUFBSTtBQUVKLFVBQU0sY0FBYyxvQkFBSSxJQUF1QjtBQUUvQyxVQUFNLFlBQStCLENBQUMsYUFBYTtBQUMvQyxVQUFJLFlBQVksU0FBUyxHQUFHO0FBQ3hCLGdCQUFRLEtBQUssVUFBVSxNQUFNO0FBQ3pCLGdCQUFNLFdBQVcsVUFBVSxLQUFLLElBQUksQ0FBQztBQUNyQyxjQUFJLFVBQVUsVUFBVTtBQUNwQixvQkFBUTtBQUNSLGtCQUFNLEtBQUssV0FBVyxFQUFFLFFBQVEsQ0FBQyxPQUFPLEdBQUcsQ0FBQztBQUFBLFVBQ2hEO0FBQUEsUUFDSixDQUFDO0FBQUEsTUFDTDtBQUVBLGtCQUFZLElBQUksUUFBUTtBQUV4QixhQUFPLE1BQU07QUFDVCxvQkFBWSxPQUFPLFFBQVE7QUFDM0IsWUFBSSxZQUFZLFNBQVMsR0FBRztBQUN4QixrQkFBUTtBQUNSLGdCQUFNO0FBQUEsUUFDVjtBQUFBLE1BQ0o7QUFBQSxJQUNKO0FBRUEsVUFBTSxNQUFNLE1BQVM7QUFDakIsYUFBTyxVQUFVLFFBQVEsUUFBUSxVQUFVLEtBQUssSUFBSSxDQUFDO0FBQUEsSUFDekQ7QUFFQSxXQUFPLElBQUksVUFBUyxLQUFLLFNBQVM7QUFBQSxFQUN0QztBQUFBLEVBRUEsV0FBbUI7QUFDZixXQUFPLFlBQVksS0FBSyxJQUFJLENBQUM7QUFBQSxFQUNqQztBQUFBLEVBRUEsQ0FBQyxPQUFPLFdBQVcsSUFBSTtBQUNuQixZQUFRLEtBQUsscURBQXFEO0FBQ2xFLFdBQU8sS0FBSyxTQUFTO0FBQUEsRUFDekI7QUFDSjtBQXdCTyxTQUFTLFlBQWUsTUFBbUI7QUFDOUMsTUFBSSxlQUFlO0FBQ25CLFFBQU0sY0FBYyxvQkFBSSxJQUF1QjtBQUUvQyxRQUFNLFlBQStCLENBQUMsYUFBYTtBQUMvQyxnQkFBWSxJQUFJLFFBQVE7QUFDeEIsV0FBTyxNQUFNLFlBQVksT0FBTyxRQUFRO0FBQUEsRUFDNUM7QUFFQSxRQUFNQyxPQUFNLENBQUMsYUFBc0I7QUFDL0IsVUFBTSxRQUFXLE9BQU8sYUFBYSxhQUFhLFNBQVMsWUFBWSxJQUFJO0FBQzNFLFFBQUksaUJBQWlCLE9BQU87QUFDeEIscUJBQWU7QUFFZixZQUFNLEtBQUssV0FBVyxFQUFFLFFBQVEsQ0FBQyxPQUFPLEdBQUcsQ0FBQztBQUFBLElBQ2hEO0FBQUEsRUFDSjtBQUVBLFNBQU8sQ0FBQyxJQUFJLFNBQVMsTUFBTSxjQUFjLFNBQVMsR0FBR0EsSUFBZ0I7QUFDekU7QUF3Tk8sU0FBUyxjQUFpQixRQUF1QyxLQUEwQjtBQUM5RixRQUFNLE9BQU8sU0FBUyxHQUFHO0FBRXpCLFFBQU0sWUFBK0IsQ0FBQyxhQUFhO0FBQy9DLFVBQU0sTUFBTSxrQkFBa0JDLEtBQUksV0FBVyxZQUFZO0FBQ3pELFVBQU0sS0FBSyxPQUFPLFFBQVEsR0FBRyxHQUFHLEtBQUssSUFBSSxJQUFJLE1BQU0sU0FBUyxDQUFDO0FBQzdELFdBQU8sTUFBTSxPQUFPLFdBQVcsRUFBRTtBQUFBLEVBQ3JDO0FBRUEsUUFBTSxNQUFNLE1BQVM7QUFDakIsUUFBSSxrQkFBa0JBLEtBQUksVUFBVTtBQUNoQyxhQUFPLE9BQU8sVUFBVSxHQUFHLEVBQUUsZ0JBQWdCO0FBQUEsSUFDakQ7QUFFQSxRQUFJLGtCQUFrQkMsU0FBUSxRQUFRO0FBQ2xDLFlBQU1DLFVBQVMsT0FBTyxLQUFLLFdBQVcsS0FBSyxHQUFHLENBQUM7QUFFL0MsVUFBSUEsV0FBVSxVQUFVLE9BQU8sT0FBT0EsT0FBTSxNQUFNLFlBQVk7QUFDMUQsZUFBUSxPQUFPQSxPQUFNLEVBQW9CO0FBQUEsTUFDN0M7QUFFQSxVQUFJLFFBQVEsT0FBUSxRQUFPLE9BQU8sSUFBSTtBQUN0QyxVQUFJLE9BQU8sT0FBUSxRQUFPLE9BQU8sR0FBMEI7QUFBQSxJQUMvRDtBQUVBLFVBQU0sTUFBTSx3QkFBd0IsR0FBRyxTQUFTLE1BQU0sR0FBRztBQUFBLEVBQzdEO0FBRUEsU0FBTyxJQUFJLFNBQVMsS0FBSyxTQUFTO0FBQ3RDOzs7QUNyWE8sU0FBUyxTQUFTLE1BQXVCO0FBQzVDLFNBQU8sT0FBTyxPQUFPLEtBQUssSUFBSTtBQUNsQztBQWVBLFNBQVMsY0FBbUI7QUFDeEIsUUFBTSxNQUFNLGNBQWM7QUFDOUI7QUFFTyxJQUFNLE1BQWM7QUFBQSxFQUN2QixtQkFBbUIsQ0FBQztBQUFBLEVBQ3BCLFVBQVU7QUFBQSxFQUNWLGFBQWE7QUFBQSxFQUNiLGFBQWE7QUFBQSxFQUNiLFFBQVE7QUFBQSxFQUNSLFVBQVU7QUFBQSxFQUNWLFdBQVcsTUFBTTtBQUFBLEVBQ2pCLGdCQUFnQixNQUFNO0FBQzFCOzs7QUN2Q08sSUFBTSxRQUFOLE1BQU0sT0FBTTtBQUFBLEVBVWYsWUFBWSxRQUF1QjtBQU5uQyxvQkFBVyxvQkFBSSxJQUFzQjtBQUVyQyxTQUFRLFdBQVcsb0JBQUksSUFBZ0I7QUFDdkMsU0FBUSxTQUFTLG9CQUFJLElBQWdCO0FBQ3JDLFNBQVEsVUFBVTtBQUdkLFNBQUssU0FBUztBQUFBLEVBQ2xCO0FBQUEsRUFFQSxVQUFVLFVBQXNCO0FBQzVCLFNBQUssVUFBVSxJQUFJLFFBQVE7QUFBQSxFQUMvQjtBQUFBLEVBRUEsUUFBUSxVQUFzQjtBQUMxQixRQUFJLEtBQUssVUFBVSxDQUFDLEtBQUssT0FBTyxTQUFTO0FBQ3JDLFdBQUssT0FBTyxRQUFRLFFBQVE7QUFBQSxJQUNoQyxPQUFPO0FBQ0gsV0FBSyxPQUFPLElBQUksUUFBUTtBQUFBLElBQzVCO0FBQUEsRUFDSjtBQUFBLEVBRUEsSUFBTyxJQUFhO0FBQ2hCLFVBQU0sT0FBTyxPQUFNO0FBQ25CLFdBQU0sVUFBVTtBQUVoQixRQUFJO0FBQ0EsYUFBTyxHQUFHO0FBQUEsSUFDZCxVQUFFO0FBQ0UsV0FBSyxPQUFPLFFBQVEsQ0FBQyxPQUFPLEdBQUcsQ0FBQztBQUNoQyxXQUFLLE9BQU8sTUFBTTtBQUNsQixXQUFLLFVBQVU7QUFDZixhQUFNLFVBQVU7QUFBQSxJQUNwQjtBQUFBLEVBQ0o7QUFBQSxFQUVBLFVBQVU7QUFDTixTQUFLLFNBQVMsUUFBUSxDQUFDLE9BQU8sR0FBRyxDQUFDO0FBQ2xDLFNBQUssU0FBUyxNQUFNO0FBQ3BCLFNBQUssU0FBUyxNQUFNO0FBQ3BCLFdBQU8sS0FBSztBQUFBLEVBQ2hCO0FBQ0o7QUE2RU8sU0FBUyxXQUFrQjtBQUM5QixRQUFNLFFBQVEsTUFBTTtBQUNwQixNQUFJLENBQUMsT0FBTztBQUNSLFVBQU0sTUFBTSwyQ0FBMkM7QUFBQSxFQUMzRDtBQUVBLFNBQU87QUFDWDtBQUtPLFNBQVMsVUFBVSxTQUFxQjtBQUMzQyxNQUFJLENBQUMsTUFBTSxTQUFTO0FBQ2hCLFlBQVEsTUFBTSxNQUFNLHNEQUFzRCxDQUFDO0FBQUEsRUFDL0U7QUFFQSxRQUFNLFNBQVMsVUFBVSxPQUFPO0FBQ3BDO0FBd0NPLFNBQVMsV0FBYyxJQUFnQztBQUMxRCxRQUFNLFFBQVEsSUFBSSxNQUFNLElBQUk7QUFDNUIsU0FBTyxNQUFNLElBQUksTUFBTSxHQUFHLE1BQU0sTUFBTSxRQUFRLENBQUMsQ0FBQztBQUNwRDs7O0FKcktPLElBQU0sVUFBVSxPQUFPLGtCQUFrQjtBQWV6QyxJQUFNLGNBQWMsT0FBTyxzQkFBc0I7QUFlakQsSUFBTSxjQUFjLE9BQU8sdUJBQXVCO0FBS2xELFNBQVMsUUFBUSxRQUF3QjtBQUM1QyxTQUFPLFdBQVcsU0FBVSxPQUFPLE9BQU8sSUFBZTtBQUM3RDtBQXlFQSxTQUFTLGNBQWMsTUFBdUI7QUFDMUMsU0FBTyxLQUFLLHFCQUFxQkMsU0FBUTtBQUM3QztBQUVBLFNBQVMsZUFBZSxNQUF1QjtBQUMzQyxTQUFPLE9BQU8sU0FBUyxjQUFjLENBQUMsY0FBYyxJQUFJO0FBQzVEO0FBSU8sU0FBUyxXQUFXLEtBQXFCO0FBQzVDLFFBQU0sQ0FBQyxLQUFLLE1BQU0sSUFBSSxTQUFTLElBQUksTUFBTSxDQUFDLENBQUMsRUFBRSxNQUFNLEdBQUc7QUFFdEQsTUFBSSxJQUFJLFdBQVcsU0FBUyxHQUFHO0FBQzNCLFdBQU8sV0FBVyxJQUFJLE1BQU0sQ0FBQyxDQUFDO0FBQUEsRUFDbEM7QUFFQSxTQUFPLFNBQVMsR0FBRyxHQUFHLEtBQUssTUFBTSxLQUFLO0FBQzFDO0FBRU8sU0FBUyxPQUFPLFFBQXdCLE9BQXVCO0FBQ2xFLE1BQUksa0JBQWtCLFVBQVU7QUFDNUIsV0FBTyxPQUFPLEtBQUs7QUFDbkI7QUFBQSxFQUNKO0FBRUEsTUFBSSxlQUFlLFVBQVUsT0FBTyxPQUFPLFdBQVcsTUFBTSxZQUFZO0FBQ3BFLFdBQU8sV0FBVyxFQUFFLEtBQUs7QUFDekI7QUFBQSxFQUNKO0FBRUEsTUFBSSxZQUFZLFFBQVEsS0FBSztBQUNqQztBQUVPLFNBQVMsT0FBTyxRQUF3QixPQUF1QjtBQUNsRSxNQUFJLGtCQUFrQixVQUFVO0FBQzVCLFdBQU8sT0FBTyxLQUFLO0FBQ25CO0FBQUEsRUFDSjtBQUVBLE1BQUksaUJBQWlCLFVBQVU7QUFDM0IsZUFBVyxNQUFNLE9BQU87QUFDcEIsYUFBTyxRQUFRLEVBQUU7QUFBQSxJQUNyQjtBQUVBLFVBQU0sZ0JBQWdCLE1BQU0sUUFBUSxVQUFVLENBQUMsR0FBRyxPQUFPO0FBQ3JELFVBQUksRUFBRSxjQUFjQSxTQUFRLFNBQVM7QUFDakMsZUFBTyxRQUFRLE1BQU0sVUFBVSxjQUFjLEVBQUUsT0FBTyxNQUFNLEVBQUUsQ0FBQztBQUFBLE1BQ25FO0FBQ0EsYUFBTyxRQUFRLEVBQUU7QUFBQSxJQUNyQixDQUFDO0FBRUQsVUFBTSxnQkFBZ0IsTUFBTSxRQUFRLFVBQVUsQ0FBQyxHQUFHLE9BQU87QUFDckQsVUFBSSxFQUFFLGNBQWNBLFNBQVEsU0FBUztBQUNqQyxlQUFPLFFBQVEsTUFBTSxVQUFVLGlCQUFpQixFQUFFLFNBQVMsTUFBTSxFQUFFLENBQUM7QUFBQSxNQUN4RTtBQUNBLGFBQU8sUUFBUSxFQUFFO0FBQUEsSUFDckIsQ0FBQztBQUVELGNBQVUsTUFBTTtBQUNaLFlBQU0sV0FBVyxhQUFhO0FBQzlCLFlBQU0sV0FBVyxhQUFhO0FBQUEsSUFDbEMsQ0FBQztBQUVEO0FBQUEsRUFDSjtBQUVBLE1BQUksZUFBZSxVQUFVLE9BQU8sT0FBTyxXQUFXLE1BQU0sWUFBWTtBQUNwRSxXQUFPLFdBQVcsRUFBRSxPQUFPLFFBQVEsS0FBSyxDQUFDO0FBQ3pDO0FBQUEsRUFDSjtBQUVBLE1BQUksWUFBWSxRQUFRLEtBQUs7QUFDakM7QUFHTyxTQUFTLFFBQVEsUUFBZ0IsTUFBYztBQUNsRCxNQUFJLFdBQVcsVUFBVSxPQUFPLE9BQU8sTUFBTSxJQUFJO0FBQzdDLFlBQVEsS0FBSyx1QkFBdUIsT0FBTyxPQUFPLENBQUMsT0FBTyxJQUFJLE9BQU8sTUFBTSxFQUFFO0FBQUEsRUFDakY7QUFFQSxTQUFPLE9BQU8sUUFBUSxFQUFFLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUM3QztBQVlPLFNBQVMsSUFDWixNQUNBLFNBRUEsS0FDQztBQUNELFFBQU0sRUFBRSxHQUFHLE9BQU8sY0FBYyxVQUFVLEdBQUcsS0FBSyxJQUFJO0FBQ3RELFFBQU0sUUFBUTtBQUVkLE1BQUksSUFBSyxRQUFPLE9BQU8sT0FBTyxFQUFFLElBQUksQ0FBQztBQUVyQyxRQUFNLGFBQWEsSUFBSSxVQUFVLE1BQU0sS0FBSyxLQUFLLENBQUM7QUFDbEQsUUFBTSxnQkFBeUMsQ0FBQztBQUVoRCxhQUFXLENBQUNDLE1BQUssS0FBSyxLQUFLLE9BQU8sUUFBUSxLQUFLLEdBQUc7QUFDOUMsUUFBSSxVQUFVLFFBQVc7QUFDckIsYUFBTyxNQUFNQSxJQUFHO0FBQUEsSUFDcEI7QUFFQSxRQUFJLFdBQVcsU0FBU0EsSUFBRyxHQUFHO0FBQzFCLG9CQUFjQSxJQUFHLElBQUksTUFBTUEsSUFBRztBQUM5QixhQUFPLE1BQU1BLElBQUc7QUFBQSxJQUNwQjtBQUFBLEVBQ0o7QUFFQSxNQUFJLE9BQU8sU0FBUyxVQUFVO0FBQzFCLFFBQUksUUFBUSxJQUFJLG1CQUFtQjtBQUMvQixhQUFPLElBQUksa0JBQWtCLElBQUk7QUFBQSxJQUNyQyxPQUFPO0FBQ0gsWUFBTSxNQUFNLDhCQUE4QixJQUFJLEdBQUc7QUFBQSxJQUNyRDtBQUFBLEVBQ0o7QUFFQSxNQUFJLGVBQWUsSUFBSSxHQUFHO0FBQ3RCLFVBQU1DLFVBQVMsS0FBSyxFQUFFLFVBQVUsR0FBRyxNQUFNLENBQUM7QUFDMUMsUUFBSSxNQUFPLFNBQVFBLFNBQVEsS0FBSztBQUNoQyxRQUFJQSxPQUFNO0FBQ1YsV0FBT0E7QUFBQSxFQUNYO0FBR0EsUUFBTSxFQUFFLEtBQUssT0FBTyxVQUFVLElBQUk7QUFDbEMsU0FBTyxNQUFNO0FBQ2IsU0FBTyxNQUFNO0FBRWIsUUFBTSxVQUE2RCxDQUFDO0FBQ3BFLFFBQU0sV0FBK0MsQ0FBQztBQUd0RCxhQUFXLENBQUNELE1BQUssS0FBSyxLQUFLLE9BQU8sUUFBUSxLQUFLLEdBQUc7QUFDOUMsUUFBSUEsS0FBSSxXQUFXLElBQUksR0FBRztBQUN0QixjQUFRLEtBQUssQ0FBQ0EsTUFBSyxLQUFzQixDQUFDO0FBQzFDLGFBQU8sTUFBTUEsSUFBRztBQUFBLElBQ3BCO0FBQ0EsUUFBSSxpQkFBaUIsVUFBVTtBQUMzQixlQUFTLEtBQUssQ0FBQ0EsTUFBSyxLQUFLLENBQUM7QUFDMUIsWUFBTUEsSUFBRyxJQUFJLE1BQU0sSUFBSTtBQUFBLElBQzNCO0FBQUEsRUFDSjtBQUdBLFFBQU0sU0FBUyxlQUFlLGFBQWEsS0FBSyxJQUFJLElBQUssS0FBZSxLQUFLO0FBQzdFLE1BQUksYUFBYyxRQUFPLE9BQU8sUUFBUSxLQUFLO0FBQzdDLE1BQUksTUFBTyxTQUFRLFFBQVEsS0FBSztBQUVoQyxNQUFJLElBQUssS0FBSSxPQUFPLFFBQVEsR0FBRztBQUMvQixNQUFJLFVBQVcsS0FBSSxTQUFTLFFBQVEsU0FBUztBQUc3QyxXQUFTLFNBQVMsTUFBTSxRQUFRLFFBQVEsSUFBSSxXQUFXLENBQUMsUUFBUSxHQUFHO0FBQy9ELFFBQUksVUFBVSxNQUFNO0FBQ2hCLGNBQVEsS0FBSyxNQUFNLG1EQUFtRCxDQUFDO0FBQ3ZFO0FBQUEsSUFDSjtBQUVBLFFBQUksTUFBTSxRQUFRLEtBQUssR0FBRztBQUN0QixpQkFBVyxNQUFNLE9BQU87QUFDcEIsZUFBTyxRQUFRLEVBQUU7QUFBQSxNQUNyQjtBQUFBLElBQ0osV0FBVyxPQUFPO0FBQ2QsVUFBSSxFQUFFLGlCQUFpQkQsU0FBUSxTQUFTO0FBQ3BDLGdCQUFRLElBQUksU0FBUyxLQUFLO0FBQUEsTUFDOUI7QUFDQSxhQUFPLFFBQVEsS0FBSztBQUFBLElBQ3hCO0FBQUEsRUFDSjtBQUdBLFFBQU0sa0JBQWtCLFFBQVEsSUFBSSxDQUFDLENBQUMsS0FBSyxPQUFPLE1BQU07QUFDcEQsVUFBTSxLQUFLLE9BQU8sUUFBUSxXQUFXLEdBQUcsR0FBRyxPQUFPO0FBQ2xELFdBQU8sTUFBTSxPQUFPLFdBQVcsRUFBRTtBQUFBLEVBQ3JDLENBQUM7QUFHRCxhQUFXLENBQUNDLE1BQUssS0FBSyxLQUFLLE9BQU8sUUFBUSxhQUFhLEdBQUc7QUFDdEQsUUFBSSxpQkFBaUIsVUFBVTtBQUMzQixlQUFTLEtBQUssQ0FBQ0EsTUFBSyxLQUFLLENBQUM7QUFBQSxJQUM5QixPQUFPO0FBQ0gsYUFBTyxPQUFPLFFBQVEsRUFBRSxDQUFDQSxJQUFHLEdBQUcsTUFBTSxDQUFDO0FBQUEsSUFDMUM7QUFBQSxFQUNKO0FBR0EsUUFBTSxrQkFBa0IsU0FBUyxJQUFJLENBQUMsQ0FBQyxNQUFNLE9BQU8sTUFBTTtBQUN0RCxVQUFNLFVBQVUsUUFBUSxVQUFVLE1BQU07QUFDcEMsVUFBSSxRQUFRLE1BQU0sUUFBUSxJQUFJLENBQUM7QUFBQSxJQUNuQyxDQUFDO0FBQ0QsUUFBSSxRQUFRLE1BQU0sUUFBUSxJQUFJLENBQUM7QUFDL0IsV0FBTztBQUFBLEVBQ1gsQ0FBQztBQUdELE1BQUksZ0JBQWdCLFNBQVMsS0FBSyxnQkFBZ0IsU0FBUyxHQUFHO0FBQzFELGNBQVUsTUFBTTtBQUNaLHNCQUFnQixRQUFRLENBQUMsT0FBTyxHQUFHLENBQUM7QUFDcEMsc0JBQWdCLFFBQVEsQ0FBQyxPQUFPLEdBQUcsQ0FBQztBQUFBLElBQ3hDLENBQUM7QUFBQSxFQUNMO0FBRUEsTUFBSSxNQUFNO0FBQ1YsU0FBTztBQUNYO0FBR08sSUFBTSxPQUFPOzs7QUs1VGIsU0FBUyxJQUF1QztBQUFBLEVBQ25EO0FBQUEsRUFDQSxVQUFVO0FBQUEsRUFDVjtBQUFBLEVBQ0EsS0FBSyxDQUFDLFNBQWU7QUFDekIsR0FBMEM7QUFHdEMsUUFBTSxlQUFlLFNBQVM7QUFDOUIsUUFBTSxNQUFNLG9CQUFJLElBQXlCO0FBQ3pDLFFBQU0sV0FBVyxJQUFJLFNBQWE7QUFFbEMsV0FBU0UsUUFBTyxFQUFFLE1BQU0sT0FBTyxPQUFPLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBWTtBQUM3RCxVQUFNLFFBQVE7QUFDZCxRQUFJLE9BQU8sWUFBWSxZQUFZO0FBQy9CLGNBQVEsT0FBTyxNQUFNLE1BQU0sSUFBSSxDQUFDO0FBQUEsSUFDcEMsV0FBVyxZQUFZLE1BQU07QUFDekIsVUFBSSxlQUFlLEtBQUs7QUFBQSxJQUM1QjtBQUFBLEVBQ0o7QUFFQSxXQUFTLFNBQVMsV0FBMkI7QUFDekMsVUFBTSxRQUFRLENBQUMsR0FBRyxTQUFTO0FBQzNCLFVBQU0sTUFBTSxNQUFNLElBQUksRUFBRTtBQUN4QixVQUFNLFFBQVEsSUFBSSxJQUFJLEdBQUc7QUFHekIsZUFBVyxDQUFDLEtBQUssS0FBSyxLQUFLLElBQUksUUFBUSxHQUFHO0FBR3RDLGVBQVMsT0FBTyxNQUFNLEtBQUs7QUFFM0IsVUFBSSxDQUFDLE1BQU0sSUFBSSxHQUFHLEdBQUc7QUFDakIsUUFBQUEsUUFBTyxLQUFLO0FBQ1osWUFBSSxPQUFPLEdBQUc7QUFBQSxNQUNsQjtBQUFBLElBQ0o7QUFHQSxVQUFNLElBQUksQ0FBQyxNQUFNLE1BQU07QUFDbkIsWUFBTSxNQUFNLElBQUksQ0FBQztBQUNqQixVQUFJLElBQUksSUFBSSxHQUFHLEdBQUc7QUFDZCxjQUFNO0FBQUEsVUFDRixPQUFPLENBQUMsRUFBRSxRQUFRO0FBQUEsVUFDbEI7QUFBQSxRQUNKLElBQUksSUFBSSxJQUFJLEdBQUc7QUFDZixpQkFBUyxDQUFDO0FBQ1YsWUFBSSxDQUFDLEdBQUcsUUFBUSxFQUFFLEtBQUssQ0FBQyxPQUFPLE9BQU8sS0FBSyxHQUFHO0FBQzFDLGtCQUFRLEtBQUsseUJBQXlCLEdBQUcsRUFBRTtBQUFBLFFBQy9DLE9BQU87QUFDSCxtQkFBUyxPQUFPLEtBQUs7QUFBQSxRQUN6QjtBQUFBLE1BQ0osT0FBTztBQUNILGNBQU0sQ0FBQyxPQUFPLFFBQVEsSUFBSSxZQUFZLENBQUM7QUFDdkMsY0FBTSxRQUFRLElBQUksTUFBTSxZQUFZO0FBQ3BDLGNBQU0sUUFBUSxNQUFNLElBQUksTUFBTSxRQUFRLE1BQU0sS0FBSyxDQUFDO0FBQ2xELFlBQUksSUFBSSxLQUFLLEVBQUUsTUFBTSxPQUFPLE9BQU8sQ0FBQyxPQUFPLFFBQVEsR0FBRyxNQUFNLENBQUM7QUFDN0QsaUJBQVMsT0FBTyxLQUFLO0FBQUEsTUFDekI7QUFBQSxJQUNKLENBQUM7QUFBQSxFQUNMO0FBRUEsUUFBTSxVQUFVLEtBQUssVUFBVSxNQUFNO0FBQ2pDLGFBQVMsS0FBSyxJQUFJLENBQUM7QUFBQSxFQUN2QixDQUFDO0FBQ0QsV0FBUyxLQUFLLElBQUksQ0FBQztBQUVuQixZQUFVLE1BQU07QUFDWixZQUFRO0FBRVIsZUFBVyxTQUFTLElBQUksT0FBTyxHQUFHO0FBQzlCLE1BQUFBLFFBQU8sS0FBSztBQUFBLElBQ2hCO0FBRUEsUUFBSSxNQUFNO0FBQUEsRUFDZCxDQUFDO0FBRUQsU0FBTztBQUNYOzs7QUN6Rk8sU0FBUyxLQUErQjtBQUFBLEVBQzNDO0FBQUEsRUFDQSxVQUFVO0FBQUEsRUFDVjtBQUNKLEdBQWlDO0FBQzdCLFFBQU0sZUFBZSxTQUFTO0FBQzlCLFFBQU0sV0FBVyxJQUFJLFNBQVk7QUFFakMsTUFBSTtBQUNKLE1BQUk7QUFFSixXQUFTQyxRQUFPLE9BQVU7QUFDdEIsYUFBUyxPQUFPLEtBQUs7QUFDckIsUUFBSSxNQUFPLE9BQU0sUUFBUTtBQUV6QixRQUFJLE9BQU8sWUFBWSxZQUFZO0FBQy9CLGNBQVEsS0FBSztBQUFBLElBQ2pCLFdBQVcsWUFBWSxNQUFNO0FBQ3pCLFVBQUksZUFBZSxLQUFLO0FBQUEsSUFDNUI7QUFBQSxFQUNKO0FBRUEsV0FBUyxTQUFTLEdBQU07QUFDcEIsZUFBVyxTQUFTLFVBQVU7QUFDMUIsTUFBQUEsUUFBTyxLQUFLO0FBQUEsSUFDaEI7QUFFQSxZQUFRLElBQUksTUFBTSxZQUFZO0FBQzlCLFVBQU0sS0FBSyxNQUFNLElBQUksTUFBTSxRQUFRLENBQUMsQ0FBQztBQUNyQyxRQUFJLE9BQU8sTUFBTSxPQUFPLFNBQVMsT0FBTyxRQUFRLE9BQU8sUUFBVztBQUM5RCxlQUFTLE9BQU8sRUFBRTtBQUFBLElBQ3RCO0FBQUEsRUFDSjtBQUVBLFFBQU0sVUFBVSxNQUFNLFVBQVUsTUFBTTtBQUNsQyxVQUFNLFdBQVcsTUFBTSxJQUFJO0FBQzNCLFFBQUksaUJBQWlCLFVBQVU7QUFDM0IsZUFBVSxlQUFlLFFBQVM7QUFBQSxJQUN0QztBQUFBLEVBQ0osQ0FBQztBQUVELGlCQUFlLE1BQU0sSUFBSTtBQUN6QixXQUFTLFlBQVk7QUFFckIsWUFBVSxNQUFNO0FBQ1osWUFBUTtBQUNSLGVBQVcsU0FBUyxVQUFVO0FBQzFCLE1BQUFBLFFBQU8sS0FBSztBQUFBLElBQ2hCO0FBQUEsRUFDSixDQUFDO0FBRUQsU0FBTztBQUNYOzs7QUN4RUEsT0FBT0MsY0FBYTs7O0FWWXBCLElBQUksS0FBSztBQUlUQyxNQUFLLFNBQVMsWUFBWTtBQUkxQixNQUFNLE9BQU8sb0JBQW9CLEVBQUUsS0FBSyxDQUFDLEVBQUUsU0FBUyxJQUFJLE1BQU0sSUFBSSxLQUFLLENBQUMsRUFBRSxNQUFNLE1BQU0sTUFBTTtBQXBCNUYsb0NBQUFDLG1CQUFBLGdCQUFBQyxpQkFBQSxlQUFBQyxnQkFBQSxpREFBQUMsS0FBQSxpSUFBQUM7QUFzQ0EsbUJBQUMsU0FBUztBQUNWLElBQU0sTUFBTixlQUFrQkQsTUFBQSxJQUFJLGFBMENsQixzQkFBQyxPQUFPLElBQUksTUFBTSxJQVFsQixpQkFBQyxPQUFPLEtBQUssSUFTYixnQkFBQyxPQUFPLEtBQUssSUFRYkQsaUJBQUEsQ0FBQyxPQUFPLE1BQU0sSUFRZCxpQkFBQyxPQUFPLE1BQU0sSUFRZEQsa0JBQUEsQ0FBQyxPQUFPLE1BQU0sSUFRZCxrQkFBQyxPQUFPLE1BQU0sSUFRZEQsb0JBQUEsQ0FBQyxPQUFPLE1BQU0sSUFRZCxvQkFBQyxPQUFPLE1BQU0sSUE0SGQsZ0JBQUMsT0FBTyxPQUFPLFFBQVEsSUF2T1RHLEtBQWdCO0FBQUEsRUE0TDlCLGNBQWM7QUFDVixVQUFNLEVBQUUsT0FBT0UsS0FBSSxpQkFBaUIscUJBQXFCLENBQUM7QUE3TGxFLHNCQUFBRCxRQUFBO0FBQUE7QUFHSSxzQ0FBZ0I7QUFDaEI7QUFDQSx5Q0FBbUI7QUFDbkI7QUFDQSxzQ0FBZ0IsSUFBSSxNQUF1QjtBQXdMdkMsdUJBQUssY0FBZSxJQUFJLFFBQVE7QUFBQSxNQUM1QixjQUFjLEtBQUssY0FBYyxLQUFLLElBQUk7QUFBQSxNQUMxQyxNQUFNLEtBQUssS0FBSyxLQUFLLElBQUk7QUFBQSxNQUN6QixTQUFTLENBQUMsU0FBUyxJQUFJLFFBQVEsQ0FBQyxZQUFZLEtBQUssUUFBUSxNQUFNLE9BQU8sQ0FBQztBQUFBLE1BQ3ZFLFVBQVUsTUFBTTtBQUNaLFlBQUksT0FBTywwQkFBMEIsSUFBSTtBQUFBLE1BQzdDO0FBQUEsSUFDSixDQUFDO0FBRUQsdUJBQUssNkJBQVMsYUFBYSxFQUFFLFFBQVEsaUJBQWlCLE1BQU07QUFDeEQsV0FBSyxPQUFPLFVBQVU7QUFBQSxJQUMxQixDQUFDO0FBRUQsU0FBSyxRQUFRLGdCQUFnQixDQUFDLEdBQUcsV0FBVztBQUN4QyxZQUFNLE1BQU0sT0FBTyxRQUFRLG1CQUFtQixNQUFNLEtBQUssY0FBYyxNQUFNLENBQUM7QUFDOUUsWUFBTSxNQUFNLEtBQUssUUFBUSxrQkFBa0IsQ0FBQ0UsSUFBRyxZQUFZO0FBQ3ZELFlBQUksV0FBVyxRQUFRO0FBQ25CLGlCQUFPLFdBQVcsR0FBRztBQUNyQixlQUFLLFdBQVcsR0FBRztBQUFBLFFBQ3ZCO0FBQUEsTUFDSixDQUFDO0FBQUEsSUFDTCxDQUFDO0FBRUQsdUJBQUssOEJBQVUsUUFBUSxVQUFVLENBQUMsR0FBRyxFQUFFLEtBQUssTUFBTTtBQUM5QyxjQUFRLE1BQU07QUFBQSxRQUNWLEtBQUs7QUFDRCxlQUFLLE9BQU8sV0FBVztBQUN2QjtBQUFBLFFBQ0osS0FBSztBQUNELGVBQUssT0FBTyxZQUFZO0FBQ3hCO0FBQUEsUUFDSixLQUFLO0FBQ0QsZUFBSyxPQUFPLGNBQWM7QUFDMUI7QUFBQSxRQUNKO0FBQ0k7QUFBQSxNQUNSO0FBQUEsSUFDSixDQUFDO0FBQUEsRUFDTDtBQUFBLEVBaE5BLElBQUksZUFBZTtBQUNmLFdBQU8sbUJBQUs7QUFBQSxFQUNoQjtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS0EsZUFBZTtBQUNYLFVBQU0sT0FBTyxtQkFBSyw2QkFBUyxhQUFhO0FBQ3hDLFVBQU0sT0FBTyxJQUFJLE1BQW1CO0FBRXBDLFFBQUksVUFBOEI7QUFDbEMsUUFBSSxJQUFJO0FBRVIsWUFBUSxVQUFVLEtBQUssU0FBUyxHQUFHLE9BQU8sTUFBTTtBQUM1QyxXQUFLLEtBQUssT0FBTztBQUFBLElBQ3JCO0FBRUEsV0FBTztBQUFBLEVBQ1g7QUFBQSxFQUdRLGNBQWMsUUFBb0I7QUFDdEMsU0FBSztBQUFBLEVBQ1Q7QUFBQSxFQU1BLElBQUksV0FBK0I7QUFDL0IsV0FBTyxLQUFLLGFBQWE7QUFBQSxFQUM3QjtBQUFBLEVBT0EsSUFBSSxVQUE2QjtBQUM3QixXQUFPLEtBQUssWUFBWTtBQUFBLEVBQzVCO0FBQUEsRUFNQSxJQUFJLFNBQVMsTUFBYztBQUN2Qix1QkFBSyw4QkFBVSxlQUFlO0FBQUEsRUFDbEM7QUFBQSxFQU1BLElBQUksV0FBVztBQUNYLFdBQU8sbUJBQUssOEJBQVU7QUFBQSxFQUMxQjtBQUFBLEVBTUEsSUFBSSxVQUFVLE1BQWM7QUFDeEIsdUJBQUssOEJBQVUsbUJBQW1CO0FBQUEsRUFDdEM7QUFBQSxFQU1BLElBQUksWUFBWTtBQUNaLFdBQU8sbUJBQUssOEJBQVU7QUFBQSxFQUMxQjtBQUFBLEVBTUEsSUFBSSxZQUFZLE1BQWM7QUFDMUIsdUJBQUssOEJBQVUscUJBQXFCO0FBQUEsRUFDeEM7QUFBQSxFQU1BLElBQUksY0FBYztBQUNkLFdBQU8sbUJBQUssOEJBQVU7QUFBQSxFQUMxQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxXQUFXLE1BQWM7QUFDckIsV0FBTyxLQUFLLFFBQVEsS0FBSyxDQUFDLE1BQU0sRUFBRSxTQUFTLElBQUk7QUFBQSxFQUNuRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxjQUFjLE1BQWM7QUFDeEIsVUFBTSxNQUFNLEtBQUssV0FBVyxJQUFJO0FBQ2hDLFFBQUksQ0FBQyxJQUFLLE9BQU0sTUFBTSxtQ0FBbUMsSUFBSSxHQUFHO0FBQ2hFLFFBQUksVUFBVSxDQUFDLElBQUk7QUFBQSxFQUN2QjtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS0EsWUFBWTtBQUNSLGVBQVcsWUFBWSxtQkFBSyxnQkFBZTtBQUN2QyxVQUFJLGFBQWEsNEJBQTRCLG1CQUFLLDhCQUFVLFFBQVE7QUFBQSxJQUN4RTtBQUFBLEVBQ0o7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsVUFBVSxPQUFlLFFBQVEsT0FBTztBQUNwQyxVQUFNLFdBQVcsSUFBSSxJQUFJLFlBQVk7QUFFckMsYUFBUyxRQUFRLGlCQUFpQixDQUFDLEdBQUcsU0FBUyxVQUFVO0FBQ3JELFlBQU0sT0FBTyxRQUFRLFNBQVMsR0FBRyxhQUFhLEtBQUs7QUFDbkQsWUFBTSxPQUFPLFFBQVEsbUJBQW1CLEVBQUUsUUFBUTtBQUNsRCxZQUFNLFFBQVEsUUFBUSxtQkFBbUIsRUFBRSxhQUFhO0FBQ3hELGNBQVEsTUFBTSxhQUFhLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxJQUFJLE1BQU0sT0FBTyxFQUFFO0FBQUEsSUFDdkUsQ0FBQztBQUVELFFBQUksTUFBTyxNQUFLLFVBQVU7QUFFMUIsUUFBSVAsTUFBSyxVQUFVLE9BQU9BLE1BQUssU0FBUyxNQUFNLEdBQUc7QUFDN0MsZUFBUyxlQUFlLEtBQUs7QUFBQSxJQUNqQyxXQUFXLE1BQU0sV0FBVyxhQUFhLEdBQUc7QUFDeEMsZUFBUyxtQkFBbUIsTUFBTSxRQUFRLGVBQWUsRUFBRSxDQUFDO0FBQUEsSUFDaEUsT0FBTztBQUNILGVBQVMsaUJBQWlCLEtBQUs7QUFBQSxJQUNuQztBQUVBLFFBQUksYUFBYTtBQUFBLE1BQ2IsbUJBQUs7QUFBQSxNQUNMO0FBQUEsTUFDQSxJQUFJO0FBQUEsSUFDUjtBQUVBLHVCQUFLLGVBQWMsS0FBSyxRQUFRO0FBQUEsRUFDcEM7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtBLFVBQVUsTUFBYztBQUNwQixRQUFJLFVBQVUsZ0JBQWdCLG1CQUFLLDRCQUFRLEVBQUUsZ0JBQWdCLElBQUk7QUFBQSxFQUNyRTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS0EsS0FBSyxPQUFPLEdBQUc7QUFDWCx1QkFBSyxjQUFhLEtBQUs7QUFDdkIsVUFBTSxLQUFLO0FBQ1gsU0FBSyxJQUFJO0FBQUEsRUFDYjtBQUFBLEVBOENRLFFBQVEsTUFBZ0IsVUFBc0M7QUFDbEUsUUFBSSxtQkFBSyxzQkFBcUIsR0FBRztBQUM3QixlQUFTLGFBQWEsS0FBSyxZQUFZLHNDQUFzQztBQUFBLElBQ2pGO0FBQ0EsU0FBSztBQUFBLEVBQ1Q7QUFBQSxFQUVBLG1CQUFtQixLQUF5QztBQUN4RCxRQUFJLElBQUksVUFBVTtBQUNkLFdBQUssUUFBUSxJQUFJLGNBQWMsR0FBRyxDQUFDLFFBQVE7QUFDdkMsWUFBSSxjQUFjLE1BQU0sSUFBSTtBQUM1QixZQUFJLEtBQUs7QUFBQSxNQUNiLENBQUM7QUFBQSxJQUNMLE9BQU87QUFDSCxXQUFLLEtBQUs7QUFDVix5QkFBSyxjQUFhLE1BQU07QUFBQSxRQUNwQixNQUFNLEtBQUs7QUFBQSxNQUNmLENBQUM7QUFDRCxpQkFBVyxDQUFDLFlBQVk7QUFqU3BDLFlBQUFJO0FBa1NnQixhQUFLLFFBQVEsWUFBWSxPQUFPO0FBQ2hDLFNBQUFBLE1BQUEsbUJBQUssV0FBTCxnQkFBQUEsSUFBQSxXQUFhLEdBQUc7QUFBQSxNQUNwQixDQUFDO0FBQUEsSUFDTDtBQUVBLFdBQU87QUFBQSxFQUNYO0FBQUEsRUFFQSxNQUFNSSxTQUFxQjtBQUN2QixVQUFNLEVBQUUsTUFBTSxnQkFBZ0IsY0FBYyxLQUFLLE9BQU8sR0FBRyxJQUFJLElBQUlBO0FBRW5FLHVCQUFLLE9BQVE7QUFDYixXQUFPLE9BQU8sTUFBTSxHQUFHO0FBRXZCLFFBQUksZ0JBQWdCO0FBQ2hCLFdBQUssUUFBUSxXQUFXLENBQUMsR0FBRyxNQUFNLGFBQWEsZUFBZSxNQUFNLFFBQVEsQ0FBQztBQUFBLElBQ2pGO0FBRUEsUUFBSSxhQUFjLG9CQUFLLGVBQWdCO0FBQ3ZDLFFBQUksSUFBSyxNQUFLLFVBQVUsS0FBSyxLQUFLO0FBQ2xDLFFBQUksTUFBTyxLQUFJLFVBQVUsS0FBSztBQUU5QixTQUFLLGdCQUFnQixjQUFjLEtBQUs7QUFDeEMsd0JBQW9CLEtBQUssWUFBWTtBQUNyQyxTQUFLLFNBQVMsV0FBVztBQUFBLEVBQzdCO0FBQUEsRUFFQSxRQUNJQyxTQUNBLFVBQ007QUFDTixRQUFJQSxZQUFXLFVBQVcsb0JBQUssa0JBQUwsbUJBQUssb0JBQW9CO0FBQ25ELFdBQU8sTUFBTSxRQUFRQSxTQUFRLFFBQVE7QUFBQSxFQUN6QztBQUNKO0FBN1JBSixTQUFBLGlCQUFBRDtBQUdJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFQSjtBQVNRLGVBQVMsV0FBaUI7QUFDMUIsUUFBTSxXQUFXLElBQUksU0FBUyxZQUFZO0FBQzFDLE1BQUksQ0FBQyxTQUFVLE9BQU0sTUFBTSx3QkFBd0I7QUFDbkQsU0FBTztBQUNYO0FBRUksY0FBUSxXQUFnQjtBQUN4QixRQUFNLFVBQVUsSUFBSSxRQUFRLFlBQVk7QUFDeEMsTUFBSSxDQUFDLFFBQVMsT0FBTSxNQUFNLHVCQUF1QjtBQUNqRCxTQUFPO0FBQ1g7QUF3QkEsa0JBQUFDLFFBQUEsR0FBUSxpQkFEUixvQkExQ0U7QUFtREYsa0JBQUFBLFFBQUEsR0FBSSxZQURKLGVBbERFO0FBNERGLGtCQUFBQSxRQUFBLEdBQUksV0FESixjQTNERTtBQW9FRixrQkFBQUEsUUFBQSxHQUFJLFlBREpGLGdCQW5FRTtBQTRFRixrQkFBQUUsUUFBQSxHQUFJLFlBREosZUEzRUU7QUFvRkYsa0JBQUFBLFFBQUEsR0FBSSxhQURKSCxpQkFuRkU7QUE0RkYsa0JBQUFHLFFBQUEsR0FBSSxhQURKLGdCQTNGRTtBQW9HRixrQkFBQUEsUUFBQSxHQUFJLGVBREpKLG1CQW5HRTtBQTRHRixrQkFBQUksUUFBQSxHQUFJLGVBREosa0JBM0dFO0FBd09GLGtCQUFBQSxRQUFBLEdBQVEsV0FEUixjQXZPRTtBQUFBLE1BQU4sa0JBQUFBLFFBQUEsVUFEQSxpQkFDTTtBQUFOLGtCQUFBQSxRQUFBLEdBQU07QUErUk4sSUFBTSxNQUFNLElBQUksSUFBSTtBQUNwQixJQUFPLGNBQVE7OztBV3ZVZjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7QUNBQSxPQUFPSyxVQUFTO0FBQ2hCLE9BQU9DLFdBQVU7QUFJakIsSUFBTSxVQUFVLElBQUksWUFBWTtBQUxoQyx5Q0FBQUMsS0FBQSxxQkFBQUMsUUFBQTtBQWtCQSx1QkFBQyxTQUFTO0FB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QUM7QUFBQTtBQUFBLFVBQ0MsYUFBYUEsS0FBSSxZQUFZO0FBQUEsVUFDN0IsUUFBUUEsS0FBSSxNQUFNO0FBQUEsVUFDbEIsWUFBWSxDQUFDLE9BQU87QUFBQSxVQUVwQjtBQUFBLGdDQUFDLGlCQUFjO0FBQUEsWUFDZixvQkFBQyxvQkFBaUIsSUFBSSxJQUFJLFVBQVUsR0FBRztBQUFBO0FBQUE7QUFBQSxNQUN6QztBQUFBO0FBQUEsRUFDRjtBQUNGOzs7QUNuQkEsSUFBTSxXQUFXLElBQUksZ0JBQWdCO0FBRXJDLFNBQVMsZ0JBQWdCLFVBQVUsb0JBQW9CO0FBRXZELFlBQUksTUFBTTtBQUFBLEVBQ1IsS0FBSztBQUFBLEVBQ0wsY0FBYyxlQUFPO0FBQUEsRUFDckIsZUFBZSxTQUFtQixLQUE4QjtBQUM5RCxVQUFNLFNBQVMsU0FBUyxrQkFBa0IsU0FBUyxHQUFHO0FBQ3RELFFBQUksUUFBUTtBQUNWLFVBQUksTUFBTTtBQUNWO0FBQUEsSUFDRjtBQUNBLFFBQUksaUJBQWlCO0FBQUEsRUFDdkI7QUFBQSxFQUNBLE9BQU87QUFDTCxnQkFBSSxhQUFhLEVBQUUsSUFBSSxDQUFDLFFBQVEsY0FBYyxHQUFHLENBQUM7QUFDbEQsUUFBSSxlQUFPLE1BQU0sU0FBUztBQUN4QixrQkFBSSxhQUFhLEVBQUUsSUFBSSxDQUFDLFFBQVEsVUFBVSxHQUFHLENBQUM7QUFBQSxJQUNoRDtBQUNBLGdCQUFJLGFBQWEsRUFBRSxJQUFJLENBQUMsUUFBUSxJQUFJLEdBQUcsQ0FBQztBQUN4QyxRQUFJLGVBQU8sY0FBYyxTQUFTO0FBQ2hDLGtCQUFJLGFBQWEsRUFBRSxJQUFJLENBQUMsUUFBUSx3QkFBd0IsR0FBRyxDQUFDO0FBQUEsSUFDOUQ7QUFBQSxFQUNGO0FBQ0YsQ0FBQzsiLAogICJuYW1lcyI6IFsicGF0Y2giLCAiTm90aWZpY2F0aW9uIiwgIldwIiwgIlRyYXkiLCAic25ha2VpZnkiLCAic25ha2VpZnkiLCAiZ2V0dGVyIiwgInNldHRlciIsICJzZXQiLCAic2lnbmFsTmFtZSIsICJzaWduYWwiLCAiR0xpYiIsICJHaW8iLCAiR0xpYiIsICJHT2JqZWN0IiwgIkdMaWIiLCAiR09iamVjdCIsICJzaWduYWwiLCAidmFsdWUiLCAidGltZW91dCIsICJzZXQiLCAibmFtZSIsICJhcmdzIiwgIl9hIiwgImFwcCIsICJHT2JqZWN0IiwgIkdPYmplY3QiLCAiX2EiLCAic2lnbmFsIiwgIkdPYmplY3QiLCAiR2lvIiwgIkdMaWIiLCAiR09iamVjdCIsICJzZXQiLCAiR2lvIiwgIkdPYmplY3QiLCAiZ2V0dGVyIiwgIkdPYmplY3QiLCAia2V5IiwgIm9iamVjdCIsICJyZW1vdmUiLCAicmVtb3ZlIiwgIkdPYmplY3QiLCAiR0xpYiIsICJfY3Vyc29yVGhlbWVfZGVjIiwgIl9pY29uVGhlbWVfZGVjIiwgIl9ndGtUaGVtZV9kZWMiLCAiX2EiLCAiX2luaXQiLCAiR2lvIiwgIl8iLCAiY29uZmlnIiwgInNpZ25hbCIsICJHaW8iLCAiR0xpYiIsICJfYSIsICJfaW5pdCIsICJHaW8iLCAic2lnbmFsIiwgIkdMaWIiLCAiR0xpYiIsICJlbnYiLCAiR3RrIiwgIkdkayIsICJfYSIsICJfaW5pdCIsICJpbnRlcnZhbCIsICJzaWduYWwiLCAic2V0IiwgImVudHJpZXMiLCAicHNwZWMiLCAiR3RrIiwgIkFzdGFsIiwgIkd0ayIsICJHaW8iLCAiR3RrIiwgInNldHRlciIsICJjc3MiLCAiR2lvIiwgIkd0ayIsICJBc3RhbCIsICJHdGsiLCAiR3RrIiwgIkd0ayIsICJXcCIsICJHdGsiLCAiR3RrIiwgIkd0ayIsICJHdGsiLCAiR0xpYiIsICJHaW8iLCAiX2luaXQiLCAiY29uZmlnIiwgIkd0ayJdCn0K

EOF

LD_PRELOAD="/usr/lib/libgtk4-layer-shell.so" /usr/sbin/gjs -m $file $@